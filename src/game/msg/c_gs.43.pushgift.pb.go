// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.43.pushgift.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 推送礼包
type PushGiftData struct {
	Gifts []*PushGiftOne `protobuf:"bytes,1,rep,name=Gifts" json:"Gifts,omitempty"`
}

func (m *PushGiftData) Reset()                    { *m = PushGiftData{} }
func (m *PushGiftData) String() string            { return proto.CompactTextString(m) }
func (*PushGiftData) ProtoMessage()               {}
func (*PushGiftData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_43Pushgift, []int{0} }

type PushGiftOne struct {
	Id       int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BuyCnt   int32 `protobuf:"varint,2,opt,name=BuyCnt,proto3" json:"BuyCnt,omitempty"`
	CreateTs int64 `protobuf:"varint,3,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
}

func (m *PushGiftOne) Reset()                    { *m = PushGiftOne{} }
func (m *PushGiftOne) String() string            { return proto.CompactTextString(m) }
func (*PushGiftOne) ProtoMessage()               {}
func (*PushGiftOne) Descriptor() ([]byte, []int) { return fileDescriptorCGs_43Pushgift, []int{1} }

// ============================================================================
// 推送
type GS_PushGiftNew struct {
	Id       int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreateTs int64 `protobuf:"varint,2,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
}

func (m *GS_PushGiftNew) Reset()                    { *m = GS_PushGiftNew{} }
func (m *GS_PushGiftNew) String() string            { return proto.CompactTextString(m) }
func (*GS_PushGiftNew) ProtoMessage()               {}
func (*GS_PushGiftNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_43Pushgift, []int{2} }

type GS_PushGiftRewards struct {
	Id      int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Rewards *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_PushGiftRewards) Reset()                    { *m = GS_PushGiftRewards{} }
func (m *GS_PushGiftRewards) String() string            { return proto.CompactTextString(m) }
func (*GS_PushGiftRewards) ProtoMessage()               {}
func (*GS_PushGiftRewards) Descriptor() ([]byte, []int) { return fileDescriptorCGs_43Pushgift, []int{3} }

// 设置创建时间
type C_PushGiftSetCreateTs struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_PushGiftSetCreateTs) Reset()         { *m = C_PushGiftSetCreateTs{} }
func (m *C_PushGiftSetCreateTs) String() string { return proto.CompactTextString(m) }
func (*C_PushGiftSetCreateTs) ProtoMessage()    {}
func (*C_PushGiftSetCreateTs) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_43Pushgift, []int{4}
}

type GS_PushGiftSetCreateTs_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CreateTs  int64 `protobuf:"varint,3,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
}

func (m *GS_PushGiftSetCreateTs_R) Reset()         { *m = GS_PushGiftSetCreateTs_R{} }
func (m *GS_PushGiftSetCreateTs_R) String() string { return proto.CompactTextString(m) }
func (*GS_PushGiftSetCreateTs_R) ProtoMessage()    {}
func (*GS_PushGiftSetCreateTs_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_43Pushgift, []int{5}
}

func init() {
	proto.RegisterType((*PushGiftData)(nil), "msg.PushGiftData")
	proto.RegisterType((*PushGiftOne)(nil), "msg.PushGiftOne")
	proto.RegisterType((*GS_PushGiftNew)(nil), "msg.GS_PushGiftNew")
	proto.RegisterType((*GS_PushGiftRewards)(nil), "msg.GS_PushGiftRewards")
	proto.RegisterType((*C_PushGiftSetCreateTs)(nil), "msg.C_PushGiftSetCreateTs")
	proto.RegisterType((*GS_PushGiftSetCreateTs_R)(nil), "msg.GS_PushGiftSetCreateTs_R")
}
func (m *PushGiftData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushGiftData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for _, msg := range m.Gifts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PushGiftOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushGiftOne) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Id))
	}
	if m.BuyCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.BuyCnt))
	}
	if m.CreateTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.CreateTs))
	}
	return i, nil
}

func (m *GS_PushGiftNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PushGiftNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Id))
	}
	if m.CreateTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.CreateTs))
	}
	return i, nil
}

func (m *GS_PushGiftRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PushGiftRewards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Id))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_PushGiftSetCreateTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PushGiftSetCreateTs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_PushGiftSetCreateTs_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PushGiftSetCreateTs_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.Id))
	}
	if m.CreateTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_43Pushgift(dAtA, i, uint64(m.CreateTs))
	}
	return i, nil
}

func encodeVarintCGs_43Pushgift(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PushGiftData) Size() (n int) {
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for _, e := range m.Gifts {
			l = e.Size()
			n += 1 + l + sovCGs_43Pushgift(uint64(l))
		}
	}
	return n
}

func (m *PushGiftOne) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.Id))
	}
	if m.BuyCnt != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.BuyCnt))
	}
	if m.CreateTs != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.CreateTs))
	}
	return n
}

func (m *GS_PushGiftNew) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.Id))
	}
	if m.CreateTs != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.CreateTs))
	}
	return n
}

func (m *GS_PushGiftRewards) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.Id))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_43Pushgift(uint64(l))
	}
	return n
}

func (m *C_PushGiftSetCreateTs) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.Id))
	}
	return n
}

func (m *GS_PushGiftSetCreateTs_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.Id))
	}
	if m.CreateTs != 0 {
		n += 1 + sovCGs_43Pushgift(uint64(m.CreateTs))
	}
	return n
}

func sovCGs_43Pushgift(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_43Pushgift(x uint64) (n int) {
	return sovCGs_43Pushgift(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PushGiftData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushGiftData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushGiftData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifts = append(m.Gifts, &PushGiftOne{})
			if err := m.Gifts[len(m.Gifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushGiftOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushGiftOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushGiftOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCnt", wireType)
			}
			m.BuyCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTs", wireType)
			}
			m.CreateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PushGiftNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PushGiftNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PushGiftNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTs", wireType)
			}
			m.CreateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PushGiftRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PushGiftRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PushGiftRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PushGiftSetCreateTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PushGiftSetCreateTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PushGiftSetCreateTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PushGiftSetCreateTs_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PushGiftSetCreateTs_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PushGiftSetCreateTs_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTs", wireType)
			}
			m.CreateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_43Pushgift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_43Pushgift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_43Pushgift(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_43Pushgift
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_43Pushgift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_43Pushgift
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_43Pushgift
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_43Pushgift(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_43Pushgift = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_43Pushgift   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.43.pushgift.proto", fileDescriptorCGs_43Pushgift) }

var fileDescriptorCGs_43Pushgift = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0x31, 0xd6, 0x2b, 0x28, 0x2d, 0xce, 0x48, 0xcf, 0x4c, 0x2b, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08, 0x48,
	0x89, 0x82, 0x15, 0x1a, 0x18, 0xe8, 0x15, 0x97, 0x14, 0x95, 0x26, 0x97, 0x14, 0x43, 0x84, 0x95,
	0xcc, 0xb8, 0x78, 0x02, 0x4a, 0x8b, 0x33, 0xdc, 0x33, 0xd3, 0x4a, 0x5c, 0x12, 0x4b, 0x12, 0x85,
	0xd4, 0xb8, 0x58, 0x41, 0xec, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x01, 0xbd, 0xdc,
	0xe2, 0x74, 0x3d, 0x98, 0x0a, 0xff, 0xbc, 0xd4, 0x20, 0x88, 0xb4, 0x52, 0x20, 0x17, 0x37, 0x92,
	0xa8, 0x10, 0x1f, 0x17, 0x93, 0x67, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x93, 0x67,
	0x8a, 0x90, 0x18, 0x17, 0x9b, 0x53, 0x69, 0xa5, 0x73, 0x5e, 0x89, 0x04, 0x13, 0x58, 0x0c, 0xca,
	0x13, 0x92, 0xe2, 0xe2, 0x70, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x0d, 0x29, 0x96, 0x60, 0x56, 0x60,
	0xd4, 0x60, 0x0e, 0x82, 0xf3, 0x95, 0x6c, 0xb8, 0xf8, 0xdc, 0x83, 0xe3, 0x61, 0xa6, 0xfa, 0xa5,
	0x96, 0x63, 0x98, 0x8a, 0xac, 0x9b, 0x09, 0x4d, 0xb7, 0x0f, 0x97, 0x10, 0x92, 0xee, 0xa0, 0xd4,
	0xf2, 0xc4, 0xa2, 0x94, 0x62, 0x0c, 0x13, 0xd4, 0xb8, 0xd8, 0xa1, 0x52, 0x60, 0x03, 0xb8, 0x8d,
	0x78, 0xc0, 0x1e, 0x84, 0x8a, 0x05, 0xc1, 0x24, 0x95, 0xd4, 0xb9, 0x44, 0x9d, 0xe1, 0x86, 0x05,
	0xa7, 0x96, 0xc0, 0xac, 0x41, 0x37, 0x50, 0x29, 0x85, 0x4b, 0x02, 0xc9, 0x5a, 0x24, 0x95, 0xf1,
	0x41, 0x42, 0x32, 0x5c, 0x9c, 0xae, 0x45, 0x45, 0xf9, 0x45, 0xce, 0xf9, 0x29, 0xa9, 0x50, 0x2d,
	0x08, 0x01, 0xa8, 0x49, 0x4c, 0x58, 0x3d, 0x87, 0x16, 0x34, 0x4e, 0x22, 0x27, 0x1e, 0xca, 0x31,
	0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x24, 0xb1, 0x81, 0xa3, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x50, 0x00, 0x67, 0xa8,
	0x04, 0x02, 0x00, 0x00,
}
