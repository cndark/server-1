// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.11.plr.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 头像框
type HFrameStoreData struct {
	HFrames []*HFrameStoreOne `protobuf:"bytes,1,rep,name=HFrames" json:"HFrames,omitempty"`
}

func (m *HFrameStoreData) Reset()                    { *m = HFrameStoreData{} }
func (m *HFrameStoreData) String() string            { return proto.CompactTextString(m) }
func (*HFrameStoreData) ProtoMessage()               {}
func (*HFrameStoreData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{0} }

type HFrameStoreOne struct {
	Id       int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ExpireTs int64 `protobuf:"varint,2,opt,name=ExpireTs,proto3" json:"ExpireTs,omitempty"`
}

func (m *HFrameStoreOne) Reset()                    { *m = HFrameStoreOne{} }
func (m *HFrameStoreOne) String() string            { return proto.CompactTextString(m) }
func (*HFrameStoreOne) ProtoMessage()               {}
func (*HFrameStoreOne) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{1} }

// 推送
type GS_PlayerUpdateLv struct {
	Level   int32    `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp     int32    `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
	Rewards *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_PlayerUpdateLv) Reset()                    { *m = GS_PlayerUpdateLv{} }
func (m *GS_PlayerUpdateLv) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerUpdateLv) ProtoMessage()               {}
func (*GS_PlayerUpdateLv) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{2} }

type GS_PlayerUpdateAtkPwr struct {
	AtkPwr int32 `protobuf:"varint,1,opt,name=AtkPwr,proto3" json:"AtkPwr,omitempty"`
}

func (m *GS_PlayerUpdateAtkPwr) Reset()                    { *m = GS_PlayerUpdateAtkPwr{} }
func (m *GS_PlayerUpdateAtkPwr) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerUpdateAtkPwr) ProtoMessage()               {}
func (*GS_PlayerUpdateAtkPwr) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{3} }

type GS_PlayerUpdateHFrame struct {
	One *HFrameStoreOne `protobuf:"bytes,1,opt,name=One" json:"One,omitempty"`
}

func (m *GS_PlayerUpdateHFrame) Reset()                    { *m = GS_PlayerUpdateHFrame{} }
func (m *GS_PlayerUpdateHFrame) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerUpdateHFrame) ProtoMessage()               {}
func (*GS_PlayerUpdateHFrame) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{4} }

// ============================================================================
// 角色改名
type C_PlayerChangeName struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *C_PlayerChangeName) Reset()                    { *m = C_PlayerChangeName{} }
func (m *C_PlayerChangeName) String() string            { return proto.CompactTextString(m) }
func (*C_PlayerChangeName) ProtoMessage()               {}
func (*C_PlayerChangeName) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{5} }

type GS_PlayerChangeName_R struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GS_PlayerChangeName_R) Reset()                    { *m = GS_PlayerChangeName_R{} }
func (m *GS_PlayerChangeName_R) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerChangeName_R) ProtoMessage()               {}
func (*GS_PlayerChangeName_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{6} }

// 拉取玩家信息
type C_PlayerInfo struct {
	PlrId    string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
	SvrId    int32  `protobuf:"varint,2,opt,name=SvrId,proto3" json:"SvrId,omitempty"`
	TeamType int32  `protobuf:"varint,3,opt,name=TeamType,proto3" json:"TeamType,omitempty"`
}

func (m *C_PlayerInfo) Reset()                    { *m = C_PlayerInfo{} }
func (m *C_PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*C_PlayerInfo) ProtoMessage()               {}
func (*C_PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{7} }

type GS_PlayerInfo_R struct {
	ErrorCode   int32                 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Info        *PlayerSimpleInfo     `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
	GuildId     string                `protobuf:"bytes,3,opt,name=GuildId,proto3" json:"GuildId,omitempty"`
	GuildName   string                `protobuf:"bytes,4,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
	GuildIcon   int32                 `protobuf:"varint,5,opt,name=GuildIcon,proto3" json:"GuildIcon,omitempty"`
	DfdTeamInfo map[int32]*HeroDetail `protobuf:"bytes,6,rep,name=DfdTeamInfo" json:"DfdTeamInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GS_PlayerInfo_R) Reset()                    { *m = GS_PlayerInfo_R{} }
func (m *GS_PlayerInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerInfo_R) ProtoMessage()               {}
func (*GS_PlayerInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{8} }

// 激活头像框
type C_PlayerHFrameAdd struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_PlayerHFrameAdd) Reset()                    { *m = C_PlayerHFrameAdd{} }
func (m *C_PlayerHFrameAdd) String() string            { return proto.CompactTextString(m) }
func (*C_PlayerHFrameAdd) ProtoMessage()               {}
func (*C_PlayerHFrameAdd) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{9} }

type GS_PlayerHFrameAdd_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GS_PlayerHFrameAdd_R) Reset()                    { *m = GS_PlayerHFrameAdd_R{} }
func (m *GS_PlayerHFrameAdd_R) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerHFrameAdd_R) ProtoMessage()               {}
func (*GS_PlayerHFrameAdd_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{10} }

// 设置头像框
type C_PlayerHFrameSet struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_PlayerHFrameSet) Reset()                    { *m = C_PlayerHFrameSet{} }
func (m *C_PlayerHFrameSet) String() string            { return proto.CompactTextString(m) }
func (*C_PlayerHFrameSet) ProtoMessage()               {}
func (*C_PlayerHFrameSet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{11} }

type GS_PlayerHFrameSet_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GS_PlayerHFrameSet_R) Reset()                    { *m = GS_PlayerHFrameSet_R{} }
func (m *GS_PlayerHFrameSet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerHFrameSet_R) ProtoMessage()               {}
func (*GS_PlayerHFrameSet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{12} }

// 设置头像
type C_PlayerHeadSet struct {
	Head string `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
}

func (m *C_PlayerHeadSet) Reset()                    { *m = C_PlayerHeadSet{} }
func (m *C_PlayerHeadSet) String() string            { return proto.CompactTextString(m) }
func (*C_PlayerHeadSet) ProtoMessage()               {}
func (*C_PlayerHeadSet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{13} }

type GS_PlayerHeadSet_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_PlayerHeadSet_R) Reset()                    { *m = GS_PlayerHeadSet_R{} }
func (m *GS_PlayerHeadSet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_PlayerHeadSet_R) ProtoMessage()               {}
func (*GS_PlayerHeadSet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_11Plr, []int{14} }

func init() {
	proto.RegisterType((*HFrameStoreData)(nil), "msg.HFrameStoreData")
	proto.RegisterType((*HFrameStoreOne)(nil), "msg.HFrameStoreOne")
	proto.RegisterType((*GS_PlayerUpdateLv)(nil), "msg.GS_PlayerUpdateLv")
	proto.RegisterType((*GS_PlayerUpdateAtkPwr)(nil), "msg.GS_PlayerUpdateAtkPwr")
	proto.RegisterType((*GS_PlayerUpdateHFrame)(nil), "msg.GS_PlayerUpdateHFrame")
	proto.RegisterType((*C_PlayerChangeName)(nil), "msg.C_PlayerChangeName")
	proto.RegisterType((*GS_PlayerChangeName_R)(nil), "msg.GS_PlayerChangeName_R")
	proto.RegisterType((*C_PlayerInfo)(nil), "msg.C_PlayerInfo")
	proto.RegisterType((*GS_PlayerInfo_R)(nil), "msg.GS_PlayerInfo_R")
	proto.RegisterType((*C_PlayerHFrameAdd)(nil), "msg.C_PlayerHFrameAdd")
	proto.RegisterType((*GS_PlayerHFrameAdd_R)(nil), "msg.GS_PlayerHFrameAdd_R")
	proto.RegisterType((*C_PlayerHFrameSet)(nil), "msg.C_PlayerHFrameSet")
	proto.RegisterType((*GS_PlayerHFrameSet_R)(nil), "msg.GS_PlayerHFrameSet_R")
	proto.RegisterType((*C_PlayerHeadSet)(nil), "msg.C_PlayerHeadSet")
	proto.RegisterType((*GS_PlayerHeadSet_R)(nil), "msg.GS_PlayerHeadSet_R")
}
func (m *HFrameStoreData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HFrameStoreData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HFrames) > 0 {
		for _, msg := range m.HFrames {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_11Plr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HFrameStoreOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HFrameStoreOne) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Id))
	}
	if m.ExpireTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ExpireTs))
	}
	return i, nil
}

func (m *GS_PlayerUpdateLv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerUpdateLv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Exp))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GS_PlayerUpdateAtkPwr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerUpdateAtkPwr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AtkPwr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.AtkPwr))
	}
	return i, nil
}

func (m *GS_PlayerUpdateHFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerUpdateHFrame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.One != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.One.Size()))
		n2, err := m.One.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C_PlayerChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PlayerChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GS_PlayerChangeName_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerChangeName_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C_PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	if m.SvrId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.SvrId))
	}
	if m.TeamType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.TeamType))
	}
	return i, nil
}

func (m *GS_PlayerInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Info.Size()))
		n3, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.GuildId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if m.GuildIcon != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.GuildIcon))
	}
	if len(m.DfdTeamInfo) > 0 {
		for k, _ := range m.DfdTeamInfo {
			dAtA[i] = 0x32
			i++
			v := m.DfdTeamInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCGs_11Plr(uint64(msgSize))
			}
			mapSize := 1 + sovCGs_11Plr(uint64(k)) + msgSize
			i = encodeVarintCGs_11Plr(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_11Plr(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCGs_11Plr(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *C_PlayerHFrameAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PlayerHFrameAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_PlayerHFrameAdd_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerHFrameAdd_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C_PlayerHFrameSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PlayerHFrameSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_PlayerHFrameSet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerHFrameSet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C_PlayerHeadSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_PlayerHeadSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Head) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	return i, nil
}

func (m *GS_PlayerHeadSet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_PlayerHeadSet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_11Plr(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintCGs_11Plr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HFrameStoreData) Size() (n int) {
	var l int
	_ = l
	if len(m.HFrames) > 0 {
		for _, e := range m.HFrames {
			l = e.Size()
			n += 1 + l + sovCGs_11Plr(uint64(l))
		}
	}
	return n
}

func (m *HFrameStoreOne) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Id))
	}
	if m.ExpireTs != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ExpireTs))
	}
	return n
}

func (m *GS_PlayerUpdateLv) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Exp))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	return n
}

func (m *GS_PlayerUpdateAtkPwr) Size() (n int) {
	var l int
	_ = l
	if m.AtkPwr != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.AtkPwr))
	}
	return n
}

func (m *GS_PlayerUpdateHFrame) Size() (n int) {
	var l int
	_ = l
	if m.One != nil {
		l = m.One.Size()
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	return n
}

func (m *C_PlayerChangeName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	return n
}

func (m *GS_PlayerChangeName_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ErrorCode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	return n
}

func (m *C_PlayerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	if m.SvrId != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.SvrId))
	}
	if m.TeamType != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.TeamType))
	}
	return n
}

func (m *GS_PlayerInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ErrorCode))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	if m.GuildIcon != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.GuildIcon))
	}
	if len(m.DfdTeamInfo) > 0 {
		for k, v := range m.DfdTeamInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCGs_11Plr(uint64(l))
			}
			mapEntrySize := 1 + sovCGs_11Plr(uint64(k)) + l
			n += mapEntrySize + 1 + sovCGs_11Plr(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_PlayerHFrameAdd) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Id))
	}
	return n
}

func (m *GS_PlayerHFrameAdd_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Id))
	}
	return n
}

func (m *C_PlayerHFrameSet) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Id))
	}
	return n
}

func (m *GS_PlayerHFrameSet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.Id))
	}
	return n
}

func (m *C_PlayerHeadSet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovCGs_11Plr(uint64(l))
	}
	return n
}

func (m *GS_PlayerHeadSet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_11Plr(uint64(m.ErrorCode))
	}
	return n
}

func sovCGs_11Plr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_11Plr(x uint64) (n int) {
	return sovCGs_11Plr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HFrameStoreData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HFrameStoreData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HFrameStoreData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HFrames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HFrames = append(m.HFrames, &HFrameStoreOne{})
			if err := m.HFrames[len(m.HFrames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HFrameStoreOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HFrameStoreOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HFrameStoreOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTs", wireType)
			}
			m.ExpireTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerUpdateLv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerUpdateLv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerUpdateLv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerUpdateAtkPwr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerUpdateAtkPwr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerUpdateAtkPwr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkPwr", wireType)
			}
			m.AtkPwr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtkPwr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerUpdateHFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerUpdateHFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerUpdateHFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field One", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.One == nil {
				m.One = &HFrameStoreOne{}
			}
			if err := m.One.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PlayerChangeName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PlayerChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PlayerChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerChangeName_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerChangeName_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerChangeName_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrId", wireType)
			}
			m.SvrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PlayerSimpleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildIcon", wireType)
			}
			m.GuildIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildIcon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DfdTeamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DfdTeamInfo == nil {
				m.DfdTeamInfo = make(map[int32]*HeroDetail)
			}
			var mapkey int32
			var mapvalue *HeroDetail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_11Plr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_11Plr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_11Plr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_11Plr
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_11Plr
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HeroDetail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_11Plr
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DfdTeamInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PlayerHFrameAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PlayerHFrameAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PlayerHFrameAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerHFrameAdd_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerHFrameAdd_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerHFrameAdd_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PlayerHFrameSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PlayerHFrameSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PlayerHFrameSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerHFrameSet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerHFrameSet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerHFrameSet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_PlayerHeadSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_PlayerHeadSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_PlayerHeadSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_PlayerHeadSet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_PlayerHeadSet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_PlayerHeadSet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_11Plr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_11Plr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_11Plr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_11Plr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_11Plr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_11Plr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_11Plr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_11Plr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_11Plr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_11Plr   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.11.plr.proto", fileDescriptorCGs_11Plr) }

var fileDescriptorCGs_11Plr = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x51, 0x8f, 0xd2, 0x40,
	0x10, 0xbe, 0xb6, 0xf4, 0x4e, 0x86, 0xcb, 0x71, 0xb7, 0x82, 0x69, 0x88, 0x21, 0xa4, 0x06, 0x83,
	0x0f, 0xd6, 0x3b, 0x7c, 0x31, 0xc6, 0x18, 0x4f, 0x40, 0x6c, 0x72, 0x11, 0xb2, 0x45, 0x5f, 0x49,
	0xa5, 0x7b, 0x95, 0x5c, 0x69, 0x9b, 0xed, 0xc2, 0x1d, 0xff, 0xc2, 0x9f, 0x75, 0xf1, 0xc9, 0x9f,
	0xa0, 0xf8, 0x47, 0xcc, 0xee, 0xb6, 0x05, 0xb9, 0x18, 0xf4, 0x89, 0x99, 0x6f, 0xbe, 0x99, 0x6f,
	0x66, 0x76, 0x28, 0x9c, 0x4c, 0xc6, 0x7e, 0x62, 0x9d, 0x9d, 0x59, 0x71, 0x40, 0xad, 0x98, 0x46,
	0x2c, 0x42, 0xda, 0x2c, 0xf1, 0x6b, 0xe0, 0x47, 0x7e, 0x24, 0x81, 0x5a, 0x55, 0x70, 0x4e, 0x4f,
	0xad, 0x84, 0xd1, 0xf9, 0x84, 0x25, 0x12, 0x36, 0xdf, 0x40, 0xf9, 0xfd, 0x3b, 0xea, 0xce, 0x88,
	0xc3, 0x22, 0x4a, 0xba, 0x2e, 0x73, 0xd1, 0x53, 0x38, 0x90, 0x50, 0x62, 0x28, 0x0d, 0xad, 0x55,
	0x6a, 0xdf, 0xb7, 0x66, 0x89, 0x6f, 0x6d, 0xd0, 0x06, 0x21, 0xc1, 0x19, 0xc7, 0x7c, 0x05, 0x47,
	0x7f, 0x86, 0xd0, 0x11, 0xa8, 0xb6, 0x67, 0x28, 0x0d, 0xa5, 0xa5, 0x63, 0xd5, 0xf6, 0x50, 0x0d,
	0xee, 0xf5, 0x6e, 0xe2, 0x29, 0x25, 0xa3, 0xc4, 0x50, 0x1b, 0x4a, 0x4b, 0xc3, 0xb9, 0x6f, 0x4e,
	0xe0, 0xa4, 0xef, 0x8c, 0x87, 0x81, 0xbb, 0x24, 0xf4, 0x63, 0xec, 0xb9, 0x8c, 0x5c, 0x2c, 0x50,
	0x05, 0xf4, 0x0b, 0xb2, 0x20, 0x41, 0x5a, 0x43, 0x3a, 0xe8, 0x18, 0xb4, 0xde, 0x4d, 0x2c, 0x2a,
	0xe8, 0x98, 0x9b, 0xe8, 0x31, 0x1c, 0x60, 0x72, 0xed, 0x52, 0x2f, 0x31, 0xb4, 0x86, 0xd2, 0x2a,
	0xb5, 0x0f, 0x45, 0xa7, 0x29, 0x86, 0xb3, 0xa0, 0xf9, 0x0c, 0xaa, 0x5b, 0x22, 0xe7, 0xec, 0x6a,
	0x78, 0x4d, 0xd1, 0x03, 0xd8, 0x97, 0x56, 0xaa, 0x94, 0x7a, 0xe6, 0xeb, 0x3b, 0x09, 0x72, 0x44,
	0xd4, 0x04, 0x6d, 0x10, 0x12, 0xc1, 0xfe, 0xcb, 0x5e, 0x78, 0xdc, 0x6c, 0x01, 0xea, 0xa4, 0xe9,
	0x9d, 0x2f, 0x6e, 0xe8, 0x93, 0x0f, 0x3c, 0x19, 0x41, 0x81, 0xff, 0x8a, 0xec, 0x22, 0x16, 0xb6,
	0x69, 0x6f, 0x28, 0xad, 0xa9, 0x63, 0x8c, 0x1e, 0x42, 0xb1, 0x47, 0x69, 0x44, 0x3b, 0x91, 0x47,
	0xd2, 0xee, 0xd6, 0x40, 0x5e, 0x4a, 0xdd, 0x28, 0xf5, 0x09, 0x0e, 0x33, 0x51, 0x3b, 0xbc, 0x8c,
	0xf8, 0x16, 0x87, 0x01, 0x4d, 0x5f, 0xa2, 0x88, 0xa5, 0xc3, 0x51, 0x67, 0xc1, 0x51, 0xb9, 0x47,
	0xe9, 0xf0, 0x27, 0x1a, 0x11, 0x77, 0x36, 0x5a, 0xc6, 0x44, 0xac, 0x52, 0xc7, 0xb9, 0x6f, 0x7e,
	0x53, 0xa1, 0x9c, 0xf7, 0xc8, 0x2b, 0xef, 0xec, 0xee, 0x09, 0x14, 0x38, 0x4f, 0x48, 0x94, 0xda,
	0x55, 0xb1, 0x26, 0x99, 0xee, 0x4c, 0x67, 0x71, 0x40, 0x78, 0x10, 0x0b, 0x0a, 0x32, 0xe0, 0xa0,
	0x3f, 0x9f, 0x06, 0x9e, 0xed, 0x09, 0xdd, 0x22, 0xce, 0x5c, 0x2e, 0x21, 0x4c, 0x31, 0x67, 0x41,
	0xc4, 0xd6, 0x40, 0x1e, 0xb5, 0x27, 0x51, 0x68, 0xe8, 0xb2, 0x81, 0x1c, 0x40, 0x7d, 0x28, 0x75,
	0x2f, 0x3d, 0x3e, 0x81, 0xe8, 0x63, 0x5f, 0x9c, 0x71, 0x53, 0xf4, 0xb1, 0x35, 0x89, 0xb5, 0xc1,
	0xeb, 0x85, 0x8c, 0x2e, 0xf1, 0x66, 0x66, 0x6d, 0x00, 0xc7, 0xdb, 0x04, 0x7e, 0x87, 0x57, 0x64,
	0x99, 0x4e, 0xcd, 0x4d, 0xd4, 0x04, 0x7d, 0xe1, 0x06, 0x73, 0x92, 0x0e, 0x5c, 0x96, 0x77, 0x41,
	0x68, 0xd4, 0x25, 0xcc, 0x9d, 0x06, 0x58, 0x46, 0x5f, 0xaa, 0x2f, 0x14, 0xf3, 0x11, 0x9c, 0x64,
	0x8f, 0x24, 0x0f, 0xe7, 0xdc, 0xf3, 0xb6, 0xff, 0x30, 0x66, 0x17, 0x2a, 0x79, 0x9b, 0x39, 0x6b,
	0xe7, 0xd6, 0x65, 0x15, 0x35, 0xaf, 0x72, 0x47, 0xca, 0x21, 0xec, 0x1f, 0xa4, 0x1c, 0xc2, 0xfe,
	0x5b, 0xaa, 0x09, 0xe5, 0x5c, 0x8a, 0xb8, 0x1e, 0x17, 0x42, 0x50, 0xe0, 0x66, 0x76, 0xec, 0xdc,
	0x36, 0xdb, 0x80, 0xd6, 0x62, 0x92, 0xb7, 0x4b, 0xea, 0x6d, 0xe5, 0xf6, 0x67, 0x7d, 0xef, 0x76,
	0x55, 0x57, 0xbe, 0xaf, 0xea, 0xca, 0x8f, 0x55, 0x5d, 0xf9, 0xfa, 0xab, 0xbe, 0xf7, 0x79, 0x5f,
	0x7c, 0xbd, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xf8, 0x41, 0xbd, 0xfa, 0x04, 0x00,
	0x00,
}
