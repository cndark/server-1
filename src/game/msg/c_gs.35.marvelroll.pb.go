// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.35.marvelroll.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 奇迹之盘
type MarvelRollData struct {
	Groups []*MarvelRollGroup `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *MarvelRollData) Reset()                    { *m = MarvelRollData{} }
func (m *MarvelRollData) String() string            { return proto.CompactTextString(m) }
func (*MarvelRollData) ProtoMessage()               {}
func (*MarvelRollData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_35Marvelroll, []int{0} }

type MarvelRollGroup struct {
	Grp       string             `protobuf:"bytes,1,opt,name=Grp,proto3" json:"Grp,omitempty"`
	IsEnforce bool               `protobuf:"varint,2,opt,name=IsEnforce,proto3" json:"IsEnforce,omitempty"`
	IsFree    bool               `protobuf:"varint,3,opt,name=IsFree,proto3" json:"IsFree,omitempty"`
	Blanks    []*MarvelRollBlank `protobuf:"bytes,4,rep,name=Blanks" json:"Blanks,omitempty"`
}

func (m *MarvelRollGroup) Reset()                    { *m = MarvelRollGroup{} }
func (m *MarvelRollGroup) String() string            { return proto.CompactTextString(m) }
func (*MarvelRollGroup) ProtoMessage()               {}
func (*MarvelRollGroup) Descriptor() ([]byte, []int) { return fileDescriptorCGs_35Marvelroll, []int{1} }

type MarvelRollBlank struct {
	Id      int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AttainN int32 `protobuf:"varint,2,opt,name=AttainN,proto3" json:"AttainN,omitempty"`
}

func (m *MarvelRollBlank) Reset()                    { *m = MarvelRollBlank{} }
func (m *MarvelRollBlank) String() string            { return proto.CompactTextString(m) }
func (*MarvelRollBlank) ProtoMessage()               {}
func (*MarvelRollBlank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_35Marvelroll, []int{2} }

type C_MarvelRollInfo struct {
	Grp string `protobuf:"bytes,1,opt,name=Grp,proto3" json:"Grp,omitempty"`
}

func (m *C_MarvelRollInfo) Reset()                    { *m = C_MarvelRollInfo{} }
func (m *C_MarvelRollInfo) String() string            { return proto.CompactTextString(m) }
func (*C_MarvelRollInfo) ProtoMessage()               {}
func (*C_MarvelRollInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_35Marvelroll, []int{3} }

type GS_MarvelRollInfo_R struct {
	ErrorCode int32            `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Group     *MarvelRollGroup `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
}

func (m *GS_MarvelRollInfo_R) Reset()         { *m = GS_MarvelRollInfo_R{} }
func (m *GS_MarvelRollInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_MarvelRollInfo_R) ProtoMessage()    {}
func (*GS_MarvelRollInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_35Marvelroll, []int{4}
}

type C_MarvelRollRefresh struct {
	Grp string `protobuf:"bytes,1,opt,name=Grp,proto3" json:"Grp,omitempty"`
}

func (m *C_MarvelRollRefresh) Reset()         { *m = C_MarvelRollRefresh{} }
func (m *C_MarvelRollRefresh) String() string { return proto.CompactTextString(m) }
func (*C_MarvelRollRefresh) ProtoMessage()    {}
func (*C_MarvelRollRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_35Marvelroll, []int{5}
}

type GS_MarvelRollRefresh_R struct {
	ErrorCode int32            `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Group     *MarvelRollGroup `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
}

func (m *GS_MarvelRollRefresh_R) Reset()         { *m = GS_MarvelRollRefresh_R{} }
func (m *GS_MarvelRollRefresh_R) String() string { return proto.CompactTextString(m) }
func (*GS_MarvelRollRefresh_R) ProtoMessage()    {}
func (*GS_MarvelRollRefresh_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_35Marvelroll, []int{6}
}

type C_MarvelRollTake struct {
	Grp   string `protobuf:"bytes,1,opt,name=Grp,proto3" json:"Grp,omitempty"`
	IsTen bool   `protobuf:"varint,2,opt,name=IsTen,proto3" json:"IsTen,omitempty"`
}

func (m *C_MarvelRollTake) Reset()                    { *m = C_MarvelRollTake{} }
func (m *C_MarvelRollTake) String() string            { return proto.CompactTextString(m) }
func (*C_MarvelRollTake) ProtoMessage()               {}
func (*C_MarvelRollTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_35Marvelroll, []int{7} }

type GS_MarvelRollTake_R struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Grp       string  `protobuf:"bytes,2,opt,name=Grp,proto3" json:"Grp,omitempty"`
	Ids       []int32 `protobuf:"varint,3,rep,packed,name=Ids" json:"Ids,omitempty"`
}

func (m *GS_MarvelRollTake_R) Reset()         { *m = GS_MarvelRollTake_R{} }
func (m *GS_MarvelRollTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_MarvelRollTake_R) ProtoMessage()    {}
func (*GS_MarvelRollTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_35Marvelroll, []int{8}
}

func init() {
	proto.RegisterType((*MarvelRollData)(nil), "msg.MarvelRollData")
	proto.RegisterType((*MarvelRollGroup)(nil), "msg.MarvelRollGroup")
	proto.RegisterType((*MarvelRollBlank)(nil), "msg.MarvelRollBlank")
	proto.RegisterType((*C_MarvelRollInfo)(nil), "msg.C_MarvelRollInfo")
	proto.RegisterType((*GS_MarvelRollInfo_R)(nil), "msg.GS_MarvelRollInfo_R")
	proto.RegisterType((*C_MarvelRollRefresh)(nil), "msg.C_MarvelRollRefresh")
	proto.RegisterType((*GS_MarvelRollRefresh_R)(nil), "msg.GS_MarvelRollRefresh_R")
	proto.RegisterType((*C_MarvelRollTake)(nil), "msg.C_MarvelRollTake")
	proto.RegisterType((*GS_MarvelRollTake_R)(nil), "msg.GS_MarvelRollTake_R")
}
func (m *MarvelRollData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarvelRollData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MarvelRollGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarvelRollGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Grp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(len(m.Grp)))
		i += copy(dAtA[i:], m.Grp)
	}
	if m.IsEnforce {
		dAtA[i] = 0x10
		i++
		if m.IsEnforce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsFree {
		dAtA[i] = 0x18
		i++
		if m.IsFree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Blanks) > 0 {
		for _, msg := range m.Blanks {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MarvelRollBlank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarvelRollBlank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.Id))
	}
	if m.AttainN != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.AttainN))
	}
	return i, nil
}

func (m *C_MarvelRollInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MarvelRollInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Grp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(len(m.Grp)))
		i += copy(dAtA[i:], m.Grp)
	}
	return i, nil
}

func (m *GS_MarvelRollInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MarvelRollInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.Group.Size()))
		n1, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_MarvelRollRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MarvelRollRefresh) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Grp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(len(m.Grp)))
		i += copy(dAtA[i:], m.Grp)
	}
	return i, nil
}

func (m *GS_MarvelRollRefresh_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MarvelRollRefresh_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.Group.Size()))
		n2, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C_MarvelRollTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MarvelRollTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Grp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(len(m.Grp)))
		i += copy(dAtA[i:], m.Grp)
	}
	if m.IsTen {
		dAtA[i] = 0x10
		i++
		if m.IsTen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_MarvelRollTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MarvelRollTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Grp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(len(m.Grp)))
		i += copy(dAtA[i:], m.Grp)
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_35Marvelroll(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func encodeVarintCGs_35Marvelroll(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MarvelRollData) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCGs_35Marvelroll(uint64(l))
		}
	}
	return n
}

func (m *MarvelRollGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Grp)
	if l > 0 {
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	if m.IsEnforce {
		n += 2
	}
	if m.IsFree {
		n += 2
	}
	if len(m.Blanks) > 0 {
		for _, e := range m.Blanks {
			l = e.Size()
			n += 1 + l + sovCGs_35Marvelroll(uint64(l))
		}
	}
	return n
}

func (m *MarvelRollBlank) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_35Marvelroll(uint64(m.Id))
	}
	if m.AttainN != 0 {
		n += 1 + sovCGs_35Marvelroll(uint64(m.AttainN))
	}
	return n
}

func (m *C_MarvelRollInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Grp)
	if l > 0 {
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	return n
}

func (m *GS_MarvelRollInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_35Marvelroll(uint64(m.ErrorCode))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	return n
}

func (m *C_MarvelRollRefresh) Size() (n int) {
	var l int
	_ = l
	l = len(m.Grp)
	if l > 0 {
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	return n
}

func (m *GS_MarvelRollRefresh_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_35Marvelroll(uint64(m.ErrorCode))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	return n
}

func (m *C_MarvelRollTake) Size() (n int) {
	var l int
	_ = l
	l = len(m.Grp)
	if l > 0 {
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	if m.IsTen {
		n += 2
	}
	return n
}

func (m *GS_MarvelRollTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_35Marvelroll(uint64(m.ErrorCode))
	}
	l = len(m.Grp)
	if l > 0 {
		n += 1 + l + sovCGs_35Marvelroll(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCGs_35Marvelroll(uint64(e))
		}
		n += 1 + sovCGs_35Marvelroll(uint64(l)) + l
	}
	return n
}

func sovCGs_35Marvelroll(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_35Marvelroll(x uint64) (n int) {
	return sovCGs_35Marvelroll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarvelRollData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarvelRollData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarvelRollData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &MarvelRollGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarvelRollGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarvelRollGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarvelRollGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnforce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnforce = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFree = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blanks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blanks = append(m.Blanks, &MarvelRollBlank{})
			if err := m.Blanks[len(m.Blanks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarvelRollBlank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarvelRollBlank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarvelRollBlank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttainN", wireType)
			}
			m.AttainN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttainN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MarvelRollInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MarvelRollInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MarvelRollInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MarvelRollInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MarvelRollInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MarvelRollInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &MarvelRollGroup{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MarvelRollRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MarvelRollRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MarvelRollRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MarvelRollRefresh_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MarvelRollRefresh_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MarvelRollRefresh_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &MarvelRollGroup{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MarvelRollTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MarvelRollTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MarvelRollTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MarvelRollTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MarvelRollTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MarvelRollTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_35Marvelroll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_35Marvelroll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_35Marvelroll
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_35Marvelroll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_35Marvelroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_35Marvelroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_35Marvelroll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_35Marvelroll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_35Marvelroll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_35Marvelroll
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_35Marvelroll
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_35Marvelroll(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_35Marvelroll = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_35Marvelroll   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.35.marvelroll.proto", fileDescriptorCGs_35Marvelroll) }

var fileDescriptorCGs_35Marvelroll = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x6a, 0xdb, 0x30,
	0x18, 0xc7, 0x23, 0x7b, 0xce, 0x96, 0x6f, 0x90, 0x05, 0x25, 0x0b, 0x22, 0x0c, 0x63, 0xcc, 0x60,
	0x66, 0x0c, 0x13, 0x16, 0x76, 0xd9, 0x60, 0xd0, 0xa4, 0x69, 0xf0, 0xa1, 0x3d, 0xa8, 0x81, 0x1e,
	0x8d, 0x13, 0x2b, 0x6e, 0x89, 0x63, 0x05, 0xc9, 0xe9, 0x2b, 0xf4, 0xda, 0xc7, 0xca, 0xb1, 0x8f,
	0xd0, 0xa6, 0x2f, 0x52, 0x2c, 0xbb, 0x38, 0x49, 0x53, 0x7a, 0xe9, 0x4d, 0xdf, 0xff, 0xfb, 0x7f,
	0xd2, 0x4f, 0x7f, 0x09, 0xc8, 0xd4, 0x8f, 0xa4, 0xdb, 0xfb, 0xe3, 0x2e, 0x02, 0x71, 0xcd, 0x62,
	0xc1, 0xe3, 0xd8, 0x5d, 0x0a, 0x9e, 0x72, 0xac, 0x2f, 0x64, 0xd4, 0x81, 0x88, 0x47, 0x3c, 0x17,
	0x3a, 0x5f, 0x95, 0xb5, 0xdb, 0x75, 0x65, 0x2a, 0x56, 0xd3, 0x54, 0xe6, 0xb2, 0xfd, 0x1f, 0xea,
	0xa7, 0x6a, 0x96, 0xf2, 0x38, 0x3e, 0x0e, 0xd2, 0x00, 0xff, 0x82, 0xea, 0x48, 0xf0, 0xd5, 0x52,
	0x12, 0x64, 0xe9, 0xce, 0xe7, 0xdf, 0x2d, 0x77, 0x21, 0x23, 0xb7, 0x34, 0xa9, 0x26, 0x2d, 0x3c,
	0xf6, 0x0d, 0x82, 0x2f, 0x7b, 0x3d, 0xdc, 0x00, 0x7d, 0x24, 0x96, 0x04, 0x59, 0xc8, 0xa9, 0xd1,
	0x6c, 0x89, 0xbf, 0x41, 0xcd, 0x93, 0xc3, 0x64, 0xc6, 0xc5, 0x94, 0x11, 0xcd, 0x42, 0xce, 0x27,
	0x5a, 0x0a, 0xb8, 0x0d, 0x55, 0x4f, 0x9e, 0x08, 0xc6, 0x88, 0xae, 0x5a, 0x45, 0x95, 0x91, 0xf4,
	0xe3, 0x20, 0x99, 0x4b, 0xf2, 0xe1, 0x20, 0x89, 0x6a, 0xd2, 0xc2, 0x63, 0xff, 0xdb, 0x06, 0x51,
	0x1a, 0xae, 0x83, 0xe6, 0x85, 0x8a, 0xc3, 0xa0, 0x9a, 0x17, 0x62, 0x02, 0x1f, 0x8f, 0xd2, 0x34,
	0xb8, 0x4a, 0xce, 0x14, 0x84, 0x41, 0x9f, 0x4b, 0xfb, 0x3b, 0x34, 0x06, 0x7e, 0x39, 0xee, 0x25,
	0x33, 0xfe, 0xf2, 0x1a, 0xb6, 0x0f, 0xcd, 0xd1, 0xf9, 0x9e, 0xcd, 0xa7, 0xd9, 0xed, 0x86, 0x42,
	0x70, 0x31, 0xe0, 0x21, 0x2b, 0x4e, 0x2b, 0x05, 0xfc, 0x13, 0x0c, 0x15, 0x8b, 0x3a, 0xf2, 0xb5,
	0x38, 0x73, 0x8b, 0xfd, 0x03, 0x9a, 0xdb, 0x18, 0x94, 0xcd, 0x04, 0x93, 0x97, 0x07, 0x48, 0x26,
	0xd0, 0xde, 0x21, 0x29, 0x9c, 0xef, 0x0a, 0xf3, 0x77, 0x37, 0x93, 0x71, 0x30, 0x67, 0x07, 0x9e,
	0xb6, 0x05, 0x86, 0x27, 0xc7, 0x2c, 0x29, 0x9e, 0x35, 0x2f, 0xec, 0x8b, 0xbd, 0xa4, 0xb2, 0xe1,
	0x37, 0xe1, 0x8a, 0xcd, 0xb5, 0x72, 0xf3, 0x06, 0xe8, 0x5e, 0x28, 0x89, 0x6e, 0xe9, 0x8e, 0x41,
	0xb3, 0x65, 0xbf, 0xb5, 0x7e, 0x30, 0x2b, 0xeb, 0x8d, 0x89, 0xee, 0x36, 0x26, 0xba, 0xdf, 0x98,
	0xe8, 0xf6, 0xd1, 0xac, 0x4c, 0xaa, 0xea, 0x33, 0xf7, 0x9e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe4,
	0xb1, 0x95, 0xf0, 0x10, 0x03, 0x00, 0x00,
}
