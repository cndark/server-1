// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.46.signdaily.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ============================================================================
// 每日签到
type SignDailyData struct {
	CanDays int32 `protobuf:"varint,1,opt,name=CanDays,proto3" json:"CanDays,omitempty"`
	Day     int32 `protobuf:"varint,2,opt,name=Day,proto3" json:"Day,omitempty"`
	Round   int32 `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (m *SignDailyData) Reset()                    { *m = SignDailyData{} }
func (m *SignDailyData) String() string            { return proto.CompactTextString(m) }
func (*SignDailyData) ProtoMessage()               {}
func (*SignDailyData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_46Signdaily, []int{0} }

type C_SignDailySign struct {
}

func (m *C_SignDailySign) Reset()                    { *m = C_SignDailySign{} }
func (m *C_SignDailySign) String() string            { return proto.CompactTextString(m) }
func (*C_SignDailySign) ProtoMessage()               {}
func (*C_SignDailySign) Descriptor() ([]byte, []int) { return fileDescriptorCGs_46Signdaily, []int{1} }

type GS_SignDailySign_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_SignDailySign_R) Reset()         { *m = GS_SignDailySign_R{} }
func (m *GS_SignDailySign_R) String() string { return proto.CompactTextString(m) }
func (*GS_SignDailySign_R) ProtoMessage()    {}
func (*GS_SignDailySign_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_46Signdaily, []int{2}
}

func init() {
	proto.RegisterType((*SignDailyData)(nil), "msg.SignDailyData")
	proto.RegisterType((*C_SignDailySign)(nil), "msg.C_SignDailySign")
	proto.RegisterType((*GS_SignDailySign_R)(nil), "msg.GS_SignDailySign_R")
}
func (m *SignDailyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignDailyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanDays != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_46Signdaily(dAtA, i, uint64(m.CanDays))
	}
	if m.Day != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_46Signdaily(dAtA, i, uint64(m.Day))
	}
	if m.Round != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_46Signdaily(dAtA, i, uint64(m.Round))
	}
	return i, nil
}

func (m *C_SignDailySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_SignDailySign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_SignDailySign_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_SignDailySign_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_46Signdaily(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_46Signdaily(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintCGs_46Signdaily(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignDailyData) Size() (n int) {
	var l int
	_ = l
	if m.CanDays != 0 {
		n += 1 + sovCGs_46Signdaily(uint64(m.CanDays))
	}
	if m.Day != 0 {
		n += 1 + sovCGs_46Signdaily(uint64(m.Day))
	}
	if m.Round != 0 {
		n += 1 + sovCGs_46Signdaily(uint64(m.Round))
	}
	return n
}

func (m *C_SignDailySign) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_SignDailySign_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_46Signdaily(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_46Signdaily(uint64(l))
	}
	return n
}

func sovCGs_46Signdaily(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_46Signdaily(x uint64) (n int) {
	return sovCGs_46Signdaily(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignDailyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_46Signdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignDailyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignDailyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDays", wireType)
			}
			m.CanDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_46Signdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_46Signdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_SignDailySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_46Signdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_SignDailySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_SignDailySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_46Signdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_46Signdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_SignDailySign_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_46Signdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_SignDailySign_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_SignDailySign_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_46Signdaily
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_46Signdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_46Signdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_46Signdaily(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_46Signdaily
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_46Signdaily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_46Signdaily
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_46Signdaily
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_46Signdaily(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_46Signdaily = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_46Signdaily   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.46.signdaily.proto", fileDescriptorCGs_46Signdaily) }

var fileDescriptorCGs_46Signdaily = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0x31, 0xd3, 0x2b, 0xce, 0x4c, 0xcf, 0x4b, 0x49, 0xcc, 0xcc, 0xa9, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08,
	0x48, 0x89, 0x82, 0x55, 0x1a, 0x18, 0xe8, 0x15, 0x97, 0x14, 0x95, 0x26, 0x97, 0x14, 0x43, 0x84,
	0x95, 0x02, 0xb9, 0x78, 0x83, 0x33, 0xd3, 0xf3, 0x5c, 0x40, 0x5a, 0x5d, 0x12, 0x4b, 0x12, 0x85,
	0x24, 0xb8, 0xd8, 0x9d, 0x13, 0xf3, 0x5c, 0x12, 0x2b, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58,
	0x83, 0x60, 0x5c, 0x21, 0x01, 0x2e, 0x66, 0x97, 0xc4, 0x4a, 0x09, 0x26, 0xb0, 0x28, 0x88, 0x29,
	0x24, 0xc2, 0xc5, 0x1a, 0x94, 0x5f, 0x9a, 0x97, 0x22, 0xc1, 0x0c, 0x16, 0x83, 0x70, 0x94, 0x04,
	0xb9, 0xf8, 0x9d, 0xe3, 0xe1, 0x86, 0x82, 0x18, 0x4a, 0x51, 0x5c, 0x42, 0xee, 0xc1, 0xa8, 0x62,
	0xf1, 0x41, 0x42, 0x32, 0x5c, 0x9c, 0xae, 0x45, 0x45, 0xf9, 0x45, 0xce, 0xf9, 0x29, 0xa9, 0x50,
	0xcb, 0x10, 0x02, 0x42, 0x6a, 0x5c, 0xec, 0x41, 0xa9, 0xe5, 0x89, 0x45, 0x29, 0xc5, 0x60, 0x2b,
	0xb9, 0x8d, 0x78, 0xf4, 0x72, 0x8b, 0xd3, 0xf5, 0xa0, 0x62, 0x41, 0x30, 0x49, 0x27, 0x91, 0x13,
	0x0f, 0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x09, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xde, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x26,
	0x31, 0x8b, 0x60, 0x21, 0x01, 0x00, 0x00,
}
