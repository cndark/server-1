// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.24.rank.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RankRow struct {
	Score   float64      `protobuf:"fixed64,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Info    *RankRowInfo `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
	BeLiked int32        `protobuf:"varint,3,opt,name=BeLiked,proto3" json:"BeLiked,omitempty"`
}

func (m *RankRow) Reset()                    { *m = RankRow{} }
func (m *RankRow) String() string            { return proto.CompactTextString(m) }
func (*RankRow) ProtoMessage()               {}
func (*RankRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{0} }

type RankRowInfo struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Gld *GuildRow         `protobuf:"bytes,2,opt,name=Gld" json:"Gld,omitempty"`
}

func (m *RankRowInfo) Reset()                    { *m = RankRowInfo{} }
func (m *RankRowInfo) String() string            { return proto.CompactTextString(m) }
func (*RankRowInfo) ProtoMessage()               {}
func (*RankRowInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{1} }

type RankPlayData struct {
}

func (m *RankPlayData) Reset()                    { *m = RankPlayData{} }
func (m *RankPlayData) String() string            { return proto.CompactTextString(m) }
func (*RankPlayData) ProtoMessage()               {}
func (*RankPlayData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{2} }

// 获取榜单数据
type C_RankGet struct {
	Type int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	SgId int32 `protobuf:"varint,2,opt,name=SgId,proto3" json:"SgId,omitempty"`
	RkId int32 `protobuf:"varint,3,opt,name=RkId,proto3" json:"RkId,omitempty"`
}

func (m *C_RankGet) Reset()                    { *m = C_RankGet{} }
func (m *C_RankGet) String() string            { return proto.CompactTextString(m) }
func (*C_RankGet) ProtoMessage()               {}
func (*C_RankGet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{3} }

type GS_RankGet_R struct {
	Rows []*RankRow `protobuf:"bytes,1,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_RankGet_R) Reset()                    { *m = GS_RankGet_R{} }
func (m *GS_RankGet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RankGet_R) ProtoMessage()               {}
func (*GS_RankGet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{4} }

// 榜单点赞
type C_RankLike struct {
	RkId  int32  `protobuf:"varint,1,opt,name=RkId,proto3" json:"RkId,omitempty"`
	PlrId string `protobuf:"bytes,2,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *C_RankLike) Reset()                    { *m = C_RankLike{} }
func (m *C_RankLike) String() string            { return proto.CompactTextString(m) }
func (*C_RankLike) ProtoMessage()               {}
func (*C_RankLike) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{5} }

type GS_RankLike_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_RankLike_R) Reset()                    { *m = GS_RankLike_R{} }
func (m *GS_RankLike_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RankLike_R) ProtoMessage()               {}
func (*GS_RankLike_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_24Rank, []int{6} }

func init() {
	proto.RegisterType((*RankRow)(nil), "msg.RankRow")
	proto.RegisterType((*RankRowInfo)(nil), "msg.RankRowInfo")
	proto.RegisterType((*RankPlayData)(nil), "msg.RankPlayData")
	proto.RegisterType((*C_RankGet)(nil), "msg.C_RankGet")
	proto.RegisterType((*GS_RankGet_R)(nil), "msg.GS_RankGet_R")
	proto.RegisterType((*C_RankLike)(nil), "msg.C_RankLike")
	proto.RegisterType((*GS_RankLike_R)(nil), "msg.GS_RankLike_R")
}
func (m *RankRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BeLiked != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.BeLiked))
	}
	return i, nil
}

func (m *RankRowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankRowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.Plr.Size()))
		n2, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Gld != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.Gld.Size()))
		n3, err := m.Gld.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RankPlayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankPlayData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *C_RankGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RankGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.Type))
	}
	if m.SgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.SgId))
	}
	if m.RkId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.RkId))
	}
	return i, nil
}

func (m *GS_RankGet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RankGet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_24Rank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_RankLike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RankLike) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RkId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.RkId))
	}
	if len(m.PlrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_RankLike_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RankLike_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_24Rank(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintCGs_24Rank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RankRow) Size() (n int) {
	var l int
	_ = l
	if m.Score != 0 {
		n += 9
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_24Rank(uint64(l))
	}
	if m.BeLiked != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.BeLiked))
	}
	return n
}

func (m *RankRowInfo) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_24Rank(uint64(l))
	}
	if m.Gld != nil {
		l = m.Gld.Size()
		n += 1 + l + sovCGs_24Rank(uint64(l))
	}
	return n
}

func (m *RankPlayData) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *C_RankGet) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.Type))
	}
	if m.SgId != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.SgId))
	}
	if m.RkId != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.RkId))
	}
	return n
}

func (m *GS_RankGet_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_24Rank(uint64(l))
		}
	}
	return n
}

func (m *C_RankLike) Size() (n int) {
	var l int
	_ = l
	if m.RkId != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.RkId))
	}
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_24Rank(uint64(l))
	}
	return n
}

func (m *GS_RankLike_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_24Rank(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_24Rank(uint64(l))
	}
	return n
}

func sovCGs_24Rank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_24Rank(x uint64) (n int) {
	return sovCGs_24Rank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &RankRowInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeLiked", wireType)
			}
			m.BeLiked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeLiked |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankRowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankRowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankRowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gld", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gld == nil {
				m.Gld = &GuildRow{}
			}
			if err := m.Gld.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankPlayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankPlayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankPlayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RankGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RankGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RankGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgId", wireType)
			}
			m.SgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RkId", wireType)
			}
			m.RkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RkId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RankGet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RankGet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RankGet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &RankRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RankLike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RankLike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RankLike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RkId", wireType)
			}
			m.RkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RkId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RankLike_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RankLike_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RankLike_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_24Rank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_24Rank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_24Rank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_24Rank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_24Rank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_24Rank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_24Rank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_24Rank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_24Rank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_24Rank   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.24.rank.proto", fileDescriptorCGs_24Rank) }

var fileDescriptorCGs_24Rank = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xe1, 0x8a, 0x9b, 0x40,
	0x10, 0xc7, 0xb3, 0x35, 0x36, 0x64, 0x4c, 0x4a, 0xd9, 0x26, 0x20, 0xa1, 0x58, 0x91, 0xd2, 0xfa,
	0x49, 0xc4, 0x96, 0x3e, 0x40, 0xd2, 0x22, 0x81, 0x7e, 0x08, 0xe3, 0x1d, 0xf7, 0x51, 0xbc, 0xe8,
	0x49, 0xd0, 0x64, 0xc3, 0x6a, 0x90, 0xbc, 0xc5, 0x3d, 0x56, 0x3e, 0xde, 0x23, 0xdc, 0xe5, 0x5e,
	0xe4, 0xd8, 0x5d, 0xbd, 0xe4, 0xdb, 0xcc, 0x6f, 0x66, 0xfe, 0xff, 0xd9, 0x59, 0xa0, 0xeb, 0x38,
	0xaf, 0xbc, 0xe0, 0xb7, 0xc7, 0x93, 0x5d, 0xe1, 0xed, 0x39, 0xab, 0x19, 0xd5, 0xb6, 0x55, 0x3e,
	0x83, 0x9c, 0xe5, 0x4c, 0x81, 0xd9, 0x54, 0x36, 0xf9, 0xbe, 0x57, 0xd5, 0xfc, 0xb0, 0xae, 0xab,
	0x16, 0x7f, 0x51, 0xb3, 0xbe, 0x97, 0x1f, 0x36, 0x65, 0xaa, 0xa0, 0x13, 0xc3, 0x00, 0x93, 0x5d,
	0x81, 0xac, 0xa1, 0x13, 0xd0, 0xa3, 0x35, 0xe3, 0x99, 0x49, 0x6c, 0xe2, 0x12, 0x54, 0x09, 0xfd,
	0x0e, 0xfd, 0xe5, 0xee, 0x81, 0x99, 0x1f, 0x6c, 0xe2, 0x1a, 0xc1, 0x67, 0x6f, 0x5b, 0xe5, 0x5e,
	0x3b, 0x21, 0x38, 0xca, 0x2a, 0x35, 0x61, 0x30, 0xcf, 0xfe, 0x6f, 0x8a, 0x2c, 0x35, 0x35, 0x9b,
	0xb8, 0x3a, 0x76, 0xa9, 0x73, 0x07, 0xc6, 0x55, 0x3b, 0xfd, 0x09, 0xda, 0xaa, 0xe4, 0xd2, 0xc2,
	0x08, 0xa6, 0x52, 0x6d, 0x55, 0x26, 0xc7, 0x8c, 0x47, 0x9b, 0xed, 0xbe, 0xcc, 0xa4, 0xa4, 0xe8,
	0xa0, 0xdf, 0x40, 0x0b, 0xcb, 0xb4, 0xb5, 0x1d, 0xcb, 0xc6, 0x50, 0xec, 0x8d, 0xac, 0x41, 0x51,
	0x71, 0x3e, 0xc1, 0x48, 0x08, 0x8b, 0xe9, 0xbf, 0x49, 0x9d, 0x38, 0x21, 0x0c, 0x17, 0xb1, 0x20,
	0x61, 0x56, 0x53, 0x0a, 0xfd, 0x9b, 0xe3, 0x5e, 0x3d, 0x45, 0x47, 0x19, 0x0b, 0x16, 0xe5, 0x4b,
	0x25, 0xa9, 0xa3, 0x8c, 0x05, 0xc3, 0x62, 0xd9, 0x2d, 0x2d, 0x63, 0xc7, 0x87, 0x51, 0x18, 0x75,
	0x4a, 0x31, 0x52, 0x1b, 0xfa, 0xc8, 0x9a, 0xca, 0x24, 0xb6, 0xe6, 0x1a, 0xc1, 0xe8, 0xfa, 0x02,
	0x28, 0x2b, 0xce, 0x1f, 0x00, 0x65, 0x2d, 0x9e, 0xfc, 0xae, 0x49, 0x2e, 0x9a, 0xe2, 0xb6, 0xab,
	0x92, 0xb7, 0xe6, 0x43, 0x54, 0x89, 0x73, 0x0b, 0xe3, 0xd6, 0x49, 0x0c, 0xc6, 0x48, 0xbf, 0xc2,
	0xf0, 0x1f, 0xe7, 0x8c, 0x2f, 0x58, 0xda, 0xed, 0x7e, 0x01, 0xf4, 0x07, 0x0c, 0x30, 0x6b, 0x12,
	0x9e, 0x56, 0xed, 0x59, 0xda, 0x5d, 0x14, 0xc3, 0xae, 0x38, 0x9f, 0x9c, 0x5e, 0xac, 0xde, 0xe9,
	0x6c, 0x91, 0xa7, 0xb3, 0x45, 0x9e, 0xcf, 0x16, 0x79, 0x7c, 0xb5, 0x7a, 0xf7, 0x1f, 0xe5, 0x87,
	0xff, 0x7a, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x31, 0x3c, 0x44, 0xe8, 0x43, 0x02, 0x00, 0x00,
}
