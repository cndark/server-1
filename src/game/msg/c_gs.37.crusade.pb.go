// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.37.crusade.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 远征
type CrusadeData struct {
	Stage    string            `protobuf:"bytes,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts1      int64             `protobuf:"varint,2,opt,name=Ts1,proto3" json:"Ts1,omitempty"`
	Ts2      int64             `protobuf:"varint,3,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
	LvNum    int32             `protobuf:"varint,4,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	BoxTaken []int32           `protobuf:"varint,5,rep,packed,name=BoxTaken" json:"BoxTaken,omitempty"`
	HpLoss   map[int64]float64 `protobuf:"bytes,6,rep,name=HpLoss" json:"HpLoss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Enemies  []*CrusadeEnemy   `protobuf:"bytes,7,rep,name=Enemies" json:"Enemies,omitempty"`
}

func (m *CrusadeData) Reset()                    { *m = CrusadeData{} }
func (m *CrusadeData) String() string            { return proto.CompactTextString(m) }
func (*CrusadeData) ProtoMessage()               {}
func (*CrusadeData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{0} }

type CrusadeEnemy struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
}

func (m *CrusadeEnemy) Reset()                    { *m = CrusadeEnemy{} }
func (m *CrusadeEnemy) String() string            { return proto.CompactTextString(m) }
func (*CrusadeEnemy) ProtoMessage()               {}
func (*CrusadeEnemy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{1} }

// 推送: 版本推送
type GS_CrusadeStageUpdate struct {
	Stage string `protobuf:"bytes,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts1   int64  `protobuf:"varint,2,opt,name=Ts1,proto3" json:"Ts1,omitempty"`
	Ts2   int64  `protobuf:"varint,3,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *GS_CrusadeStageUpdate) Reset()         { *m = GS_CrusadeStageUpdate{} }
func (m *GS_CrusadeStageUpdate) String() string { return proto.CompactTextString(m) }
func (*GS_CrusadeStageUpdate) ProtoMessage()    {}
func (*GS_CrusadeStageUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_37Crusade, []int{2}
}

type C_CrusadeGetInfo struct {
}

func (m *C_CrusadeGetInfo) Reset()                    { *m = C_CrusadeGetInfo{} }
func (m *C_CrusadeGetInfo) String() string            { return proto.CompactTextString(m) }
func (*C_CrusadeGetInfo) ProtoMessage()               {}
func (*C_CrusadeGetInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{3} }

type GS_CrusadeGetInfo_R struct {
	Data *CrusadeData `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *GS_CrusadeGetInfo_R) Reset()                    { *m = GS_CrusadeGetInfo_R{} }
func (m *GS_CrusadeGetInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_CrusadeGetInfo_R) ProtoMessage()               {}
func (*GS_CrusadeGetInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{4} }

type C_CrusadeBoxTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_CrusadeBoxTake) Reset()                    { *m = C_CrusadeBoxTake{} }
func (m *C_CrusadeBoxTake) String() string            { return proto.CompactTextString(m) }
func (*C_CrusadeBoxTake) ProtoMessage()               {}
func (*C_CrusadeBoxTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{5} }

type GS_CrusadeBoxTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_CrusadeBoxTake_R) Reset()                    { *m = GS_CrusadeBoxTake_R{} }
func (m *GS_CrusadeBoxTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_CrusadeBoxTake_R) ProtoMessage()               {}
func (*GS_CrusadeBoxTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{6} }

// 打架
type C_CrusadeFight struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_CrusadeFight) Reset()                    { *m = C_CrusadeFight{} }
func (m *C_CrusadeFight) String() string            { return proto.CompactTextString(m) }
func (*C_CrusadeFight) ProtoMessage()               {}
func (*C_CrusadeFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{7} }

type GS_CrusadeFight_R struct {
	ErrorCode int32             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay     `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards          `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
	HpLoss    map[int64]float64 `protobuf:"bytes,4,rep,name=HpLoss" json:"HpLoss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *GS_CrusadeFight_R) Reset()                    { *m = GS_CrusadeFight_R{} }
func (m *GS_CrusadeFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_CrusadeFight_R) ProtoMessage()               {}
func (*GS_CrusadeFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_37Crusade, []int{8} }

func init() {
	proto.RegisterType((*CrusadeData)(nil), "msg.CrusadeData")
	proto.RegisterType((*CrusadeEnemy)(nil), "msg.CrusadeEnemy")
	proto.RegisterType((*GS_CrusadeStageUpdate)(nil), "msg.GS_CrusadeStageUpdate")
	proto.RegisterType((*C_CrusadeGetInfo)(nil), "msg.C_CrusadeGetInfo")
	proto.RegisterType((*GS_CrusadeGetInfo_R)(nil), "msg.GS_CrusadeGetInfo_R")
	proto.RegisterType((*C_CrusadeBoxTake)(nil), "msg.C_CrusadeBoxTake")
	proto.RegisterType((*GS_CrusadeBoxTake_R)(nil), "msg.GS_CrusadeBoxTake_R")
	proto.RegisterType((*C_CrusadeFight)(nil), "msg.C_CrusadeFight")
	proto.RegisterType((*GS_CrusadeFight_R)(nil), "msg.GS_CrusadeFight_R")
}
func (m *CrusadeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrusadeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if m.Ts1 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Ts2))
	}
	if m.LvNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.LvNum))
	}
	if len(m.BoxTaken) > 0 {
		dAtA2 := make([]byte, len(m.BoxTaken)*10)
		var j1 int
		for _, num1 := range m.BoxTaken {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.HpLoss) > 0 {
		for k, _ := range m.HpLoss {
			dAtA[i] = 0x32
			i++
			v := m.HpLoss[k]
			mapSize := 1 + sovCGs_37Crusade(uint64(k)) + 1 + 8
			i = encodeVarintCGs_37Crusade(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_37Crusade(dAtA, i, uint64(k))
			dAtA[i] = 0x11
			i++
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	if len(m.Enemies) > 0 {
		for _, msg := range m.Enemies {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCGs_37Crusade(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CrusadeEnemy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrusadeEnemy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Plr.Size()))
		n3, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GS_CrusadeStageUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_CrusadeStageUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if m.Ts1 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *C_CrusadeGetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_CrusadeGetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_CrusadeGetInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_CrusadeGetInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C_CrusadeBoxTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_CrusadeBoxTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_CrusadeBoxTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_CrusadeBoxTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Id))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_CrusadeFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_CrusadeFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.T.Size()))
		n6, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GS_CrusadeFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_CrusadeFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Replay.Size()))
		n7, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_37Crusade(dAtA, i, uint64(m.Rewards.Size()))
		n8, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.HpLoss) > 0 {
		for k, _ := range m.HpLoss {
			dAtA[i] = 0x22
			i++
			v := m.HpLoss[k]
			mapSize := 1 + sovCGs_37Crusade(uint64(k)) + 1 + 8
			i = encodeVarintCGs_37Crusade(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_37Crusade(dAtA, i, uint64(k))
			dAtA[i] = 0x11
			i++
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func encodeVarintCGs_37Crusade(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CrusadeData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	if m.Ts1 != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Ts2))
	}
	if m.LvNum != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.LvNum))
	}
	if len(m.BoxTaken) > 0 {
		l = 0
		for _, e := range m.BoxTaken {
			l += sovCGs_37Crusade(uint64(e))
		}
		n += 1 + sovCGs_37Crusade(uint64(l)) + l
	}
	if len(m.HpLoss) > 0 {
		for k, v := range m.HpLoss {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_37Crusade(uint64(k)) + 1 + 8
			n += mapEntrySize + 1 + sovCGs_37Crusade(uint64(mapEntrySize))
		}
	}
	if len(m.Enemies) > 0 {
		for _, e := range m.Enemies {
			l = e.Size()
			n += 1 + l + sovCGs_37Crusade(uint64(l))
		}
	}
	return n
}

func (m *CrusadeEnemy) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	return n
}

func (m *GS_CrusadeStageUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	if m.Ts1 != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Ts2))
	}
	return n
}

func (m *C_CrusadeGetInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_CrusadeGetInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	return n
}

func (m *C_CrusadeBoxTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Id))
	}
	return n
}

func (m *GS_CrusadeBoxTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.Id))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	return n
}

func (m *C_CrusadeFight) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	return n
}

func (m *GS_CrusadeFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_37Crusade(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_37Crusade(uint64(l))
	}
	if len(m.HpLoss) > 0 {
		for k, v := range m.HpLoss {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_37Crusade(uint64(k)) + 1 + 8
			n += mapEntrySize + 1 + sovCGs_37Crusade(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCGs_37Crusade(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_37Crusade(x uint64) (n int) {
	return sovCGs_37Crusade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrusadeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrusadeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrusadeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts1", wireType)
			}
			m.Ts1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_37Crusade
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxTaken = append(m.BoxTaken, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_37Crusade
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_37Crusade
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_37Crusade
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxTaken = append(m.BoxTaken, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxTaken", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HpLoss == nil {
				m.HpLoss = make(map[int64]float64)
			}
			var mapkey int64
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_37Crusade
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_37Crusade
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_37Crusade
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HpLoss[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enemies = append(m.Enemies, &CrusadeEnemy{})
			if err := m.Enemies[len(m.Enemies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrusadeEnemy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrusadeEnemy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrusadeEnemy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_CrusadeStageUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_CrusadeStageUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_CrusadeStageUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts1", wireType)
			}
			m.Ts1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_CrusadeGetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_CrusadeGetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_CrusadeGetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_CrusadeGetInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_CrusadeGetInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_CrusadeGetInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CrusadeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_CrusadeBoxTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_CrusadeBoxTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_CrusadeBoxTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_CrusadeBoxTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_CrusadeBoxTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_CrusadeBoxTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_CrusadeFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_CrusadeFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_CrusadeFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_CrusadeFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_CrusadeFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_CrusadeFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HpLoss == nil {
				m.HpLoss = make(map[int64]float64)
			}
			var mapkey int64
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_37Crusade
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_37Crusade
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_37Crusade
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HpLoss[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_37Crusade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_37Crusade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_37Crusade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_37Crusade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_37Crusade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_37Crusade
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_37Crusade
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_37Crusade(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_37Crusade = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_37Crusade   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.37.crusade.proto", fileDescriptorCGs_37Crusade) }

var fileDescriptorCGs_37Crusade = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xee, 0xda, 0x4d, 0xf2, 0x77, 0x52, 0x55, 0xe9, 0xfe, 0x8d, 0x64, 0x45, 0x55, 0x64, 0xad,
	0x10, 0x04, 0x21, 0x59, 0xc5, 0x45, 0x2a, 0x94, 0x5b, 0x42, 0x5a, 0x22, 0x55, 0xa8, 0x6c, 0xc2,
	0x39, 0x5a, 0xe2, 0xc5, 0x44, 0xb1, 0xb3, 0xd1, 0xee, 0xa6, 0x90, 0xb7, 0xe0, 0xc6, 0x2b, 0xf5,
	0xc8, 0x23, 0x40, 0x78, 0x0c, 0x2e, 0xc8, 0xeb, 0x75, 0x62, 0x01, 0x12, 0x08, 0x6e, 0x3b, 0xdf,
	0x7c, 0xdf, 0xcc, 0x37, 0xe3, 0x31, 0x34, 0x27, 0xe3, 0x58, 0x05, 0xa7, 0x67, 0xc1, 0x44, 0x2e,
	0x15, 0x8b, 0x78, 0xb0, 0x90, 0x42, 0x0b, 0xec, 0xa6, 0x2a, 0x6e, 0x41, 0x2c, 0x62, 0x91, 0x03,
	0xad, 0x9c, 0x77, 0x72, 0x12, 0x28, 0x2d, 0x97, 0x13, 0xad, 0x72, 0x98, 0x7c, 0x74, 0xa0, 0xde,
	0xcb, 0x95, 0xcf, 0x98, 0x66, 0xf8, 0x08, 0x2a, 0x43, 0xcd, 0x62, 0xee, 0x21, 0x1f, 0x75, 0xf6,
	0x68, 0x1e, 0xe0, 0x06, 0xb8, 0x23, 0xf5, 0xd0, 0x73, 0x7c, 0xd4, 0x71, 0x69, 0xf6, 0xcc, 0x91,
	0xd0, 0x73, 0x0b, 0x24, 0xcc, 0x94, 0x57, 0x37, 0x2f, 0x96, 0xa9, 0xb7, 0xeb, 0xa3, 0x4e, 0x85,
	0xe6, 0x01, 0x6e, 0xc1, 0x7f, 0x5d, 0xf1, 0x7e, 0xc4, 0x66, 0x7c, 0xee, 0x55, 0x7c, 0xb7, 0x53,
	0xa1, 0x9b, 0x18, 0x3f, 0x82, 0xea, 0xf3, 0xc5, 0x95, 0x50, 0xca, 0xab, 0xfa, 0x6e, 0xa7, 0x1e,
	0x1e, 0x07, 0xa9, 0x8a, 0x83, 0x92, 0x9b, 0x20, 0x4f, 0xf7, 0xe7, 0x5a, 0xae, 0xa8, 0xe5, 0xe2,
	0x07, 0x50, 0xeb, 0xcf, 0x79, 0x3a, 0xe5, 0xca, 0xab, 0x19, 0xd9, 0x61, 0x59, 0x96, 0xa5, 0x56,
	0xb4, 0x60, 0xb4, 0x9e, 0x40, 0xbd, 0x54, 0x23, 0x73, 0x3d, 0xe3, 0x2b, 0x33, 0x9b, 0x4b, 0xb3,
	0x67, 0xe6, 0xfa, 0x86, 0x25, 0x4b, 0x6e, 0x66, 0x43, 0x34, 0x0f, 0xce, 0x9d, 0xc7, 0x88, 0x9c,
	0xc1, 0x7e, 0xb9, 0x26, 0xbe, 0x07, 0xee, 0x75, 0x22, 0x8d, 0xb6, 0x1e, 0x36, 0x4d, 0xcf, 0xeb,
	0x84, 0xad, 0xb8, 0x1c, 0x4e, 0xd3, 0x45, 0xc2, 0x07, 0xf3, 0x37, 0x82, 0x66, 0x0c, 0xf2, 0x12,
	0x9a, 0x97, 0xc3, 0xb1, 0xd5, 0x9a, 0xfd, 0xbd, 0x5a, 0x44, 0x4c, 0xf3, 0xbf, 0xdf, 0x2d, 0xc1,
	0xd0, 0xe8, 0x15, 0x15, 0x2f, 0xb9, 0xce, 0x7a, 0x91, 0xa7, 0xf0, 0xff, 0xb6, 0x8d, 0x05, 0xc7,
	0x14, 0xdf, 0x81, 0xdd, 0x6c, 0x75, 0xd6, 0x67, 0xe3, 0xc7, 0x95, 0x52, 0x93, 0x25, 0xa4, 0x54,
	0xd0, 0x7e, 0x0f, 0x7c, 0x00, 0xce, 0x20, 0x32, 0xba, 0x0a, 0x75, 0x06, 0x11, 0x99, 0x95, 0x1b,
	0x58, 0xd2, 0x98, 0xe2, 0x63, 0xd8, 0xeb, 0x4b, 0x29, 0x64, 0x4f, 0x44, 0xdc, 0xb2, 0xb7, 0x80,
	0x2d, 0xe2, 0x14, 0x45, 0xf0, 0x5d, 0xa8, 0x51, 0xfe, 0x8e, 0xc9, 0x48, 0x99, 0x79, 0xea, 0xe1,
	0xbe, 0x71, 0x64, 0x31, 0x5a, 0x24, 0x49, 0x08, 0x07, 0x1b, 0x43, 0x17, 0xd3, 0xf8, 0xad, 0xc6,
	0x3e, 0xa0, 0x91, 0x9d, 0x02, 0x1b, 0xcd, 0x88, 0xb3, 0xf4, 0x42, 0xc8, 0x94, 0xe9, 0xa9, 0x98,
	0x53, 0x34, 0x22, 0xdf, 0x10, 0x1c, 0x6e, 0x1d, 0x1a, 0xd5, 0x6f, 0xfd, 0xdd, 0x87, 0x2a, 0xe5,
	0x8b, 0x84, 0xad, 0x8c, 0xc7, 0xe2, 0x78, 0xba, 0x4c, 0xeb, 0x84, 0xe7, 0x09, 0x6a, 0x09, 0x7f,
	0x6a, 0x1d, 0x9f, 0x6f, 0xce, 0x78, 0xd7, 0xdc, 0x23, 0x31, 0xb4, 0x9f, 0x8c, 0xfd, 0xea, 0x98,
	0xff, 0xe1, 0x3e, 0xbb, 0x47, 0xb7, 0x5f, 0xda, 0x3b, 0xb7, 0xeb, 0x36, 0xfa, 0xb4, 0x6e, 0xa3,
	0xcf, 0xeb, 0x36, 0xfa, 0xf0, 0xb5, 0xbd, 0xf3, 0xba, 0x6a, 0x7e, 0xeb, 0xd3, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x88, 0xf7, 0x85, 0xac, 0x17, 0x04, 0x00, 0x00,
}
