// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.31.tower.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 爬塔
type TowerData struct {
	LvNum  int32 `protobuf:"varint,1,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	LastTs int64 `protobuf:"varint,2,opt,name=LastTs,proto3" json:"LastTs,omitempty"`
}

func (m *TowerData) Reset()                    { *m = TowerData{} }
func (m *TowerData) String() string            { return proto.CompactTextString(m) }
func (*TowerData) ProtoMessage()               {}
func (*TowerData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{0} }

// 战斗
type C_TowerFight struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_TowerFight) Reset()                    { *m = C_TowerFight{} }
func (m *C_TowerFight) String() string            { return proto.CompactTextString(m) }
func (*C_TowerFight) ProtoMessage()               {}
func (*C_TowerFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{1} }

type GS_TowerFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	LvNum     int32         `protobuf:"varint,3,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TowerFight_R) Reset()                    { *m = GS_TowerFight_R{} }
func (m *GS_TowerFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_TowerFight_R) ProtoMessage()               {}
func (*GS_TowerFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{2} }

// 扫荡
type C_TowerRaid struct {
}

func (m *C_TowerRaid) Reset()                    { *m = C_TowerRaid{} }
func (m *C_TowerRaid) String() string            { return proto.CompactTextString(m) }
func (*C_TowerRaid) ProtoMessage()               {}
func (*C_TowerRaid) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{3} }

type GS_TowerRaid_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	LastTs    int64    `protobuf:"varint,2,opt,name=LastTs,proto3" json:"LastTs,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TowerRaid_R) Reset()                    { *m = GS_TowerRaid_R{} }
func (m *GS_TowerRaid_R) String() string            { return proto.CompactTextString(m) }
func (*GS_TowerRaid_R) ProtoMessage()               {}
func (*GS_TowerRaid_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{4} }

// 录像
type C_TowerRecord struct {
	LvNum int32 `protobuf:"varint,1,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
}

func (m *C_TowerRecord) Reset()                    { *m = C_TowerRecord{} }
func (m *C_TowerRecord) String() string            { return proto.CompactTextString(m) }
func (*C_TowerRecord) ProtoMessage()               {}
func (*C_TowerRecord) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{5} }

type GS_TowerRecord_R struct {
	First    *BattleReplay `protobuf:"bytes,1,opt,name=First" json:"First,omitempty"`
	MinPower *BattleReplay `protobuf:"bytes,2,opt,name=MinPower" json:"MinPower,omitempty"`
}

func (m *GS_TowerRecord_R) Reset()                    { *m = GS_TowerRecord_R{} }
func (m *GS_TowerRecord_R) String() string            { return proto.CompactTextString(m) }
func (*GS_TowerRecord_R) ProtoMessage()               {}
func (*GS_TowerRecord_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_31Tower, []int{6} }

func init() {
	proto.RegisterType((*TowerData)(nil), "msg.TowerData")
	proto.RegisterType((*C_TowerFight)(nil), "msg.C_TowerFight")
	proto.RegisterType((*GS_TowerFight_R)(nil), "msg.GS_TowerFight_R")
	proto.RegisterType((*C_TowerRaid)(nil), "msg.C_TowerRaid")
	proto.RegisterType((*GS_TowerRaid_R)(nil), "msg.GS_TowerRaid_R")
	proto.RegisterType((*C_TowerRecord)(nil), "msg.C_TowerRecord")
	proto.RegisterType((*GS_TowerRecord_R)(nil), "msg.GS_TowerRecord_R")
}
func (m *TowerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LvNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.LvNum))
	}
	if m.LastTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.LastTs))
	}
	return i, nil
}

func (m *C_TowerFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TowerFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.T.Size()))
		n1, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GS_TowerFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TowerFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.Replay.Size()))
		n2, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LvNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.LvNum))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_TowerRaid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TowerRaid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_TowerRaid_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TowerRaid_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.ErrorCode))
	}
	if m.LastTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.LastTs))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C_TowerRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TowerRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LvNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.LvNum))
	}
	return i, nil
}

func (m *GS_TowerRecord_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TowerRecord_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.First != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.First.Size()))
		n5, err := m.First.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.MinPower != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_31Tower(dAtA, i, uint64(m.MinPower.Size()))
		n6, err := m.MinPower.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintCGs_31Tower(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TowerData) Size() (n int) {
	var l int
	_ = l
	if m.LvNum != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.LvNum))
	}
	if m.LastTs != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.LastTs))
	}
	return n
}

func (m *C_TowerFight) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	return n
}

func (m *GS_TowerFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	if m.LvNum != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.LvNum))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	return n
}

func (m *C_TowerRaid) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_TowerRaid_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.ErrorCode))
	}
	if m.LastTs != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.LastTs))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	return n
}

func (m *C_TowerRecord) Size() (n int) {
	var l int
	_ = l
	if m.LvNum != 0 {
		n += 1 + sovCGs_31Tower(uint64(m.LvNum))
	}
	return n
}

func (m *GS_TowerRecord_R) Size() (n int) {
	var l int
	_ = l
	if m.First != nil {
		l = m.First.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	if m.MinPower != nil {
		l = m.MinPower.Size()
		n += 1 + l + sovCGs_31Tower(uint64(l))
	}
	return n
}

func sovCGs_31Tower(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_31Tower(x uint64) (n int) {
	return sovCGs_31Tower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TowerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTs", wireType)
			}
			m.LastTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TowerFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TowerFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TowerFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TowerFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TowerFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TowerFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TowerRaid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TowerRaid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TowerRaid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TowerRaid_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TowerRaid_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TowerRaid_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTs", wireType)
			}
			m.LastTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TowerRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TowerRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TowerRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TowerRecord_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TowerRecord_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TowerRecord_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.First == nil {
				m.First = &BattleReplay{}
			}
			if err := m.First.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinPower == nil {
				m.MinPower = &BattleReplay{}
			}
			if err := m.MinPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_31Tower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_31Tower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_31Tower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_31Tower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_31Tower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_31Tower
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_31Tower
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_31Tower(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_31Tower = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_31Tower   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.31.tower.proto", fileDescriptorCGs_31Tower) }

var fileDescriptorCGs_31Tower = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x18, 0x64, 0xad, 0xa0, 0x7c, 0x80, 0x3f, 0x2b, 0x1a, 0x42, 0x4c, 0x43, 0x9a, 0xa8, 0x78, 0xb0,
	0x41, 0x38, 0x79, 0x05, 0xc5, 0x0b, 0x1a, 0xb3, 0xf6, 0xde, 0xac, 0x74, 0x53, 0x6b, 0x28, 0x4b,
	0x76, 0x17, 0x89, 0x6f, 0xe1, 0xd1, 0x47, 0xe2, 0xe8, 0x23, 0x28, 0xbe, 0x88, 0x61, 0xbb, 0xfc,
	0x1c, 0x40, 0x8f, 0xdf, 0x7c, 0x33, 0xdf, 0x4c, 0xa7, 0x0b, 0x07, 0x5d, 0x3f, 0x94, 0x6e, 0xe3,
	0xd2, 0x55, 0x7c, 0xc4, 0x84, 0x3b, 0x10, 0x5c, 0x71, 0x6c, 0xc5, 0x32, 0x2c, 0x43, 0xc8, 0x43,
	0x9e, 0x00, 0xe5, 0x43, 0xcd, 0xaa, 0xd5, 0x5c, 0xa9, 0xc4, 0xb0, 0xab, 0x64, 0x02, 0x3b, 0x57,
	0x90, 0xf5, 0xa6, 0xb2, 0x6b, 0xaa, 0x28, 0x2e, 0x42, 0xba, 0xf3, 0x7a, 0x3f, 0x8c, 0x4b, 0xa8,
	0x82, 0xaa, 0x69, 0x92, 0x0c, 0xf8, 0x08, 0x32, 0x1d, 0x2a, 0x95, 0x27, 0x4b, 0x1b, 0x15, 0x54,
	0xb5, 0x88, 0x99, 0x9c, 0x1a, 0xe4, 0x5b, 0xbe, 0x16, 0xb7, 0xa3, 0xf0, 0x59, 0xe1, 0x0a, 0x20,
	0x4f, 0x2b, 0x73, 0x75, 0xec, 0xc6, 0x32, 0x74, 0x3d, 0x46, 0xe3, 0x36, 0x17, 0x31, 0x55, 0x11,
	0xef, 0x13, 0xe4, 0x39, 0x1f, 0x08, 0x76, 0x6f, 0x1f, 0x97, 0x34, 0x3e, 0xc1, 0xc7, 0x90, 0xbd,
	0x11, 0x82, 0x8b, 0x16, 0x0f, 0x98, 0xf1, 0x5d, 0x00, 0xf8, 0x1c, 0x32, 0x84, 0x0d, 0x7a, 0xf4,
	0x4d, 0x7b, 0xe7, 0xea, 0xfb, 0xfa, 0x70, 0x93, 0x2a, 0xd5, 0x63, 0xc9, 0x82, 0x18, 0xc2, 0x22,
	0xbc, 0xb5, 0x1c, 0xfe, 0x14, 0xb6, 0x08, 0x1b, 0x51, 0x11, 0xc8, 0xd2, 0xa6, 0xbe, 0x90, 0xd7,
	0x17, 0x0c, 0x46, 0x66, 0x4b, 0xa7, 0x00, 0x39, 0xf3, 0x31, 0x84, 0x46, 0x81, 0xd3, 0x87, 0x9d,
	0x59, 0xd0, 0xe9, 0xfc, 0x6f, 0xce, 0x35, 0x1d, 0x2d, 0xdb, 0x5b, 0x7f, 0xd9, 0x9f, 0x40, 0x61,
	0x66, 0xcf, 0xba, 0x5c, 0x04, 0xab, 0x7f, 0x85, 0xf3, 0x02, 0x7b, 0xf3, 0x58, 0x9a, 0xe7, 0x13,
	0x7c, 0x06, 0xe9, 0x76, 0x24, 0xa4, 0x32, 0xd5, 0xaf, 0x68, 0x28, 0xd9, 0xe3, 0x0b, 0xd8, 0xbe,
	0x8b, 0xfa, 0x0f, 0x53, 0xf1, 0xfa, 0x36, 0xe7, 0x94, 0x66, 0x71, 0xfc, 0x6d, 0xa7, 0xc6, 0x13,
	0x1b, 0x7d, 0x4e, 0x6c, 0xf4, 0x35, 0xb1, 0xd1, 0xfb, 0x8f, 0x9d, 0x7a, 0xca, 0xe8, 0x67, 0xd3,
	0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x72, 0x51, 0xdf, 0x75, 0x02, 0x00, 0x00,
}
