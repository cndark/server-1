// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.26.taskdaily.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 日常任务
type TaskDailyData struct {
	Items   []*TaskDailyItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
	BoxTake []int32          `protobuf:"varint,2,rep,packed,name=BoxTake" json:"BoxTake,omitempty"`
}

func (m *TaskDailyData) Reset()                    { *m = TaskDailyData{} }
func (m *TaskDailyData) String() string            { return proto.CompactTextString(m) }
func (*TaskDailyData) ProtoMessage()               {}
func (*TaskDailyData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_26Taskdaily, []int{0} }

type TaskDailyItem struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
	Fin bool    `protobuf:"varint,3,opt,name=Fin,proto3" json:"Fin,omitempty"`
	T   bool    `protobuf:"varint,4,opt,name=T,proto3" json:"T,omitempty"`
}

func (m *TaskDailyItem) Reset()                    { *m = TaskDailyItem{} }
func (m *TaskDailyItem) String() string            { return proto.CompactTextString(m) }
func (*TaskDailyItem) ProtoMessage()               {}
func (*TaskDailyItem) Descriptor() ([]byte, []int) { return fileDescriptorCGs_26Taskdaily, []int{1} }

// ============================================================================
// 通知: 进度变化
type GS_TaskDailyValueChanged struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,3,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *GS_TaskDailyValueChanged) Reset()         { *m = GS_TaskDailyValueChanged{} }
func (m *GS_TaskDailyValueChanged) String() string { return proto.CompactTextString(m) }
func (*GS_TaskDailyValueChanged) ProtoMessage()    {}
func (*GS_TaskDailyValueChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_26Taskdaily, []int{2}
}

// 通知: 一个日常项完成
type GS_TaskDailyItemCompleted struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GS_TaskDailyItemCompleted) Reset()         { *m = GS_TaskDailyItemCompleted{} }
func (m *GS_TaskDailyItemCompleted) String() string { return proto.CompactTextString(m) }
func (*GS_TaskDailyItemCompleted) ProtoMessage()    {}
func (*GS_TaskDailyItemCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_26Taskdaily, []int{3}
}

type C_TaskDailyInfo struct {
}

func (m *C_TaskDailyInfo) Reset()                    { *m = C_TaskDailyInfo{} }
func (m *C_TaskDailyInfo) String() string            { return proto.CompactTextString(m) }
func (*C_TaskDailyInfo) ProtoMessage()               {}
func (*C_TaskDailyInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_26Taskdaily, []int{4} }

type GS_TaskDailyInfo_R struct {
	Data *TaskDailyData `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *GS_TaskDailyInfo_R) Reset()         { *m = GS_TaskDailyInfo_R{} }
func (m *GS_TaskDailyInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_TaskDailyInfo_R) ProtoMessage()    {}
func (*GS_TaskDailyInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_26Taskdaily, []int{5}
}

type C_TaskDailyTakeBoxReward struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_TaskDailyTakeBoxReward) Reset()         { *m = C_TaskDailyTakeBoxReward{} }
func (m *C_TaskDailyTakeBoxReward) String() string { return proto.CompactTextString(m) }
func (*C_TaskDailyTakeBoxReward) ProtoMessage()    {}
func (*C_TaskDailyTakeBoxReward) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_26Taskdaily, []int{6}
}

type GS_TaskDailyTakeBoxReward_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TaskDailyTakeBoxReward_R) Reset()         { *m = GS_TaskDailyTakeBoxReward_R{} }
func (m *GS_TaskDailyTakeBoxReward_R) String() string { return proto.CompactTextString(m) }
func (*GS_TaskDailyTakeBoxReward_R) ProtoMessage()    {}
func (*GS_TaskDailyTakeBoxReward_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_26Taskdaily, []int{7}
}

func init() {
	proto.RegisterType((*TaskDailyData)(nil), "msg.TaskDailyData")
	proto.RegisterType((*TaskDailyItem)(nil), "msg.TaskDailyItem")
	proto.RegisterType((*GS_TaskDailyValueChanged)(nil), "msg.GS_TaskDailyValueChanged")
	proto.RegisterType((*GS_TaskDailyItemCompleted)(nil), "msg.GS_TaskDailyItemCompleted")
	proto.RegisterType((*C_TaskDailyInfo)(nil), "msg.C_TaskDailyInfo")
	proto.RegisterType((*GS_TaskDailyInfo_R)(nil), "msg.GS_TaskDailyInfo_R")
	proto.RegisterType((*C_TaskDailyTakeBoxReward)(nil), "msg.C_TaskDailyTakeBoxReward")
	proto.RegisterType((*GS_TaskDailyTakeBoxReward_R)(nil), "msg.GS_TaskDailyTakeBoxReward_R")
}
func (m *TaskDailyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDailyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BoxTake) > 0 {
		dAtA2 := make([]byte, len(m.BoxTake)*10)
		var j1 int
		for _, num1 := range m.BoxTake {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *TaskDailyItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDailyItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	if m.Fin {
		dAtA[i] = 0x18
		i++
		if m.Fin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.T {
		dAtA[i] = 0x20
		i++
		if m.T {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_TaskDailyValueChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskDailyValueChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	return i, nil
}

func (m *GS_TaskDailyItemCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskDailyItemCompleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C_TaskDailyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TaskDailyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_TaskDailyInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskDailyInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_TaskDailyTakeBoxReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TaskDailyTakeBoxReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_TaskDailyTakeBoxReward_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskDailyTakeBoxReward_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Id))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_26Taskdaily(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintCGs_26Taskdaily(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskDailyData) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_26Taskdaily(uint64(l))
		}
	}
	if len(m.BoxTake) > 0 {
		l = 0
		for _, e := range m.BoxTake {
			l += sovCGs_26Taskdaily(uint64(e))
		}
		n += 1 + sovCGs_26Taskdaily(uint64(l)) + l
	}
	return n
}

func (m *TaskDailyItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	if m.Fin {
		n += 2
	}
	if m.T {
		n += 2
	}
	return n
}

func (m *GS_TaskDailyValueChanged) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func (m *GS_TaskDailyItemCompleted) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.Id))
	}
	return n
}

func (m *C_TaskDailyInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_TaskDailyInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCGs_26Taskdaily(uint64(l))
	}
	return n
}

func (m *C_TaskDailyTakeBoxReward) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.Id))
	}
	return n
}

func (m *GS_TaskDailyTakeBoxReward_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_26Taskdaily(uint64(m.Id))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_26Taskdaily(uint64(l))
	}
	return n
}

func sovCGs_26Taskdaily(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_26Taskdaily(x uint64) (n int) {
	return sovCGs_26Taskdaily(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskDailyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDailyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDailyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TaskDailyItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_26Taskdaily
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxTake = append(m.BoxTake, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_26Taskdaily
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_26Taskdaily
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_26Taskdaily
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxTake = append(m.BoxTake, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxTake", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDailyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDailyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDailyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fin = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskDailyValueChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskDailyValueChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskDailyValueChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskDailyItemCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskDailyItemCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskDailyItemCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TaskDailyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TaskDailyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TaskDailyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskDailyInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskDailyInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskDailyInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TaskDailyData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TaskDailyTakeBoxReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TaskDailyTakeBoxReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TaskDailyTakeBoxReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskDailyTakeBoxReward_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskDailyTakeBoxReward_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskDailyTakeBoxReward_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_26Taskdaily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_26Taskdaily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_26Taskdaily(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_26Taskdaily
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_26Taskdaily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_26Taskdaily
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_26Taskdaily
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_26Taskdaily(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_26Taskdaily = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_26Taskdaily   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.26.taskdaily.proto", fileDescriptorCGs_26Taskdaily) }

var fileDescriptorCGs_26Taskdaily = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0x66, 0x5a, 0xb8, 0xdc, 0x7b, 0xe0, 0xfe, 0x4d, 0x34, 0x8e, 0x68, 0x9a, 0xa6, 0x0b, 0xd2,
	0x68, 0xd2, 0x10, 0x4c, 0x5c, 0xb1, 0xa2, 0xa8, 0x61, 0xe9, 0xd0, 0xb0, 0x6d, 0x46, 0x5a, 0x2a,
	0xa1, 0xed, 0x90, 0x4e, 0x89, 0xf8, 0x16, 0x3e, 0x16, 0x4b, 0x1f, 0x41, 0xf1, 0x45, 0xcc, 0xb4,
	0x50, 0x4b, 0x88, 0xbb, 0x39, 0xdf, 0xdf, 0x39, 0xf9, 0x32, 0x70, 0x32, 0x71, 0x03, 0x61, 0x75,
	0xaf, 0xad, 0x94, 0x89, 0xb9, 0xc7, 0x66, 0xe1, 0xb3, 0xb5, 0x48, 0x78, 0xca, 0xb1, 0x1a, 0x89,
	0xa0, 0x05, 0x01, 0x0f, 0x78, 0x0e, 0xb4, 0x8e, 0x33, 0x65, 0xa7, 0x63, 0x89, 0x34, 0x59, 0x4e,
	0x52, 0x91, 0xc3, 0xc6, 0x08, 0x7e, 0x3b, 0x4c, 0xcc, 0x07, 0xd2, 0x3a, 0x60, 0x29, 0xc3, 0x26,
	0xd4, 0x86, 0xa9, 0x1f, 0x09, 0x82, 0x74, 0xd5, 0x6c, 0x74, 0xb1, 0x15, 0x89, 0xc0, 0x2a, 0x24,
	0x92, 0xa2, 0xb9, 0x00, 0x13, 0xa8, 0xf7, 0xf9, 0xca, 0x61, 0x73, 0x9f, 0x28, 0xba, 0x6a, 0xd6,
	0xe8, 0x6e, 0x34, 0xee, 0x4b, 0xa1, 0x52, 0x8b, 0xff, 0x80, 0x32, 0xf4, 0x08, 0xd2, 0x91, 0x59,
	0xa3, 0xca, 0xd0, 0xc3, 0xff, 0x40, 0x1d, 0xb3, 0x90, 0x28, 0x3a, 0x32, 0x11, 0x95, 0x4f, 0x89,
	0xdc, 0xce, 0x62, 0xa2, 0xea, 0xc8, 0xfc, 0x49, 0xe5, 0x13, 0x37, 0x01, 0x39, 0xa4, 0x9a, 0xcd,
	0xc8, 0x31, 0x7a, 0x40, 0xee, 0x46, 0x6e, 0x91, 0x3a, 0x66, 0xe1, 0xd2, 0xb7, 0x1f, 0x59, 0x1c,
	0xf8, 0xde, 0x77, 0xe9, 0x6a, 0x91, 0x6e, 0x5c, 0xc2, 0x69, 0xd9, 0x2d, 0x6f, 0xb2, 0x79, 0xb4,
	0x08, 0xfd, 0xf4, 0xd0, 0x6e, 0xfc, 0x87, 0xbf, 0x76, 0x49, 0x1b, 0x4f, 0xb9, 0xd1, 0x03, 0xbc,
	0xe7, 0x8f, 0xa7, 0xdc, 0xa5, 0xb8, 0x0d, 0x55, 0x59, 0x59, 0x66, 0x3d, 0x68, 0x4a, 0x32, 0x34,
	0xe3, 0x8d, 0x0b, 0x20, 0xa5, 0x40, 0xd9, 0x50, 0x9f, 0xaf, 0xa8, 0xff, 0xc4, 0x92, 0xc3, 0xe5,
	0x02, 0xce, 0xca, 0x9b, 0xf6, 0xc4, 0x2e, 0xc5, 0xe7, 0xf0, 0xeb, 0x26, 0x49, 0x78, 0x62, 0x73,
	0xcf, 0xdf, 0xba, 0xbe, 0x80, 0x6d, 0x98, 0x52, 0x14, 0xd1, 0x86, 0x7a, 0xee, 0x14, 0x59, 0x19,
	0x8d, 0x6e, 0x33, 0xbb, 0x71, 0x8b, 0xd1, 0x1d, 0xd9, 0x3f, 0x5a, 0xbf, 0x6b, 0x95, 0xf5, 0x46,
	0x43, 0xaf, 0x1b, 0x0d, 0xbd, 0x6d, 0x34, 0xf4, 0xf2, 0xa1, 0x55, 0x1e, 0x7e, 0x64, 0x3f, 0xe4,
	0xea, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x22, 0xe3, 0xda, 0x64, 0x02, 0x00, 0x00,
}
