// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.10.login.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 登录错误
type GS_LoginError struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_LoginError) Reset()                    { *m = GS_LoginError{} }
func (m *GS_LoginError) String() string            { return proto.CompactTextString(m) }
func (*GS_LoginError) ProtoMessage()               {}
func (*GS_LoginError) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{0} }

// 玩家信息
type GS_UserInfo struct {
	UserId      string           `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Head        string           `protobuf:"bytes,4,opt,name=Head,proto3" json:"Head,omitempty"`
	HFrame      int32            `protobuf:"varint,5,opt,name=HFrame,proto3" json:"HFrame,omitempty"`
	Lv          int32            `protobuf:"varint,6,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Exp         int32            `protobuf:"varint,7,opt,name=Exp,proto3" json:"Exp,omitempty"`
	CreateTs    int64            `protobuf:"varint,8,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
	IsNew       bool             `protobuf:"varint,9,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	LoginIP     string           `protobuf:"bytes,10,opt,name=LoginIP,proto3" json:"LoginIP,omitempty"`
	OnlineDur   int32            `protobuf:"varint,11,opt,name=OnlineDur,proto3" json:"OnlineDur,omitempty"`
	SvrTs       int64            `protobuf:"varint,12,opt,name=SvrTs,proto3" json:"SvrTs,omitempty"`
	GuildId     string           `protobuf:"bytes,13,opt,name=GuildId,proto3" json:"GuildId,omitempty"`
	ForLoading  *ForLoading      `protobuf:"bytes,16,opt,name=ForLoading" json:"ForLoading,omitempty"`
	AtkPwr      int32            `protobuf:"varint,17,opt,name=AtkPwr,proto3" json:"AtkPwr,omitempty"`
	Bag         *BagData         `protobuf:"bytes,19,opt,name=Bag" json:"Bag,omitempty"`
	Counter     *CounterData     `protobuf:"bytes,20,opt,name=Counter" json:"Counter,omitempty"`
	AttainTab   *AttainTabData   `protobuf:"bytes,21,opt,name=AttainTab" json:"AttainTab,omitempty"`
	Mails       []*Mail          `protobuf:"bytes,22,rep,name=Mails" json:"Mails,omitempty"`
	MOpen       *MOpenData       `protobuf:"bytes,24,opt,name=MOpen" json:"MOpen,omitempty"`
	Tutorial    *TutorialData    `protobuf:"bytes,25,opt,name=Tutorial" json:"Tutorial,omitempty"`
	Misc        *MiscData        `protobuf:"bytes,26,opt,name=Misc" json:"Misc,omitempty"`
	TaskDaily   *TaskDailyData   `protobuf:"bytes,29,opt,name=TaskDaily" json:"TaskDaily,omitempty"`
	TaskAchv    *TaskAchvData    `protobuf:"bytes,30,opt,name=TaskAchv" json:"TaskAchv,omitempty"`
	Draw        *DrawData        `protobuf:"bytes,31,opt,name=Draw" json:"Draw,omitempty"`
	WLevel      *WLevelData      `protobuf:"bytes,32,opt,name=WLevel" json:"WLevel,omitempty"`
	Appoint     *AppointData     `protobuf:"bytes,33,opt,name=Appoint" json:"Appoint,omitempty"`
	Tower       *TowerData       `protobuf:"bytes,34,opt,name=Tower" json:"Tower,omitempty"`
	TeamMgr     *TeamMgrData     `protobuf:"bytes,35,opt,name=TeamMgr" json:"TeamMgr,omitempty"`
	Arena       *ArenaData       `protobuf:"bytes,36,opt,name=Arena" json:"Arena,omitempty"`
	HFrameStore *HFrameStoreData `protobuf:"bytes,37,opt,name=HFrameStore" json:"HFrameStore,omitempty"`
	MarvelRoll  *MarvelRollData  `protobuf:"bytes,38,opt,name=MarvelRoll" json:"MarvelRoll,omitempty"`
	Friend      *FriendData      `protobuf:"bytes,39,opt,name=Friend" json:"Friend,omitempty"`
	Vip         *VipData         `protobuf:"bytes,40,opt,name=Vip" json:"Vip,omitempty"`
	Chat        *ChatData        `protobuf:"bytes,41,opt,name=Chat" json:"Chat,omitempty"`
	MonthTicket *MonthTicketData `protobuf:"bytes,43,opt,name=MonthTicket" json:"MonthTicket,omitempty"`
	PushGift    *PushGiftData    `protobuf:"bytes,44,opt,name=PushGift" json:"PushGift,omitempty"`
	GiftShop    *GiftShopData    `protobuf:"bytes,45,opt,name=GiftShop" json:"GiftShop,omitempty"`
	PrivCard    *PrivCardData    `protobuf:"bytes,46,opt,name=PrivCard" json:"PrivCard,omitempty"`
	SignDaily   *SignDailyData   `protobuf:"bytes,47,opt,name=SignDaily" json:"SignDaily,omitempty"`
	TaskMonth   *TaskMonthData   `protobuf:"bytes,48,opt,name=TaskMonth" json:"TaskMonth,omitempty"`
	DaySign     *DaySignData     `protobuf:"bytes,49,opt,name=DaySign" json:"DaySign,omitempty"`
	RankPlay    *RankPlayData    `protobuf:"bytes,50,opt,name=RankPlay" json:"RankPlay,omitempty"`
	TargetDays  *TargetDaysData  `protobuf:"bytes,51,opt,name=TargetDays" json:"TargetDays,omitempty"`
	TaskGrow    *TaskGrowData    `protobuf:"bytes,52,opt,name=TaskGrow" json:"TaskGrow,omitempty"`
	WLevelFund  *WLevelFundData  `protobuf:"bytes,53,opt,name=WLevelFund" json:"WLevelFund,omitempty"`
	GrowFund    *GrowFundData    `protobuf:"bytes,54,opt,name=GrowFund" json:"GrowFund,omitempty"`
	BillFirst   *BillFirstData   `protobuf:"bytes,55,opt,name=BillFirst" json:"BillFirst,omitempty"`
	Lamp        *LampData        `protobuf:"bytes,56,opt,name=Lamp" json:"Lamp,omitempty"`
	Gwar        *GWarData        `protobuf:"bytes,57,opt,name=Gwar" json:"Gwar,omitempty"`
	Rift        *RiftData        `protobuf:"bytes,58,opt,name=Rift" json:"Rift,omitempty"`
	Ladder      *LadderData      `protobuf:"bytes,59,opt,name=Ladder" json:"Ladder,omitempty"`
	HeroSkin    *HeroSkinData    `protobuf:"bytes,60,opt,name=HeroSkin" json:"HeroSkin,omitempty"`
	WLevelDraw  *WLevelDrawData  `protobuf:"bytes,61,opt,name=WLevelDraw" json:"WLevelDraw,omitempty"`
	WarCup      *WarCupData      `protobuf:"bytes,62,opt,name=WarCup" json:"WarCup,omitempty"`
	WBoss       *WBossData       `protobuf:"bytes,63,opt,name=WBoss" json:"WBoss,omitempty"`
	Invite      *InviteData      `protobuf:"bytes,64,opt,name=Invite" json:"Invite,omitempty"`
}

func (m *GS_UserInfo) Reset()                    { *m = GS_UserInfo{} }
func (m *GS_UserInfo) String() string            { return proto.CompactTextString(m) }
func (*GS_UserInfo) ProtoMessage()               {}
func (*GS_UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{1} }

// 时间同步 (心跳)
type C_TimeSync struct {
}

func (m *C_TimeSync) Reset()                    { *m = C_TimeSync{} }
func (m *C_TimeSync) String() string            { return proto.CompactTextString(m) }
func (*C_TimeSync) ProtoMessage()               {}
func (*C_TimeSync) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{2} }

type GS_TimeSync_R struct {
	Ts int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (m *GS_TimeSync_R) Reset()                    { *m = GS_TimeSync_R{} }
func (m *GS_TimeSync_R) String() string            { return proto.CompactTextString(m) }
func (*GS_TimeSync_R) ProtoMessage()               {}
func (*GS_TimeSync_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{3} }

// 游戏数据配置重读通知
type GS_GameDataReloaded struct {
}

func (m *GS_GameDataReloaded) Reset()                    { *m = GS_GameDataReloaded{} }
func (m *GS_GameDataReloaded) String() string            { return proto.CompactTextString(m) }
func (*GS_GameDataReloaded) ProtoMessage()               {}
func (*GS_GameDataReloaded) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{4} }

// 登录后整合请求
type C_UserExtInfo struct {
}

func (m *C_UserExtInfo) Reset()                    { *m = C_UserExtInfo{} }
func (m *C_UserExtInfo) String() string            { return proto.CompactTextString(m) }
func (*C_UserExtInfo) ProtoMessage()               {}
func (*C_UserExtInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{5} }

type GS_UserExtInfo_R struct {
	GS_BillInfo_R       *GS_BillInfo_R       `protobuf:"bytes,1,opt,name=GS_BillInfo_R,json=GSBillInfoR" json:"GS_BillInfo_R,omitempty"`
	GS_ActStateGet_R    *GS_ActStateGet_R    `protobuf:"bytes,2,opt,name=GS_ActStateGet_R,json=GSActStateGetR" json:"GS_ActStateGet_R,omitempty"`
	GS_CrusadeGetInfo_R *GS_CrusadeGetInfo_R `protobuf:"bytes,3,opt,name=GS_CrusadeGetInfo_R,json=GSCrusadeGetInfoR" json:"GS_CrusadeGetInfo_R,omitempty"`
	GS_GuildInfoFull_R  *GS_GuildInfoFull_R  `protobuf:"bytes,4,opt,name=GS_GuildInfoFull_R,json=GSGuildInfoFullR" json:"GS_GuildInfoFull_R,omitempty"`
	GS_GWarGetSummary_R *GS_GWarGetSummary_R `protobuf:"bytes,5,opt,name=GS_GWarGetSummary_R,json=GSGWarGetSummaryR" json:"GS_GWarGetSummary_R,omitempty"`
}

func (m *GS_UserExtInfo_R) Reset()                    { *m = GS_UserExtInfo_R{} }
func (m *GS_UserExtInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_UserExtInfo_R) ProtoMessage()               {}
func (*GS_UserExtInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_10Login, []int{6} }

func init() {
	proto.RegisterType((*GS_LoginError)(nil), "msg.GS_LoginError")
	proto.RegisterType((*GS_UserInfo)(nil), "msg.GS_UserInfo")
	proto.RegisterType((*C_TimeSync)(nil), "msg.C_TimeSync")
	proto.RegisterType((*GS_TimeSync_R)(nil), "msg.GS_TimeSync_R")
	proto.RegisterType((*GS_GameDataReloaded)(nil), "msg.GS_GameDataReloaded")
	proto.RegisterType((*C_UserExtInfo)(nil), "msg.C_UserExtInfo")
	proto.RegisterType((*GS_UserExtInfo_R)(nil), "msg.GS_UserExtInfo_R")
}
func (m *GS_LoginError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LoginError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GS_UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.HFrame != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.HFrame))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Exp))
	}
	if m.CreateTs != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.CreateTs))
	}
	if m.IsNew {
		dAtA[i] = 0x48
		i++
		if m.IsNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LoginIP) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(len(m.LoginIP)))
		i += copy(dAtA[i:], m.LoginIP)
	}
	if m.OnlineDur != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.OnlineDur))
	}
	if m.SvrTs != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.SvrTs))
	}
	if len(m.GuildId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	if m.ForLoading != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.ForLoading.Size()))
		n1, err := m.ForLoading.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.AtkPwr != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.AtkPwr))
	}
	if m.Bag != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Bag.Size()))
		n2, err := m.Bag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Counter != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Counter.Size()))
		n3, err := m.Counter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.AttainTab != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.AttainTab.Size()))
		n4, err := m.AttainTab.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCGs_10Login(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MOpen != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.MOpen.Size()))
		n5, err := m.MOpen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Tutorial != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Tutorial.Size()))
		n6, err := m.Tutorial.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Misc != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Misc.Size()))
		n7, err := m.Misc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.TaskDaily != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TaskDaily.Size()))
		n8, err := m.TaskDaily.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.TaskAchv != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TaskAchv.Size()))
		n9, err := m.TaskAchv.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Draw != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Draw.Size()))
		n10, err := m.Draw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.WLevel != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.WLevel.Size()))
		n11, err := m.WLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Appoint != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Appoint.Size()))
		n12, err := m.Appoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Tower != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Tower.Size()))
		n13, err := m.Tower.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.TeamMgr != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TeamMgr.Size()))
		n14, err := m.TeamMgr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Arena != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Arena.Size()))
		n15, err := m.Arena.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.HFrameStore != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.HFrameStore.Size()))
		n16, err := m.HFrameStore.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.MarvelRoll != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.MarvelRoll.Size()))
		n17, err := m.MarvelRoll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Friend != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Friend.Size()))
		n18, err := m.Friend.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Vip != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Vip.Size()))
		n19, err := m.Vip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Chat != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Chat.Size()))
		n20, err := m.Chat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.MonthTicket != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.MonthTicket.Size()))
		n21, err := m.MonthTicket.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.PushGift != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.PushGift.Size()))
		n22, err := m.PushGift.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.GiftShop != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GiftShop.Size()))
		n23, err := m.GiftShop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.PrivCard != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.PrivCard.Size()))
		n24, err := m.PrivCard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.SignDaily != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.SignDaily.Size()))
		n25, err := m.SignDaily.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.TaskMonth != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TaskMonth.Size()))
		n26, err := m.TaskMonth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.DaySign != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.DaySign.Size()))
		n27, err := m.DaySign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.RankPlay != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.RankPlay.Size()))
		n28, err := m.RankPlay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.TargetDays != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TargetDays.Size()))
		n29, err := m.TargetDays.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.TaskGrow != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.TaskGrow.Size()))
		n30, err := m.TaskGrow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.WLevelFund != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.WLevelFund.Size()))
		n31, err := m.WLevelFund.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.GrowFund != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GrowFund.Size()))
		n32, err := m.GrowFund.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.BillFirst != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.BillFirst.Size()))
		n33, err := m.BillFirst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Lamp != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Lamp.Size()))
		n34, err := m.Lamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Gwar != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Gwar.Size()))
		n35, err := m.Gwar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Rift != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Rift.Size()))
		n36, err := m.Rift.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Ladder != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Ladder.Size()))
		n37, err := m.Ladder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.HeroSkin != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.HeroSkin.Size()))
		n38, err := m.HeroSkin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.WLevelDraw != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.WLevelDraw.Size()))
		n39, err := m.WLevelDraw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.WarCup != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.WarCup.Size()))
		n40, err := m.WarCup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.WBoss != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.WBoss.Size()))
		n41, err := m.WBoss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Invite != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Invite.Size()))
		n42, err := m.Invite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *C_TimeSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TimeSync) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_TimeSync_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TimeSync_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.Ts))
	}
	return i, nil
}

func (m *GS_GameDataReloaded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GameDataReloaded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *C_UserExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_UserExtInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_UserExtInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_UserExtInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GS_BillInfo_R != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GS_BillInfo_R.Size()))
		n43, err := m.GS_BillInfo_R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.GS_ActStateGet_R != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GS_ActStateGet_R.Size()))
		n44, err := m.GS_ActStateGet_R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.GS_CrusadeGetInfo_R != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GS_CrusadeGetInfo_R.Size()))
		n45, err := m.GS_CrusadeGetInfo_R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.GS_GuildInfoFull_R != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GS_GuildInfoFull_R.Size()))
		n46, err := m.GS_GuildInfoFull_R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.GS_GWarGetSummary_R != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCGs_10Login(dAtA, i, uint64(m.GS_GWarGetSummary_R.Size()))
		n47, err := m.GS_GWarGetSummary_R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func encodeVarintCGs_10Login(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GS_LoginError) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_10Login(uint64(m.ErrorCode))
	}
	return n
}

func (m *GS_UserInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.HFrame != 0 {
		n += 1 + sovCGs_10Login(uint64(m.HFrame))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_10Login(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_10Login(uint64(m.Exp))
	}
	if m.CreateTs != 0 {
		n += 1 + sovCGs_10Login(uint64(m.CreateTs))
	}
	if m.IsNew {
		n += 2
	}
	l = len(m.LoginIP)
	if l > 0 {
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.OnlineDur != 0 {
		n += 1 + sovCGs_10Login(uint64(m.OnlineDur))
	}
	if m.SvrTs != 0 {
		n += 1 + sovCGs_10Login(uint64(m.SvrTs))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.ForLoading != nil {
		l = m.ForLoading.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.AtkPwr != 0 {
		n += 2 + sovCGs_10Login(uint64(m.AtkPwr))
	}
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.AttainTab != nil {
		l = m.AttainTab.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 2 + l + sovCGs_10Login(uint64(l))
		}
	}
	if m.MOpen != nil {
		l = m.MOpen.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Tutorial != nil {
		l = m.Tutorial.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Misc != nil {
		l = m.Misc.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TaskDaily != nil {
		l = m.TaskDaily.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TaskAchv != nil {
		l = m.TaskAchv.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Draw != nil {
		l = m.Draw.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.WLevel != nil {
		l = m.WLevel.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Appoint != nil {
		l = m.Appoint.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Tower != nil {
		l = m.Tower.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TeamMgr != nil {
		l = m.TeamMgr.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Arena != nil {
		l = m.Arena.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.HFrameStore != nil {
		l = m.HFrameStore.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.MarvelRoll != nil {
		l = m.MarvelRoll.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Vip != nil {
		l = m.Vip.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.MonthTicket != nil {
		l = m.MonthTicket.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.PushGift != nil {
		l = m.PushGift.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.GiftShop != nil {
		l = m.GiftShop.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.PrivCard != nil {
		l = m.PrivCard.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.SignDaily != nil {
		l = m.SignDaily.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TaskMonth != nil {
		l = m.TaskMonth.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.DaySign != nil {
		l = m.DaySign.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.RankPlay != nil {
		l = m.RankPlay.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TargetDays != nil {
		l = m.TargetDays.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.TaskGrow != nil {
		l = m.TaskGrow.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.WLevelFund != nil {
		l = m.WLevelFund.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.GrowFund != nil {
		l = m.GrowFund.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.BillFirst != nil {
		l = m.BillFirst.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Lamp != nil {
		l = m.Lamp.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Gwar != nil {
		l = m.Gwar.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Rift != nil {
		l = m.Rift.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Ladder != nil {
		l = m.Ladder.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.HeroSkin != nil {
		l = m.HeroSkin.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.WLevelDraw != nil {
		l = m.WLevelDraw.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.WarCup != nil {
		l = m.WarCup.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.WBoss != nil {
		l = m.WBoss.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	if m.Invite != nil {
		l = m.Invite.Size()
		n += 2 + l + sovCGs_10Login(uint64(l))
	}
	return n
}

func (m *C_TimeSync) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_TimeSync_R) Size() (n int) {
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovCGs_10Login(uint64(m.Ts))
	}
	return n
}

func (m *GS_GameDataReloaded) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *C_UserExtInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_UserExtInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.GS_BillInfo_R != nil {
		l = m.GS_BillInfo_R.Size()
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.GS_ActStateGet_R != nil {
		l = m.GS_ActStateGet_R.Size()
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.GS_CrusadeGetInfo_R != nil {
		l = m.GS_CrusadeGetInfo_R.Size()
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.GS_GuildInfoFull_R != nil {
		l = m.GS_GuildInfoFull_R.Size()
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	if m.GS_GWarGetSummary_R != nil {
		l = m.GS_GWarGetSummary_R.Size()
		n += 1 + l + sovCGs_10Login(uint64(l))
	}
	return n
}

func sovCGs_10Login(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_10Login(x uint64) (n int) {
	return sovCGs_10Login(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GS_LoginError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LoginError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LoginError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HFrame", wireType)
			}
			m.HFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HFrame |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTs", wireType)
			}
			m.CreateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNew = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineDur", wireType)
			}
			m.OnlineDur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineDur |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrTs", wireType)
			}
			m.SvrTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForLoading", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForLoading == nil {
				m.ForLoading = &ForLoading{}
			}
			if err := m.ForLoading.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkPwr", wireType)
			}
			m.AtkPwr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtkPwr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &BagData{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &CounterData{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttainTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttainTab == nil {
				m.AttainTab = &AttainTabData{}
			}
			if err := m.AttainTab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &Mail{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MOpen == nil {
				m.MOpen = &MOpenData{}
			}
			if err := m.MOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tutorial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tutorial == nil {
				m.Tutorial = &TutorialData{}
			}
			if err := m.Tutorial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Misc == nil {
				m.Misc = &MiscData{}
			}
			if err := m.Misc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDaily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskDaily == nil {
				m.TaskDaily = &TaskDailyData{}
			}
			if err := m.TaskDaily.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskAchv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskAchv == nil {
				m.TaskAchv = &TaskAchvData{}
			}
			if err := m.TaskAchv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draw == nil {
				m.Draw = &DrawData{}
			}
			if err := m.Draw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WLevel == nil {
				m.WLevel = &WLevelData{}
			}
			if err := m.WLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Appoint == nil {
				m.Appoint = &AppointData{}
			}
			if err := m.Appoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tower == nil {
				m.Tower = &TowerData{}
			}
			if err := m.Tower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMgr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMgr == nil {
				m.TeamMgr = &TeamMgrData{}
			}
			if err := m.TeamMgr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arena == nil {
				m.Arena = &ArenaData{}
			}
			if err := m.Arena.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HFrameStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HFrameStore == nil {
				m.HFrameStore = &HFrameStoreData{}
			}
			if err := m.HFrameStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarvelRoll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarvelRoll == nil {
				m.MarvelRoll = &MarvelRollData{}
			}
			if err := m.MarvelRoll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &FriendData{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vip == nil {
				m.Vip = &VipData{}
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &ChatData{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthTicket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonthTicket == nil {
				m.MonthTicket = &MonthTicketData{}
			}
			if err := m.MonthTicket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushGift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PushGift == nil {
				m.PushGift = &PushGiftData{}
			}
			if err := m.PushGift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftShop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftShop == nil {
				m.GiftShop = &GiftShopData{}
			}
			if err := m.GiftShop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivCard == nil {
				m.PrivCard = &PrivCardData{}
			}
			if err := m.PrivCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignDaily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignDaily == nil {
				m.SignDaily = &SignDailyData{}
			}
			if err := m.SignDaily.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskMonth == nil {
				m.TaskMonth = &TaskMonthData{}
			}
			if err := m.TaskMonth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaySign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DaySign == nil {
				m.DaySign = &DaySignData{}
			}
			if err := m.DaySign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankPlay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankPlay == nil {
				m.RankPlay = &RankPlayData{}
			}
			if err := m.RankPlay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetDays == nil {
				m.TargetDays = &TargetDaysData{}
			}
			if err := m.TargetDays.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskGrow == nil {
				m.TaskGrow = &TaskGrowData{}
			}
			if err := m.TaskGrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WLevelFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WLevelFund == nil {
				m.WLevelFund = &WLevelFundData{}
			}
			if err := m.WLevelFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrowFund == nil {
				m.GrowFund = &GrowFundData{}
			}
			if err := m.GrowFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFirst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillFirst == nil {
				m.BillFirst = &BillFirstData{}
			}
			if err := m.BillFirst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lamp == nil {
				m.Lamp = &LampData{}
			}
			if err := m.Lamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gwar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gwar == nil {
				m.Gwar = &GWarData{}
			}
			if err := m.Gwar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rift == nil {
				m.Rift = &RiftData{}
			}
			if err := m.Rift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ladder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ladder == nil {
				m.Ladder = &LadderData{}
			}
			if err := m.Ladder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSkin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeroSkin == nil {
				m.HeroSkin = &HeroSkinData{}
			}
			if err := m.HeroSkin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WLevelDraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WLevelDraw == nil {
				m.WLevelDraw = &WLevelDrawData{}
			}
			if err := m.WLevelDraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarCup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WarCup == nil {
				m.WarCup = &WarCupData{}
			}
			if err := m.WarCup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WBoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WBoss == nil {
				m.WBoss = &WBossData{}
			}
			if err := m.WBoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invite == nil {
				m.Invite = &InviteData{}
			}
			if err := m.Invite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TimeSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TimeSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TimeSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TimeSync_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TimeSync_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TimeSync_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GameDataReloaded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GameDataReloaded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GameDataReloaded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_UserExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_UserExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_UserExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_UserExtInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_UserExtInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_UserExtInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GS_BillInfo_R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GS_BillInfo_R == nil {
				m.GS_BillInfo_R = &GS_BillInfo_R{}
			}
			if err := m.GS_BillInfo_R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GS_ActStateGet_R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GS_ActStateGet_R == nil {
				m.GS_ActStateGet_R = &GS_ActStateGet_R{}
			}
			if err := m.GS_ActStateGet_R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GS_CrusadeGetInfo_R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GS_CrusadeGetInfo_R == nil {
				m.GS_CrusadeGetInfo_R = &GS_CrusadeGetInfo_R{}
			}
			if err := m.GS_CrusadeGetInfo_R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GS_GuildInfoFull_R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GS_GuildInfoFull_R == nil {
				m.GS_GuildInfoFull_R = &GS_GuildInfoFull_R{}
			}
			if err := m.GS_GuildInfoFull_R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GS_GWarGetSummary_R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GS_GWarGetSummary_R == nil {
				m.GS_GWarGetSummary_R = &GS_GWarGetSummary_R{}
			}
			if err := m.GS_GWarGetSummary_R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_10Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_10Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_10Login(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_10Login
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_10Login
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_10Login
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_10Login
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_10Login(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_10Login = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_10Login   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.10.login.proto", fileDescriptorCGs_10Login) }

var fileDescriptorCGs_10Login = []byte{
	// 1634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x96, 0x6d, 0x73, 0x1b, 0xb7,
	0x11, 0xc7, 0x23, 0xc9, 0xb2, 0x2d, 0xc8, 0x76, 0xa4, 0xb3, 0xec, 0x20, 0x9e, 0x56, 0x56, 0xd8,
	0xb4, 0x51, 0x1f, 0x8c, 0xf0, 0x59, 0x72, 0x9f, 0x52, 0x89, 0xb2, 0xce, 0x9a, 0x91, 0x12, 0xcd,
	0x91, 0xb5, 0x5f, 0x72, 0xa0, 0xbb, 0xd3, 0x11, 0xc3, 0x7b, 0x1a, 0x1c, 0x48, 0x46, 0xdf, 0xa2,
	0xef, 0xfa, 0x95, 0xf2, 0xb2, 0x1f, 0xa1, 0x75, 0x67, 0xfa, 0x39, 0x3a, 0xbb, 0xc0, 0x91, 0x80,
	0xf2, 0x8a, 0xd8, 0x1f, 0xfe, 0x58, 0xee, 0x2e, 0x16, 0x38, 0x90, 0xe7, 0xe1, 0x38, 0xa9, 0x58,
	0xab, 0xc9, 0xd2, 0x22, 0x11, 0x39, 0x2b, 0x65, 0xa1, 0x0a, 0x6f, 0x23, 0xab, 0x92, 0x57, 0x24,
	0x29, 0x92, 0x42, 0x83, 0x57, 0x2f, 0x50, 0xd5, 0x6c, 0xb2, 0x4a, 0xc9, 0x59, 0xa8, 0x2a, 0x83,
	0x77, 0xf5, 0xe2, 0x16, 0x2b, 0x53, 0x69, 0x90, 0xf1, 0xd7, 0x7e, 0xd3, 0x62, 0x37, 0x3c, 0x31,
	0xd0, 0xd3, 0xb0, 0xc3, 0x32, 0x2e, 0x52, 0xc3, 0x5e, 0x6a, 0xd6, 0x63, 0x6a, 0xa6, 0x0a, 0x29,
	0x78, 0xea, 0xfa, 0xec, 0x33, 0x1e, 0x2a, 0x83, 0xbe, 0xd0, 0xe8, 0x88, 0x71, 0xa5, 0xb8, 0xc8,
	0x15, 0xbf, 0x71, 0xfd, 0x1e, 0xb3, 0x1b, 0x91, 0xa6, 0x2e, 0x7b, 0xcb, 0x32, 0x51, 0x85, 0x4e,
	0x50, 0xed, 0x26, 0x4b, 0x66, 0x22, 0x8d, 0x5c, 0xd8, 0x62, 0x59, 0x51, 0xc6, 0xb9, 0x93, 0x68,
	0xbb, 0xc3, 0xc2, 0x62, 0x96, 0xab, 0x58, 0x3a, 0x4e, 0xdb, 0x5d, 0x26, 0x79, 0x3e, 0x75, 0xa2,
	0x6a, 0xf7, 0x99, 0xe2, 0xd5, 0x34, 0xe2, 0x22, 0xbd, 0x73, 0x32, 0x6b, 0x1f, 0xe1, 0x04, 0x0f,
	0x27, 0x73, 0xd7, 0xc9, 0x31, 0x8b, 0x24, 0x5f, 0x18, 0xb6, 0xa7, 0xd9, 0x5b, 0xb6, 0x48, 0xe3,
	0x79, 0x9c, 0x3a, 0x51, 0x74, 0x9a, 0x8c, 0x97, 0x65, 0x21, 0x72, 0xe5, 0x44, 0xdc, 0x69, 0x31,
	0x55, 0x2c, 0x96, 0xa1, 0x19, 0x6d, 0x9b, 0xa9, 0x98, 0x67, 0x59, 0xe2, 0xee, 0x43, 0xa7, 0xc3,
	0xb8, 0x8c, 0x73, 0x6e, 0x20, 0xd5, 0xb0, 0xc7, 0x32, 0x2e, 0xe7, 0x71, 0x2a, 0x8b, 0x65, 0xd5,
	0x74, 0x1c, 0x9d, 0x3e, 0xbb, 0x95, 0x22, 0xce, 0x23, 0xd7, 0xf7, 0x11, 0x0b, 0xe5, 0xac, 0xe2,
	0x51, 0xec, 0x6c, 0x51, 0xe7, 0x98, 0xcd, 0x45, 0xe9, 0xe4, 0xd6, 0x6d, 0xb1, 0x70, 0xc2, 0xeb,
	0x70, 0xbf, 0xd4, 0xac, 0xcd, 0xb2, 0x22, 0x57, 0x13, 0x25, 0xc2, 0x69, 0xac, 0x9c, 0x12, 0x75,
	0x3b, 0xac, 0x9c, 0x55, 0x93, 0x44, 0xdc, 0xde, 0xe3, 0x5d, 0x06, 0xac, 0x9a, 0x14, 0xa5, 0xcb,
	0x7b, 0xac, 0x94, 0x62, 0x1e, 0x72, 0x19, 0x39, 0x7b, 0xd0, 0xed, 0xb3, 0x4a, 0x24, 0xb9, 0xbd,
	0x07, 0x66, 0x42, 0xef, 0x01, 0xfe, 0xbf, 0x93, 0x52, 0xf7, 0x98, 0x45, 0xfc, 0x0e, 0x16, 0x39,
	0x95, 0xe9, 0xbe, 0x65, 0x8a, 0xcb, 0x24, 0x56, 0x30, 0xe9, 0xfc, 0x75, 0xaf, 0x89, 0x9e, 0x12,
	0x59, 0x2c, 0x9c, 0x15, 0xbd, 0x96, 0xd9, 0xb9, 0xdb, 0xd9, 0xb2, 0x6a, 0x66, 0x45, 0x9b, 0x81,
	0xda, 0xe2, 0x3a, 0xa6, 0x5e, 0x07, 0xbb, 0xf5, 0x56, 0xc8, 0x4a, 0x39, 0xc5, 0xeb, 0x75, 0x59,
	0xca, 0x33, 0xb7, 0xa0, 0xbd, 0x1e, 0x4b, 0x16, 0xdc, 0xed, 0xc2, 0x5e, 0x9f, 0xc9, 0x55, 0xc5,
	0xf4, 0xc6, 0xf5, 0x8e, 0x58, 0xca, 0xa3, 0x68, 0xd9, 0x14, 0x26, 0x84, 0x63, 0x36, 0x89, 0x65,
	0x51, 0x4d, 0x85, 0x9b, 0x66, 0xaf, 0x6e, 0xb7, 0x9f, 0x35, 0x62, 0xbf, 0xc9, 0x16, 0x5c, 0x86,
	0xb3, 0xd2, 0xe9, 0xa2, 0x7e, 0x8b, 0x2d, 0x6e, 0x8a, 0xaa, 0x72, 0xa5, 0x6d, 0x26, 0xf2, 0xb9,
	0x50, 0xa6, 0x29, 0x1a, 0x6f, 0xc8, 0x53, 0x7f, 0x38, 0xbe, 0x84, 0x5b, 0xe4, 0x9d, 0x94, 0x85,
	0xf4, 0x7e, 0x41, 0xb6, 0x70, 0x30, 0x28, 0xa2, 0x98, 0xae, 0x1d, 0xac, 0x1d, 0x6e, 0x06, 0x2b,
	0xd0, 0xf8, 0xe7, 0x2e, 0xd9, 0xf6, 0x87, 0xe3, 0xbf, 0x57, 0xb1, 0xbc, 0xc8, 0x6f, 0x0b, 0xef,
	0x25, 0x79, 0x88, 0xe3, 0x08, 0xa5, 0x5b, 0x81, 0xb1, 0x3c, 0x8f, 0x3c, 0xf8, 0x9e, 0x67, 0x31,
	0x5d, 0x47, 0x8a, 0x63, 0x60, 0xef, 0x63, 0x1e, 0xd1, 0x07, 0x9a, 0xc1, 0x18, 0xd6, 0xbf, 0x3f,
	0x97, 0xa0, 0xdc, 0xc4, 0xbf, 0x32, 0x96, 0xf7, 0x8c, 0xac, 0x5f, 0xce, 0xe9, 0x43, 0x64, 0xeb,
	0x97, 0x73, 0x6f, 0x87, 0x6c, 0xbc, 0xfb, 0xb1, 0xa4, 0x8f, 0x10, 0xc0, 0xd0, 0x7b, 0x45, 0x1e,
	0x0f, 0x64, 0xcc, 0x55, 0x3c, 0xaa, 0xe8, 0xe3, 0x83, 0xb5, 0xc3, 0x8d, 0x60, 0x69, 0x7b, 0x7b,
	0x64, 0xf3, 0xa2, 0xfa, 0x3e, 0x5e, 0xd0, 0xad, 0x83, 0xb5, 0xc3, 0xc7, 0x81, 0x36, 0x3c, 0x4a,
	0x1e, 0x61, 0x9e, 0x17, 0xd7, 0x94, 0x60, 0x08, 0xb5, 0x09, 0x39, 0xff, 0x90, 0xa7, 0x22, 0x8f,
	0xcf, 0x66, 0x92, 0x6e, 0xeb, 0x9c, 0x97, 0x00, 0xbc, 0x0d, 0xe7, 0x72, 0x54, 0xd1, 0x27, 0xf8,
	0x37, 0xda, 0x00, 0x6f, 0x3e, 0x5c, 0x4b, 0x17, 0x11, 0x7d, 0xaa, 0xbd, 0x19, 0xd3, 0xfb, 0x96,
	0x90, 0xf3, 0x42, 0x5e, 0x16, 0x3c, 0x12, 0x79, 0x42, 0x77, 0x0e, 0xd6, 0x0e, 0xb7, 0xdb, 0x9f,
	0xb3, 0xac, 0x4a, 0xd8, 0x0a, 0x07, 0x96, 0x04, 0x8a, 0x70, 0xa2, 0xa6, 0xd7, 0x0b, 0x49, 0x77,
	0x75, 0x11, 0xb4, 0xe5, 0xed, 0x93, 0x8d, 0x53, 0x9e, 0xd0, 0xe7, 0xe8, 0xe1, 0x09, 0x7a, 0x38,
	0xe5, 0xc9, 0x19, 0x57, 0x3c, 0x80, 0x09, 0xef, 0x77, 0xe4, 0xd1, 0x40, 0xdf, 0x77, 0x74, 0x0f,
	0x35, 0x3b, 0xa8, 0x31, 0x0c, 0x75, 0xb5, 0xc0, 0x6b, 0x92, 0xad, 0x13, 0xbc, 0x86, 0x47, 0xfc,
	0x86, 0xbe, 0x40, 0xb5, 0x87, 0xea, 0x25, 0x45, 0xfd, 0x4a, 0xe4, 0xbd, 0x26, 0x9b, 0x57, 0x5c,
	0xa4, 0x15, 0x7d, 0x79, 0xb0, 0x71, 0xb8, 0xdd, 0xde, 0x42, 0x35, 0x90, 0x40, 0x73, 0xef, 0x6b,
	0xb2, 0x79, 0xf5, 0x43, 0x19, 0xe7, 0x94, 0xa2, 0xbb, 0x67, 0x5a, 0x00, 0x04, 0x5d, 0xe9, 0x49,
	0xef, 0x0d, 0x79, 0x3c, 0x32, 0x9f, 0x0a, 0xfa, 0x25, 0x0a, 0x77, 0x51, 0x58, 0x43, 0xd4, 0x2e,
	0x25, 0xde, 0x57, 0xe4, 0xc1, 0x95, 0xa8, 0x42, 0xfa, 0x0a, 0xa5, 0x4f, 0xb5, 0x4f, 0x51, 0x85,
	0x28, 0xc3, 0x29, 0x48, 0x65, 0xc4, 0xab, 0xe9, 0x19, 0xdc, 0x1b, 0xf4, 0x97, 0x56, 0x2a, 0x4b,
	0xaa, 0x53, 0x59, 0x9a, 0x18, 0x03, 0xaf, 0xa6, 0x27, 0xe1, 0x64, 0x4e, 0xf7, 0xed, 0x18, 0x0c,
	0x34, 0x31, 0x18, 0x0b, 0x62, 0x38, 0x93, 0x7c, 0x41, 0x5f, 0x5b, 0x31, 0x00, 0xd0, 0x31, 0xc0,
	0xc8, 0xfb, 0x86, 0x3c, 0xfc, 0x78, 0x09, 0x67, 0x91, 0x1e, 0x58, 0xfb, 0xab, 0x11, 0xca, 0xcc,
	0x34, 0xec, 0xd1, 0x89, 0xfe, 0x1a, 0xd0, 0xaf, 0xac, 0x3d, 0x32, 0x4c, 0xef, 0x91, 0x31, 0xa0,
	0xa0, 0x23, 0xf8, 0x44, 0xd0, 0x86, 0x55, 0x50, 0x24, 0xba, 0xa0, 0x38, 0x04, 0x8f, 0xa3, 0x98,
	0x67, 0x57, 0x89, 0xa4, 0xbf, 0xb2, 0x3c, 0x1a, 0xa6, 0x3d, 0x1a, 0x03, 0x3c, 0x9e, 0xc0, 0x87,
	0x84, 0x7e, 0x6d, 0x79, 0x44, 0xa2, 0x3d, 0xe2, 0xd0, 0xeb, 0x93, 0x6d, 0x7d, 0xec, 0x86, 0xaa,
	0x90, 0x31, 0xfd, 0x35, 0x6a, 0xf7, 0x50, 0x6b, 0x71, 0x5c, 0x61, 0x0b, 0xbd, 0x0e, 0x21, 0x57,
	0xf8, 0x45, 0x0a, 0x8a, 0x34, 0xa5, 0xbf, 0xc1, 0x65, 0xcf, 0x4d, 0x9b, 0xd4, 0x18, 0x57, 0x59,
	0x32, 0xa8, 0xdc, 0x39, 0x7e, 0xac, 0xe8, 0x37, 0xf6, 0xc9, 0x40, 0xa4, 0x2b, 0xa7, 0xc7, 0xd0,
	0xfd, 0x1f, 0x44, 0x49, 0x0f, 0xad, 0xee, 0xff, 0x20, 0x4a, 0xdd, 0xfd, 0x1f, 0x44, 0x09, 0xbb,
	0x34, 0x98, 0x70, 0x45, 0x7f, 0x6b, 0xed, 0x12, 0x00, 0xbd, 0x4b, 0x30, 0x82, 0xc4, 0xae, 0xe0,
	0x23, 0x32, 0xc2, 0x8f, 0x18, 0xfd, 0xbd, 0x95, 0x98, 0xc5, 0x75, 0x62, 0x16, 0x80, 0x7e, 0xb9,
	0x9e, 0x55, 0x13, 0x5f, 0xdc, 0x2a, 0xfa, 0x07, 0xab, 0x5f, 0x6a, 0xa8, 0xfb, 0xa5, 0xb6, 0x40,
	0x0e, 0xbf, 0xc3, 0x49, 0x51, 0xd2, 0x37, 0x96, 0xbc, 0x86, 0x5a, 0x5e, 0x5b, 0xe8, 0x5d, 0x8a,
	0xf9, 0x80, 0xcb, 0x88, 0x32, 0xdb, 0xbb, 0x81, 0xc6, 0xbb, 0xb1, 0xa0, 0xdd, 0x87, 0x22, 0xc9,
	0x75, 0xbb, 0x7f, 0x6b, 0xb5, 0xfb, 0x92, 0xea, 0x76, 0x5f, 0x9a, 0xf5, 0x01, 0xc1, 0x8c, 0x68,
	0xf3, 0xde, 0x01, 0x41, 0xba, 0x3a, 0x20, 0x68, 0x42, 0x4f, 0x9d, 0xf1, 0x3b, 0xf0, 0x40, 0x5b,
	0x56, 0x4f, 0x19, 0xa6, 0x7b, 0xca, 0x18, 0x10, 0x7e, 0xc0, 0xf3, 0xe9, 0x75, 0xca, 0xef, 0x68,
	0xdb, 0x0a, 0xbf, 0x86, 0x3a, 0xfc, 0xda, 0x82, 0x26, 0x19, 0xe1, 0xc7, 0xf9, 0x8c, 0xdf, 0x55,
	0xb4, 0x63, 0x35, 0xc9, 0x0a, 0xeb, 0x26, 0x59, 0xd9, 0xf5, 0x81, 0xf5, 0x65, 0xb1, 0xa0, 0xdd,
	0x7b, 0x07, 0x16, 0xe0, 0xea, 0xc0, 0x82, 0x05, 0xff, 0xa1, 0x8f, 0xdb, 0xf9, 0x2c, 0x8f, 0x68,
	0xcf, 0xfa, 0x8f, 0x15, 0xd6, 0xff, 0xb1, 0xb2, 0x71, 0xd7, 0x64, 0xb1, 0xc0, 0x25, 0x7d, 0x7b,
	0xd7, 0x0c, 0x34, 0xbb, 0x66, 0x2c, 0x28, 0xea, 0xa9, 0x48, 0xd3, 0x73, 0x78, 0x00, 0xd0, 0x23,
	0xab, 0xa8, 0x4b, 0xaa, 0x8b, 0xba, 0x34, 0xa1, 0x41, 0x2f, 0x79, 0x56, 0xd2, 0x63, 0xab, 0x41,
	0x01, 0xe8, 0x06, 0x85, 0x11, 0x48, 0xfc, 0x05, 0x97, 0xf4, 0xad, 0x25, 0xf1, 0x3f, 0x72, 0x7d,
	0x8a, 0x71, 0x0a, 0x24, 0x01, 0xf4, 0xe1, 0x1f, 0x2d, 0x49, 0x50, 0xf7, 0x20, 0x4e, 0xc1, 0x91,
	0xba, 0xc4, 0x67, 0x04, 0xfd, 0x93, 0x75, 0xa4, 0x34, 0xd2, 0x47, 0x4a, 0x8f, 0x21, 0xe5, 0xf7,
	0xb1, 0x2c, 0x86, 0x53, 0x91, 0xd3, 0x3f, 0x5b, 0x29, 0xd7, 0x50, 0xa7, 0x5c, 0x5b, 0xab, 0xb2,
	0xe2, 0x6d, 0xf8, 0x97, 0x9f, 0x95, 0x75, 0x79, 0x27, 0x5a, 0x32, 0xbc, 0x19, 0xb9, 0x1c, 0xcc,
	0x4a, 0xfa, 0x57, 0xfb, 0x66, 0x44, 0x64, 0x6e, 0x46, 0x1c, 0xc3, 0xdd, 0xf4, 0xf1, 0xb4, 0xa8,
	0x2a, 0xfa, 0x9d, 0x75, 0x37, 0x21, 0xd1, 0x77, 0x13, 0x0e, 0xc1, 0xdd, 0x05, 0xbe, 0x57, 0xe8,
	0xdf, 0x2c, 0x77, 0x1a, 0x69, 0x77, 0x7a, 0xdc, 0x78, 0x42, 0xc8, 0x60, 0x3c, 0x12, 0x59, 0x3c,
	0xbc, 0xcb, 0xc3, 0xc6, 0x6b, 0x7c, 0xd6, 0xd4, 0xe6, 0x38, 0x80, 0x07, 0xc5, 0xa8, 0xc2, 0x47,
	0xca, 0x46, 0xb0, 0x3e, 0xaa, 0x1a, 0x2f, 0xc8, 0x73, 0x7f, 0x38, 0xf6, 0x79, 0xa6, 0xbd, 0xc4,
	0x69, 0xc1, 0xa3, 0x38, 0x6a, 0x7c, 0x4e, 0x9e, 0x0e, 0xf0, 0x75, 0xf3, 0xee, 0x47, 0x05, 0x0f,
	0x9c, 0xc6, 0xff, 0xd6, 0xc9, 0x8e, 0x79, 0xf0, 0x18, 0x34, 0x0e, 0xbc, 0x3e, 0x7a, 0x87, 0x9d,
	0xd6, 0x00, 0xfd, 0xd6, 0xfd, 0xe0, 0xcc, 0x04, 0xdb, 0xfe, 0xb0, 0xb6, 0x02, 0xef, 0x3b, 0xf4,
	0x75, 0x12, 0xaa, 0xa1, 0xe2, 0x2a, 0xf6, 0x63, 0x35, 0x0e, 0xf0, 0x85, 0xb4, 0xdd, 0x7e, 0x51,
	0x2f, 0x75, 0x26, 0x83, 0x67, 0xfe, 0xd0, 0x02, 0x81, 0xf7, 0x1e, 0xa3, 0x1e, 0xe8, 0x67, 0xbd,
	0x1f, 0x9b, 0x78, 0xe8, 0x06, 0xfa, 0xa0, 0xb5, 0x8f, 0xfb, 0xf3, 0xc1, 0xae, 0x3f, 0x74, 0x59,
	0xe0, 0xbd, 0x23, 0x1e, 0xe4, 0x8f, 0x4f, 0x96, 0xfc, 0xb6, 0x38, 0x9f, 0xa5, 0xe9, 0x38, 0xc0,
	0xa7, 0xd9, 0x76, 0xfb, 0x8b, 0xda, 0xd1, 0xbd, 0xe9, 0x60, 0xc7, 0x1f, 0x3a, 0xa8, 0x0e, 0x08,
	0x5a, 0xd6, 0x8f, 0xd5, 0x70, 0x96, 0x65, 0x5c, 0xde, 0x8d, 0x03, 0x7c, 0xcc, 0x59, 0x01, 0xdd,
	0x9f, 0x87, 0x80, 0x5c, 0x16, 0x9c, 0xee, 0xfd, 0xf4, 0x9f, 0xfd, 0xcf, 0x7e, 0xfa, 0xb4, 0xbf,
	0xf6, 0xaf, 0x4f, 0xfb, 0x6b, 0xff, 0xfe, 0xb4, 0xbf, 0xf6, 0x8f, 0xff, 0xee, 0x7f, 0x76, 0xf3,
	0x10, 0x5f, 0xa9, 0x9d, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x40, 0xc9, 0xae, 0x58, 0xf0, 0x0e,
	0x00, 0x00,
}
