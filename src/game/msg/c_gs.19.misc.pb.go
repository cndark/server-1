// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.19.misc.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MiscData struct {
	FreeRename     bool                 `protobuf:"varint,1,opt,name=FreeRename,proto3" json:"FreeRename,omitempty"`
	SvrOpenTs      int64                `protobuf:"varint,2,opt,name=SvrOpenTs,proto3" json:"SvrOpenTs,omitempty"`
	GldLeaveTs     int64                `protobuf:"varint,3,opt,name=GldLeaveTs,proto3" json:"GldLeaveTs,omitempty"`
	GldLeaveCnt    int32                `protobuf:"varint,4,opt,name=GldLeaveCnt,proto3" json:"GldLeaveCnt,omitempty"`
	GoldenHandCrit float32              `protobuf:"fixed32,5,opt,name=GoldenHandCrit,proto3" json:"GoldenHandCrit,omitempty"`
	OnlineBoxId    int32                `protobuf:"varint,6,opt,name=OnlineBoxId,proto3" json:"OnlineBoxId,omitempty"`
	OnlineBoxDur   int64                `protobuf:"varint,7,opt,name=OnlineBoxDur,proto3" json:"OnlineBoxDur,omitempty"`
	GldActGift     []*MiscGldActGiftOne `protobuf:"bytes,8,rep,name=GldActGift" json:"GldActGift,omitempty"`
}

func (m *MiscData) Reset()                    { *m = MiscData{} }
func (m *MiscData) String() string            { return proto.CompactTextString(m) }
func (*MiscData) ProtoMessage()               {}
func (*MiscData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{0} }

type MiscGldActGiftOne struct {
	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *MiscGldActGiftOne) Reset()                    { *m = MiscGldActGiftOne{} }
func (m *MiscGldActGiftOne) String() string            { return proto.CompactTextString(m) }
func (*MiscGldActGiftOne) ProtoMessage()               {}
func (*MiscGldActGiftOne) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{1} }

// 获得家族活动礼包
type GS_MiscGldActGift struct {
	One *MiscGldActGiftOne `protobuf:"bytes,1,opt,name=One" json:"One,omitempty"`
}

func (m *GS_MiscGldActGift) Reset()                    { *m = GS_MiscGldActGift{} }
func (m *GS_MiscGldActGift) String() string            { return proto.CompactTextString(m) }
func (*GS_MiscGldActGift) ProtoMessage()               {}
func (*GS_MiscGldActGift) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{2} }

type C_MiscBillLocal struct {
	J string `protobuf:"bytes,1,opt,name=J,proto3" json:"J,omitempty"`
}

func (m *C_MiscBillLocal) Reset()                    { *m = C_MiscBillLocal{} }
func (m *C_MiscBillLocal) String() string            { return proto.CompactTextString(m) }
func (*C_MiscBillLocal) ProtoMessage()               {}
func (*C_MiscBillLocal) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{3} }

type GS_MiscBillLocal_R struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	R         string `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *GS_MiscBillLocal_R) Reset()                    { *m = GS_MiscBillLocal_R{} }
func (m *GS_MiscBillLocal_R) String() string            { return proto.CompactTextString(m) }
func (*GS_MiscBillLocal_R) ProtoMessage()               {}
func (*GS_MiscBillLocal_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{4} }

// 礼包码兑换
type C_GiftExchange struct {
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *C_GiftExchange) Reset()                    { *m = C_GiftExchange{} }
func (m *C_GiftExchange) String() string            { return proto.CompactTextString(m) }
func (*C_GiftExchange) ProtoMessage()               {}
func (*C_GiftExchange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{5} }

type GS_GiftExchange_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GiftExchange_R) Reset()                    { *m = GS_GiftExchange_R{} }
func (m *GS_GiftExchange_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GiftExchange_R) ProtoMessage()               {}
func (*GS_GiftExchange_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{6} }

// 跳过新手
type C_MiscSkipTutorial struct {
}

func (m *C_MiscSkipTutorial) Reset()                    { *m = C_MiscSkipTutorial{} }
func (m *C_MiscSkipTutorial) String() string            { return proto.CompactTextString(m) }
func (*C_MiscSkipTutorial) ProtoMessage()               {}
func (*C_MiscSkipTutorial) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{7} }

type GS_MiscSkipTutorial_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_MiscSkipTutorial_R) Reset()                    { *m = GS_MiscSkipTutorial_R{} }
func (m *GS_MiscSkipTutorial_R) String() string            { return proto.CompactTextString(m) }
func (*GS_MiscSkipTutorial_R) ProtoMessage()               {}
func (*GS_MiscSkipTutorial_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{8} }

// 点金手
type C_MiscGoldenHand struct {
}

func (m *C_MiscGoldenHand) Reset()                    { *m = C_MiscGoldenHand{} }
func (m *C_MiscGoldenHand) String() string            { return proto.CompactTextString(m) }
func (*C_MiscGoldenHand) ProtoMessage()               {}
func (*C_MiscGoldenHand) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{9} }

type GS_MiscGoldenHand_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
	NextCrit  float32  `protobuf:"fixed32,3,opt,name=NextCrit,proto3" json:"NextCrit,omitempty"`
}

func (m *GS_MiscGoldenHand_R) Reset()                    { *m = GS_MiscGoldenHand_R{} }
func (m *GS_MiscGoldenHand_R) String() string            { return proto.CompactTextString(m) }
func (*GS_MiscGoldenHand_R) ProtoMessage()               {}
func (*GS_MiscGoldenHand_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{10} }

// 在线宝箱
type C_MiscOnlineBoxTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_MiscOnlineBoxTake) Reset()                    { *m = C_MiscOnlineBoxTake{} }
func (m *C_MiscOnlineBoxTake) String() string            { return proto.CompactTextString(m) }
func (*C_MiscOnlineBoxTake) ProtoMessage()               {}
func (*C_MiscOnlineBoxTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{11} }

type GS_MiscOnlineBoxTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_MiscOnlineBoxTake_R) Reset()         { *m = GS_MiscOnlineBoxTake_R{} }
func (m *GS_MiscOnlineBoxTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_MiscOnlineBoxTake_R) ProtoMessage()    {}
func (*GS_MiscOnlineBoxTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_19Misc, []int{12}
}

// 分享游戏
type C_MiscSharedGame struct {
	Tp int32 `protobuf:"varint,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
}

func (m *C_MiscSharedGame) Reset()                    { *m = C_MiscSharedGame{} }
func (m *C_MiscSharedGame) String() string            { return proto.CompactTextString(m) }
func (*C_MiscSharedGame) ProtoMessage()               {}
func (*C_MiscSharedGame) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{13} }

type GS_MiscSharedGame_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_MiscSharedGame_R) Reset()                    { *m = GS_MiscSharedGame_R{} }
func (m *GS_MiscSharedGame_R) String() string            { return proto.CompactTextString(m) }
func (*GS_MiscSharedGame_R) ProtoMessage()               {}
func (*GS_MiscSharedGame_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{14} }

// 领取家族活动分享礼包
type C_MiscGldActGiftTake struct {
	Idx int32 `protobuf:"varint,1,opt,name=Idx,proto3" json:"Idx,omitempty"`
}

func (m *C_MiscGldActGiftTake) Reset()                    { *m = C_MiscGldActGiftTake{} }
func (m *C_MiscGldActGiftTake) String() string            { return proto.CompactTextString(m) }
func (*C_MiscGldActGiftTake) ProtoMessage()               {}
func (*C_MiscGldActGiftTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_19Misc, []int{15} }

type GS_MiscGldActGiftTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_MiscGldActGiftTake_R) Reset()         { *m = GS_MiscGldActGiftTake_R{} }
func (m *GS_MiscGldActGiftTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_MiscGldActGiftTake_R) ProtoMessage()    {}
func (*GS_MiscGldActGiftTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_19Misc, []int{16}
}

func init() {
	proto.RegisterType((*MiscData)(nil), "msg.MiscData")
	proto.RegisterType((*MiscGldActGiftOne)(nil), "msg.MiscGldActGiftOne")
	proto.RegisterType((*GS_MiscGldActGift)(nil), "msg.GS_MiscGldActGift")
	proto.RegisterType((*C_MiscBillLocal)(nil), "msg.C_MiscBillLocal")
	proto.RegisterType((*GS_MiscBillLocal_R)(nil), "msg.GS_MiscBillLocal_R")
	proto.RegisterType((*C_GiftExchange)(nil), "msg.C_GiftExchange")
	proto.RegisterType((*GS_GiftExchange_R)(nil), "msg.GS_GiftExchange_R")
	proto.RegisterType((*C_MiscSkipTutorial)(nil), "msg.C_MiscSkipTutorial")
	proto.RegisterType((*GS_MiscSkipTutorial_R)(nil), "msg.GS_MiscSkipTutorial_R")
	proto.RegisterType((*C_MiscGoldenHand)(nil), "msg.C_MiscGoldenHand")
	proto.RegisterType((*GS_MiscGoldenHand_R)(nil), "msg.GS_MiscGoldenHand_R")
	proto.RegisterType((*C_MiscOnlineBoxTake)(nil), "msg.C_MiscOnlineBoxTake")
	proto.RegisterType((*GS_MiscOnlineBoxTake_R)(nil), "msg.GS_MiscOnlineBoxTake_R")
	proto.RegisterType((*C_MiscSharedGame)(nil), "msg.C_MiscSharedGame")
	proto.RegisterType((*GS_MiscSharedGame_R)(nil), "msg.GS_MiscSharedGame_R")
	proto.RegisterType((*C_MiscGldActGiftTake)(nil), "msg.C_MiscGldActGiftTake")
	proto.RegisterType((*GS_MiscGldActGiftTake_R)(nil), "msg.GS_MiscGldActGiftTake_R")
}
func (m *MiscData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiscData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FreeRename {
		dAtA[i] = 0x8
		i++
		if m.FreeRename {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SvrOpenTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.SvrOpenTs))
	}
	if m.GldLeaveTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.GldLeaveTs))
	}
	if m.GldLeaveCnt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.GldLeaveCnt))
	}
	if m.GoldenHandCrit != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GoldenHandCrit))))
		i += 4
	}
	if m.OnlineBoxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.OnlineBoxId))
	}
	if m.OnlineBoxDur != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.OnlineBoxDur))
	}
	if len(m.GldActGift) > 0 {
		for _, msg := range m.GldActGift {
			dAtA[i] = 0x42
			i++
			i = encodeVarintCGs_19Misc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MiscGldActGiftOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiscGldActGiftOne) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GS_MiscGldActGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscGldActGift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.One != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.One.Size()))
		n1, err := m.One.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_MiscBillLocal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscBillLocal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(len(m.J)))
		i += copy(dAtA[i:], m.J)
	}
	return i, nil
}

func (m *GS_MiscBillLocal_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscBillLocal_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.R) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	return i, nil
}

func (m *C_GiftExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GiftExchange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *GS_GiftExchange_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GiftExchange_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Rewards.Size()))
		n2, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C_MiscSkipTutorial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscSkipTutorial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_MiscSkipTutorial_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscSkipTutorial_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_MiscGoldenHand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscGoldenHand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_MiscGoldenHand_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscGoldenHand_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NextCrit != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NextCrit))))
		i += 4
	}
	return i, nil
}

func (m *C_MiscOnlineBoxTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscOnlineBoxTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_MiscOnlineBoxTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscOnlineBoxTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C_MiscSharedGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscSharedGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Tp))
	}
	return i, nil
}

func (m *GS_MiscSharedGame_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscSharedGame_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_MiscGldActGiftTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MiscGldActGiftTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Idx))
	}
	return i, nil
}

func (m *GS_MiscGldActGiftTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MiscGldActGiftTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_19Misc(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintCGs_19Misc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MiscData) Size() (n int) {
	var l int
	_ = l
	if m.FreeRename {
		n += 2
	}
	if m.SvrOpenTs != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.SvrOpenTs))
	}
	if m.GldLeaveTs != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.GldLeaveTs))
	}
	if m.GldLeaveCnt != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.GldLeaveCnt))
	}
	if m.GoldenHandCrit != 0 {
		n += 5
	}
	if m.OnlineBoxId != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.OnlineBoxId))
	}
	if m.OnlineBoxDur != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.OnlineBoxDur))
	}
	if len(m.GldActGift) > 0 {
		for _, e := range m.GldActGift {
			l = e.Size()
			n += 1 + l + sovCGs_19Misc(uint64(l))
		}
	}
	return n
}

func (m *MiscGldActGiftOne) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *GS_MiscGldActGift) Size() (n int) {
	var l int
	_ = l
	if m.One != nil {
		l = m.One.Size()
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *C_MiscBillLocal) Size() (n int) {
	var l int
	_ = l
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *GS_MiscBillLocal_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *C_GiftExchange) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *GS_GiftExchange_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *C_MiscSkipTutorial) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_MiscSkipTutorial_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_MiscGoldenHand) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_MiscGoldenHand_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	if m.NextCrit != 0 {
		n += 5
	}
	return n
}

func (m *C_MiscOnlineBoxTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.Id))
	}
	return n
}

func (m *GS_MiscOnlineBoxTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func (m *C_MiscSharedGame) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.Tp))
	}
	return n
}

func (m *GS_MiscSharedGame_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_MiscGldActGiftTake) Size() (n int) {
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.Idx))
	}
	return n
}

func (m *GS_MiscGldActGiftTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_19Misc(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_19Misc(uint64(l))
	}
	return n
}

func sovCGs_19Misc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_19Misc(x uint64) (n int) {
	return sovCGs_19Misc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MiscData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiscData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiscData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeRename", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeRename = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrOpenTs", wireType)
			}
			m.SvrOpenTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrOpenTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GldLeaveTs", wireType)
			}
			m.GldLeaveTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GldLeaveTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GldLeaveCnt", wireType)
			}
			m.GldLeaveCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GldLeaveCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldenHandCrit", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GoldenHandCrit = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineBoxId", wireType)
			}
			m.OnlineBoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineBoxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineBoxDur", wireType)
			}
			m.OnlineBoxDur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineBoxDur |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GldActGift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GldActGift = append(m.GldActGift, &MiscGldActGiftOne{})
			if err := m.GldActGift[len(m.GldActGift)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiscGldActGiftOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiscGldActGiftOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiscGldActGiftOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscGldActGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscGldActGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscGldActGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field One", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.One == nil {
				m.One = &MiscGldActGiftOne{}
			}
			if err := m.One.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscBillLocal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscBillLocal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscBillLocal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscBillLocal_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscBillLocal_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscBillLocal_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GiftExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GiftExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GiftExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GiftExchange_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GiftExchange_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GiftExchange_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscSkipTutorial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscSkipTutorial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscSkipTutorial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscSkipTutorial_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscSkipTutorial_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscSkipTutorial_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscGoldenHand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscGoldenHand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscGoldenHand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscGoldenHand_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscGoldenHand_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscGoldenHand_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCrit", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NextCrit = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscOnlineBoxTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscOnlineBoxTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscOnlineBoxTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscOnlineBoxTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscOnlineBoxTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscOnlineBoxTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscSharedGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscSharedGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscSharedGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscSharedGame_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscSharedGame_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscSharedGame_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MiscGldActGiftTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MiscGldActGiftTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MiscGldActGiftTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MiscGldActGiftTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MiscGldActGiftTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MiscGldActGiftTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_19Misc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_19Misc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_19Misc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_19Misc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_19Misc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_19Misc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_19Misc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_19Misc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_19Misc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_19Misc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.19.misc.proto", fileDescriptorCGs_19Misc) }

var fileDescriptorCGs_19Misc = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0xad, 0xed, 0xa6, 0x4d, 0x6e, 0xa2, 0xbc, 0x76, 0x9a, 0xf6, 0x59, 0x11, 0x32, 0xd6, 0x08,
	0x2a, 0xaf, 0xac, 0xd2, 0x0a, 0x10, 0x0b, 0x24, 0x88, 0x5b, 0x42, 0xaa, 0xd2, 0x48, 0x13, 0x6f,
	0xd8, 0x10, 0x19, 0x7b, 0x70, 0xad, 0x3a, 0x76, 0x34, 0x76, 0xda, 0x7c, 0x06, 0x9f, 0xc2, 0x67,
	0x74, 0xc9, 0x27, 0x40, 0xf8, 0x11, 0x34, 0x63, 0xc7, 0x71, 0x1a, 0xa1, 0x6c, 0xb2, 0x9b, 0x39,
	0x73, 0xee, 0x9d, 0x73, 0x8f, 0xcf, 0x18, 0x90, 0x3b, 0xf4, 0x13, 0xf3, 0xc5, 0x1b, 0x73, 0x14,
	0x24, 0xae, 0x39, 0x66, 0x71, 0x1a, 0x23, 0x65, 0x94, 0xf8, 0x6d, 0xf0, 0x63, 0x3f, 0xce, 0x80,
	0xf6, 0xa1, 0x20, 0x9d, 0x9c, 0x98, 0x49, 0xca, 0x26, 0x6e, 0x9a, 0x64, 0x30, 0xfe, 0x21, 0x43,
	0xf5, 0x53, 0x90, 0xb8, 0xe7, 0x4e, 0xea, 0x20, 0x0d, 0xe0, 0x03, 0xa3, 0x94, 0xd0, 0xc8, 0x19,
	0x51, 0x55, 0xd2, 0x25, 0xa3, 0x4a, 0x4a, 0x08, 0x7a, 0x02, 0xb5, 0xc1, 0x1d, 0xeb, 0x8f, 0x69,
	0x64, 0x27, 0xaa, 0xac, 0x4b, 0x86, 0x42, 0x16, 0x00, 0xaf, 0xee, 0x86, 0xde, 0x15, 0x75, 0xee,
	0xa8, 0x9d, 0xa8, 0x8a, 0x38, 0x2e, 0x21, 0x48, 0x87, 0xfa, 0x7c, 0x67, 0x45, 0xa9, 0xba, 0xad,
	0x4b, 0x46, 0x85, 0x94, 0x21, 0x74, 0x0c, 0xcd, 0x6e, 0x1c, 0x7a, 0x34, 0xfa, 0xe8, 0x44, 0x9e,
	0xc5, 0x82, 0x54, 0xad, 0xe8, 0x92, 0x21, 0x93, 0x47, 0x28, 0xef, 0xd4, 0x8f, 0xc2, 0x20, 0xa2,
	0x9d, 0x78, 0xda, 0xf3, 0xd4, 0x9d, 0xac, 0x53, 0x09, 0x42, 0x18, 0x1a, 0xc5, 0xf6, 0x7c, 0xc2,
	0xd4, 0x5d, 0xa1, 0x66, 0x09, 0x43, 0xaf, 0x84, 0xde, 0xf7, 0x6e, 0xda, 0x0d, 0xbe, 0xa5, 0x6a,
	0x55, 0x57, 0x8c, 0xfa, 0xe9, 0x91, 0x39, 0x4a, 0x7c, 0x93, 0x1b, 0xb2, 0x38, 0xea, 0x47, 0x94,
	0x94, 0x98, 0xf8, 0x35, 0xec, 0xaf, 0x10, 0x50, 0x13, 0xe4, 0x9e, 0x27, 0x2c, 0xab, 0x10, 0xb9,
	0xe7, 0x21, 0x04, 0xdb, 0xd7, 0xdc, 0x44, 0xee, 0x52, 0x8d, 0x88, 0x35, 0x7e, 0x0b, 0xfb, 0xdd,
	0xc1, 0x70, 0xb9, 0x16, 0x19, 0xa0, 0xf4, 0xa3, 0xcc, 0xec, 0x7f, 0x5f, 0xcf, 0x29, 0xf8, 0x29,
	0xfc, 0x67, 0x89, 0xea, 0x4e, 0x10, 0x86, 0x57, 0xb1, 0xeb, 0x84, 0xa8, 0x01, 0xd2, 0xa5, 0x28,
	0xad, 0x11, 0xe9, 0x12, 0xbf, 0x03, 0x94, 0xf7, 0x2f, 0x18, 0x43, 0xc2, 0x3f, 0xda, 0x05, 0x63,
	0x31, 0xb3, 0x62, 0x8f, 0xe6, 0x02, 0x17, 0x00, 0xef, 0x40, 0x72, 0x91, 0x12, 0xc1, 0xcf, 0xa0,
	0x69, 0x0d, 0xf9, 0xa5, 0x17, 0x53, 0xf7, 0xc6, 0x89, 0x7c, 0xca, 0xe7, 0x28, 0x0a, 0x6b, 0x44,
	0xac, 0xf1, 0x67, 0x31, 0x47, 0x99, 0xb6, 0xf6, 0x9a, 0x63, 0xd8, 0x25, 0xf4, 0xde, 0x61, 0x5e,
	0x96, 0x9b, 0xfa, 0x69, 0x43, 0x4c, 0x9a, 0x63, 0x64, 0x7e, 0x88, 0x5b, 0x80, 0xb2, 0x19, 0x07,
	0xb7, 0xc1, 0xd8, 0x9e, 0xa4, 0x31, 0x0b, 0x9c, 0x10, 0xbf, 0x84, 0xc3, 0x7c, 0xb0, 0x32, 0xbc,
	0xee, 0x52, 0x8c, 0x60, 0x2f, 0x6b, 0xb6, 0x88, 0x0f, 0xbe, 0x87, 0x83, 0xf9, 0x37, 0x28, 0xc0,
	0x4d, 0xa9, 0x47, 0x6d, 0xa8, 0x5e, 0xd3, 0x69, 0x2a, 0x92, 0xab, 0x88, 0xe4, 0x16, 0x7b, 0xfc,
	0x1c, 0x0e, 0x32, 0x31, 0x45, 0x06, 0x6d, 0xe7, 0x76, 0x25, 0x37, 0xf8, 0x0b, 0x1c, 0xe5, 0xfa,
	0x96, 0x78, 0x1b, 0x33, 0x18, 0xcf, 0x3d, 0x19, 0xdc, 0x38, 0x8c, 0x7a, 0x5d, 0xfe, 0xac, 0x9b,
	0x20, 0xdb, 0xe3, 0xb9, 0x06, 0x7b, 0x8c, 0xcf, 0x0a, 0x8f, 0x16, 0xa4, 0xb5, 0x66, 0x1b, 0xd0,
	0xb2, 0x1e, 0x65, 0x5b, 0x0c, 0xb8, 0x07, 0x4a, 0xcf, 0x9b, 0xe6, 0x7c, 0xbe, 0xc4, 0x43, 0xf8,
	0x7f, 0xe5, 0x19, 0x6c, 0x72, 0xc6, 0x4e, 0xeb, 0xe1, 0xb7, 0xb6, 0xf5, 0x30, 0xd3, 0xa4, 0x9f,
	0x33, 0x4d, 0xfa, 0x35, 0xd3, 0xa4, 0xef, 0x7f, 0xb4, 0xad, 0xaf, 0x3b, 0xe2, 0x87, 0x77, 0xf6,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x0b, 0x31, 0xb6, 0x2e, 0x05, 0x00, 0x00,
}
