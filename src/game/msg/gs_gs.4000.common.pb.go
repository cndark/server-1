// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gs_gs.4000.common.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// gs-push
type GS_Push struct {
	EvtName string   `protobuf:"bytes,1,opt,name=EvtName,proto3" json:"EvtName,omitempty"`
	SArg    []string `protobuf:"bytes,2,rep,name=SArg" json:"SArg,omitempty"`
	OArg    []byte   `protobuf:"bytes,3,opt,name=OArg,proto3" json:"OArg,omitempty"`
}

func (m *GS_Push) Reset()                    { *m = GS_Push{} }
func (m *GS_Push) String() string            { return proto.CompactTextString(m) }
func (*GS_Push) ProtoMessage()               {}
func (*GS_Push) Descriptor() ([]byte, []int) { return fileDescriptorGsGs_4000Common, []int{0} }

// gs-pull
type GS_Pull struct {
	Tk       int64    `protobuf:"varint,1,opt,name=Tk,proto3" json:"Tk,omitempty"`
	SrcSvrId int32    `protobuf:"varint,2,opt,name=SrcSvrId,proto3" json:"SrcSvrId,omitempty"`
	EvtName  string   `protobuf:"bytes,3,opt,name=EvtName,proto3" json:"EvtName,omitempty"`
	SArg     []string `protobuf:"bytes,4,rep,name=SArg" json:"SArg,omitempty"`
	OArg     []byte   `protobuf:"bytes,5,opt,name=OArg,proto3" json:"OArg,omitempty"`
}

func (m *GS_Pull) Reset()                    { *m = GS_Pull{} }
func (m *GS_Pull) String() string            { return proto.CompactTextString(m) }
func (*GS_Pull) ProtoMessage()               {}
func (*GS_Pull) Descriptor() ([]byte, []int) { return fileDescriptorGsGs_4000Common, []int{1} }

type GS_Pull_R struct {
	Tk        int64  `protobuf:"varint,1,opt,name=Tk,proto3" json:"Tk,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    []byte `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *GS_Pull_R) Reset()                    { *m = GS_Pull_R{} }
func (m *GS_Pull_R) String() string            { return proto.CompactTextString(m) }
func (*GS_Pull_R) ProtoMessage()               {}
func (*GS_Pull_R) Descriptor() ([]byte, []int) { return fileDescriptorGsGs_4000Common, []int{2} }

func init() {
	proto.RegisterType((*GS_Push)(nil), "msg.GS_Push")
	proto.RegisterType((*GS_Pull)(nil), "msg.GS_Pull")
	proto.RegisterType((*GS_Pull_R)(nil), "msg.GS_Pull_R")
}
func (m *GS_Push) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Push) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EvtName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(len(m.EvtName)))
		i += copy(dAtA[i:], m.EvtName)
	}
	if len(m.SArg) > 0 {
		for _, s := range m.SArg {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.OArg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(len(m.OArg)))
		i += copy(dAtA[i:], m.OArg)
	}
	return i, nil
}

func (m *GS_Pull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Pull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tk != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(m.Tk))
	}
	if m.SrcSvrId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(m.SrcSvrId))
	}
	if len(m.EvtName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(len(m.EvtName)))
		i += copy(dAtA[i:], m.EvtName)
	}
	if len(m.SArg) > 0 {
		for _, s := range m.SArg {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.OArg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(len(m.OArg)))
		i += copy(dAtA[i:], m.OArg)
	}
	return i, nil
}

func (m *GS_Pull_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Pull_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tk != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(m.Tk))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGsGs_4000Common(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func encodeVarintGsGs_4000Common(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GS_Push) Size() (n int) {
	var l int
	_ = l
	l = len(m.EvtName)
	if l > 0 {
		n += 1 + l + sovGsGs_4000Common(uint64(l))
	}
	if len(m.SArg) > 0 {
		for _, s := range m.SArg {
			l = len(s)
			n += 1 + l + sovGsGs_4000Common(uint64(l))
		}
	}
	l = len(m.OArg)
	if l > 0 {
		n += 1 + l + sovGsGs_4000Common(uint64(l))
	}
	return n
}

func (m *GS_Pull) Size() (n int) {
	var l int
	_ = l
	if m.Tk != 0 {
		n += 1 + sovGsGs_4000Common(uint64(m.Tk))
	}
	if m.SrcSvrId != 0 {
		n += 1 + sovGsGs_4000Common(uint64(m.SrcSvrId))
	}
	l = len(m.EvtName)
	if l > 0 {
		n += 1 + l + sovGsGs_4000Common(uint64(l))
	}
	if len(m.SArg) > 0 {
		for _, s := range m.SArg {
			l = len(s)
			n += 1 + l + sovGsGs_4000Common(uint64(l))
		}
	}
	l = len(m.OArg)
	if l > 0 {
		n += 1 + l + sovGsGs_4000Common(uint64(l))
	}
	return n
}

func (m *GS_Pull_R) Size() (n int) {
	var l int
	_ = l
	if m.Tk != 0 {
		n += 1 + sovGsGs_4000Common(uint64(m.Tk))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovGsGs_4000Common(uint64(m.ErrorCode))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGsGs_4000Common(uint64(l))
	}
	return n
}

func sovGsGs_4000Common(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGsGs_4000Common(x uint64) (n int) {
	return sovGsGs_4000Common(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GS_Push) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGsGs_4000Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvtName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvtName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SArg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SArg = append(m.SArg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OArg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OArg = append(m.OArg[:0], dAtA[iNdEx:postIndex]...)
			if m.OArg == nil {
				m.OArg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGsGs_4000Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Pull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGsGs_4000Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Pull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Pull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tk", wireType)
			}
			m.Tk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSvrId", wireType)
			}
			m.SrcSvrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcSvrId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvtName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvtName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SArg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SArg = append(m.SArg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OArg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OArg = append(m.OArg[:0], dAtA[iNdEx:postIndex]...)
			if m.OArg == nil {
				m.OArg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGsGs_4000Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Pull_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGsGs_4000Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Pull_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Pull_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tk", wireType)
			}
			m.Tk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGsGs_4000Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGsGs_4000Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGsGs_4000Common(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGsGs_4000Common
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGsGs_4000Common
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGsGs_4000Common
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGsGs_4000Common
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGsGs_4000Common(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGsGs_4000Common = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGsGs_4000Common   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gs_gs.4000.common.proto", fileDescriptorGsGs_4000Common) }

var fileDescriptorGsGs_4000Common = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2f, 0x8e, 0x4f,
	0x2f, 0xd6, 0x33, 0x31, 0x30, 0x30, 0xd0, 0x4b, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08,
	0x28, 0x79, 0x73, 0xb1, 0xbb, 0x07, 0xc7, 0x07, 0x94, 0x16, 0x67, 0x08, 0x49, 0x70, 0xb1, 0xbb,
	0x96, 0x95, 0xf8, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42,
	0x42, 0x5c, 0x2c, 0xc1, 0x8e, 0x45, 0xe9, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x60, 0x36,
	0x48, 0xcc, 0x1f, 0x24, 0xc6, 0xac, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0x66, 0x2b, 0x95, 0x43, 0x0d,
	0xcb, 0xc9, 0x11, 0xe2, 0xe3, 0x62, 0x0a, 0xc9, 0x06, 0x9b, 0xc3, 0x1c, 0xc4, 0x14, 0x92, 0x2d,
	0x24, 0xc5, 0xc5, 0x11, 0x5c, 0x94, 0x1c, 0x5c, 0x56, 0xe4, 0x99, 0x22, 0xc1, 0xa4, 0xc0, 0xa8,
	0xc1, 0x1a, 0x04, 0xe7, 0x23, 0x5b, 0xcc, 0x8c, 0xdd, 0x62, 0x16, 0x2c, 0x16, 0xb3, 0x22, 0x59,
	0x1c, 0xc8, 0xc5, 0x09, 0xb5, 0x38, 0x3e, 0x08, 0xc3, 0x6a, 0x19, 0x2e, 0x4e, 0xd7, 0xa2, 0xa2,
	0xfc, 0x22, 0xe7, 0xfc, 0x94, 0x54, 0xa8, 0xdd, 0x08, 0x01, 0x21, 0x31, 0x2e, 0xb6, 0xa0, 0xd4,
	0xe2, 0xd2, 0x9c, 0x12, 0xa8, 0x4f, 0xa0, 0x3c, 0x27, 0x91, 0x13, 0x0f, 0xe5, 0x18, 0x4e, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x92,
	0xd8, 0xc0, 0xa1, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x0e, 0xde, 0xc8, 0x61, 0x01,
	0x00, 0x00,
}
