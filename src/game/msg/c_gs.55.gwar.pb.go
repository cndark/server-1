// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.55.gwar.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GWarData struct {
}

func (m *GWarData) Reset()                    { *m = GWarData{} }
func (m *GWarData) String() string            { return proto.CompactTextString(m) }
func (*GWarData) ProtoMessage()               {}
func (*GWarData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{0} }

type GWarGuildBase struct {
	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon   int32  `protobuf:"varint,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Lv     int32  `protobuf:"varint,4,opt,name=Lv,proto3" json:"Lv,omitempty"`
	N      int32  `protobuf:"varint,5,opt,name=N,proto3" json:"N,omitempty"`
	ApMean int32  `protobuf:"varint,6,opt,name=ApMean,proto3" json:"ApMean,omitempty"`
	ApMax  int32  `protobuf:"varint,7,opt,name=ApMax,proto3" json:"ApMax,omitempty"`
	SvrId  int32  `protobuf:"varint,8,opt,name=SvrId,proto3" json:"SvrId,omitempty"`
	Jf     int32  `protobuf:"varint,9,opt,name=Jf,proto3" json:"Jf,omitempty"`
}

func (m *GWarGuildBase) Reset()                    { *m = GWarGuildBase{} }
func (m *GWarGuildBase) String() string            { return proto.CompactTextString(m) }
func (*GWarGuildBase) ProtoMessage()               {}
func (*GWarGuildBase) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{1} }

type GWarGuildMember struct {
	Plr  *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Val  int32             `protobuf:"varint,2,opt,name=Val,proto3" json:"Val,omitempty"`
	Done bool              `protobuf:"varint,3,opt,name=Done,proto3" json:"Done,omitempty"`
}

func (m *GWarGuildMember) Reset()                    { *m = GWarGuildMember{} }
func (m *GWarGuildMember) String() string            { return proto.CompactTextString(m) }
func (*GWarGuildMember) ProtoMessage()               {}
func (*GWarGuildMember) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{2} }

type GWarGuildRankRow struct {
	Id    string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon  int32  `protobuf:"varint,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Lv    int32  `protobuf:"varint,4,opt,name=Lv,proto3" json:"Lv,omitempty"`
	SvrId int32  `protobuf:"varint,5,opt,name=SvrId,proto3" json:"SvrId,omitempty"`
	Jf    int32  `protobuf:"varint,6,opt,name=Jf,proto3" json:"Jf,omitempty"`
}

func (m *GWarGuildRankRow) Reset()                    { *m = GWarGuildRankRow{} }
func (m *GWarGuildRankRow) String() string            { return proto.CompactTextString(m) }
func (*GWarGuildRankRow) ProtoMessage()               {}
func (*GWarGuildRankRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{3} }

type GWarPlrRankRow struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Cnt int32             `protobuf:"varint,2,opt,name=Cnt,proto3" json:"Cnt,omitempty"`
	Jf  int32             `protobuf:"varint,3,opt,name=Jf,proto3" json:"Jf,omitempty"`
}

func (m *GWarPlrRankRow) Reset()                    { *m = GWarPlrRankRow{} }
func (m *GWarPlrRankRow) String() string            { return proto.CompactTextString(m) }
func (*GWarPlrRankRow) ProtoMessage()               {}
func (*GWarPlrRankRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{4} }

type GS_GWarStageChange struct {
	Stage int32 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2   int64 `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *GS_GWarStageChange) Reset()                    { *m = GS_GWarStageChange{} }
func (m *GS_GWarStageChange) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarStageChange) ProtoMessage()               {}
func (*GS_GWarStageChange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{5} }

type GS_GWarNewG2 struct {
}

func (m *GS_GWarNewG2) Reset()                    { *m = GS_GWarNewG2{} }
func (m *GS_GWarNewG2) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarNewG2) ProtoMessage()               {}
func (*GS_GWarNewG2) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{6} }

// 获取概要信息
type C_GWarGetSummary struct {
}

func (m *C_GWarGetSummary) Reset()                    { *m = C_GWarGetSummary{} }
func (m *C_GWarGetSummary) String() string            { return proto.CompactTextString(m) }
func (*C_GWarGetSummary) ProtoMessage()               {}
func (*C_GWarGetSummary) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{7} }

type GS_GWarGetSummary_R struct {
	Stage int32          `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2   int64          `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
	G2    *GWarGuildBase `protobuf:"bytes,3,opt,name=G2" json:"G2,omitempty"`
	G1Jf  int32          `protobuf:"varint,4,opt,name=G1Jf,proto3" json:"G1Jf,omitempty"`
}

func (m *GS_GWarGetSummary_R) Reset()                    { *m = GS_GWarGetSummary_R{} }
func (m *GS_GWarGetSummary_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarGetSummary_R) ProtoMessage()               {}
func (*GS_GWarGetSummary_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{8} }

// 获取对手公会成员信息
type C_GWarGetG2Members struct {
}

func (m *C_GWarGetG2Members) Reset()                    { *m = C_GWarGetG2Members{} }
func (m *C_GWarGetG2Members) String() string            { return proto.CompactTextString(m) }
func (*C_GWarGetG2Members) ProtoMessage()               {}
func (*C_GWarGetG2Members) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{9} }

type GS_GWarGetG2Members_R struct {
	ErrorCode int32              `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Mbs       []*GWarGuildMember `protobuf:"bytes,2,rep,name=Mbs" json:"Mbs,omitempty"`
}

func (m *GS_GWarGetG2Members_R) Reset()                    { *m = GS_GWarGetG2Members_R{} }
func (m *GS_GWarGetG2Members_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarGetG2Members_R) ProtoMessage()               {}
func (*GS_GWarGetG2Members_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{10} }

// 拉取公会榜
type C_GWarGetGuildRank struct {
}

func (m *C_GWarGetGuildRank) Reset()                    { *m = C_GWarGetGuildRank{} }
func (m *C_GWarGetGuildRank) String() string            { return proto.CompactTextString(m) }
func (*C_GWarGetGuildRank) ProtoMessage()               {}
func (*C_GWarGetGuildRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{11} }

type GS_GWarGetGuildRank_R struct {
	Records []*GWarGuildRankRow `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_GWarGetGuildRank_R) Reset()                    { *m = GS_GWarGetGuildRank_R{} }
func (m *GS_GWarGetGuildRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarGetGuildRank_R) ProtoMessage()               {}
func (*GS_GWarGetGuildRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{12} }

// 拉取玩家榜
type C_GWarGetPlrRank struct {
}

func (m *C_GWarGetPlrRank) Reset()                    { *m = C_GWarGetPlrRank{} }
func (m *C_GWarGetPlrRank) String() string            { return proto.CompactTextString(m) }
func (*C_GWarGetPlrRank) ProtoMessage()               {}
func (*C_GWarGetPlrRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{13} }

type GS_GWarGetPlrRank_R struct {
	ErrorCode int32             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Records   []*GWarPlrRankRow `protobuf:"bytes,2,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_GWarGetPlrRank_R) Reset()                    { *m = GS_GWarGetPlrRank_R{} }
func (m *GS_GWarGetPlrRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarGetPlrRank_R) ProtoMessage()               {}
func (*GS_GWarGetPlrRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{14} }

// 打架
type C_GWarFight struct {
	TarId string         `protobuf:"bytes,1,opt,name=TarId,proto3" json:"TarId,omitempty"`
	Team  *TeamFormation `protobuf:"bytes,2,opt,name=Team" json:"Team,omitempty"`
}

func (m *C_GWarFight) Reset()                    { *m = C_GWarFight{} }
func (m *C_GWarFight) String() string            { return proto.CompactTextString(m) }
func (*C_GWarFight) ProtoMessage()               {}
func (*C_GWarFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{15} }

type GS_GWarFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	JfAdd     int32         `protobuf:"varint,3,opt,name=JfAdd,proto3" json:"JfAdd,omitempty"`
	Val       int32         `protobuf:"varint,4,opt,name=Val,proto3" json:"Val,omitempty"`
	Done      bool          `protobuf:"varint,5,opt,name=Done,proto3" json:"Done,omitempty"`
}

func (m *GS_GWarFight_R) Reset()                    { *m = GS_GWarFight_R{} }
func (m *GS_GWarFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GWarFight_R) ProtoMessage()               {}
func (*GS_GWarFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_55Gwar, []int{16} }

func init() {
	proto.RegisterType((*GWarData)(nil), "msg.GWarData")
	proto.RegisterType((*GWarGuildBase)(nil), "msg.GWarGuildBase")
	proto.RegisterType((*GWarGuildMember)(nil), "msg.GWarGuildMember")
	proto.RegisterType((*GWarGuildRankRow)(nil), "msg.GWarGuildRankRow")
	proto.RegisterType((*GWarPlrRankRow)(nil), "msg.GWarPlrRankRow")
	proto.RegisterType((*GS_GWarStageChange)(nil), "msg.GS_GWarStageChange")
	proto.RegisterType((*GS_GWarNewG2)(nil), "msg.GS_GWarNewG2")
	proto.RegisterType((*C_GWarGetSummary)(nil), "msg.C_GWarGetSummary")
	proto.RegisterType((*GS_GWarGetSummary_R)(nil), "msg.GS_GWarGetSummary_R")
	proto.RegisterType((*C_GWarGetG2Members)(nil), "msg.C_GWarGetG2Members")
	proto.RegisterType((*GS_GWarGetG2Members_R)(nil), "msg.GS_GWarGetG2Members_R")
	proto.RegisterType((*C_GWarGetGuildRank)(nil), "msg.C_GWarGetGuildRank")
	proto.RegisterType((*GS_GWarGetGuildRank_R)(nil), "msg.GS_GWarGetGuildRank_R")
	proto.RegisterType((*C_GWarGetPlrRank)(nil), "msg.C_GWarGetPlrRank")
	proto.RegisterType((*GS_GWarGetPlrRank_R)(nil), "msg.GS_GWarGetPlrRank_R")
	proto.RegisterType((*C_GWarFight)(nil), "msg.C_GWarFight")
	proto.RegisterType((*GS_GWarFight_R)(nil), "msg.GS_GWarFight_R")
}
func (m *GWarData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWarData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GWarGuildBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWarGuildBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Icon))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Lv))
	}
	if m.N != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.N))
	}
	if m.ApMean != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.ApMean))
	}
	if m.ApMax != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.ApMax))
	}
	if m.SvrId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.SvrId))
	}
	if m.Jf != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Jf))
	}
	return i, nil
}

func (m *GWarGuildMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWarGuildMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Plr.Size()))
		n1, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Val != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Val))
	}
	if m.Done {
		dAtA[i] = 0x18
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GWarGuildRankRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWarGuildRankRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Icon))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Lv))
	}
	if m.SvrId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.SvrId))
	}
	if m.Jf != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Jf))
	}
	return i, nil
}

func (m *GWarPlrRankRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWarPlrRankRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Plr.Size()))
		n2, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Cnt))
	}
	if m.Jf != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Jf))
	}
	return i, nil
}

func (m *GS_GWarStageChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarStageChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *GS_GWarNewG2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarNewG2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *C_GWarGetSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GWarGetSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GWarGetSummary_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarGetSummary_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Ts2))
	}
	if m.G2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.G2.Size()))
		n3, err := m.G2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.G1Jf != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.G1Jf))
	}
	return i, nil
}

func (m *C_GWarGetG2Members) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GWarGetG2Members) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GWarGetG2Members_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarGetG2Members_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Mbs) > 0 {
		for _, msg := range m.Mbs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_55Gwar(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GWarGetGuildRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GWarGetGuildRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GWarGetGuildRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarGetGuildRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_55Gwar(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GWarGetPlrRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GWarGetPlrRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GWarGetPlrRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarGetPlrRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_55Gwar(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GWarFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GWarFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TarId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(len(m.TarId)))
		i += copy(dAtA[i:], m.TarId)
	}
	if m.Team != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Team.Size()))
		n4, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GS_GWarFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GWarFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Replay.Size()))
		n5, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.JfAdd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.JfAdd))
	}
	if m.Val != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_55Gwar(dAtA, i, uint64(m.Val))
	}
	if m.Done {
		dAtA[i] = 0x28
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintCGs_55Gwar(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GWarData) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GWarGuildBase) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Icon))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Lv))
	}
	if m.N != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.N))
	}
	if m.ApMean != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.ApMean))
	}
	if m.ApMax != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.ApMax))
	}
	if m.SvrId != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.SvrId))
	}
	if m.Jf != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Jf))
	}
	return n
}

func (m *GWarGuildMember) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Val))
	}
	if m.Done {
		n += 2
	}
	return n
}

func (m *GWarGuildRankRow) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Icon))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Lv))
	}
	if m.SvrId != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.SvrId))
	}
	if m.Jf != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Jf))
	}
	return n
}

func (m *GWarPlrRankRow) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Cnt))
	}
	if m.Jf != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Jf))
	}
	return n
}

func (m *GS_GWarStageChange) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Ts2))
	}
	return n
}

func (m *GS_GWarNewG2) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *C_GWarGetSummary) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GWarGetSummary_R) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Ts2))
	}
	if m.G2 != nil {
		l = m.G2.Size()
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.G1Jf != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.G1Jf))
	}
	return n
}

func (m *C_GWarGetG2Members) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GWarGetG2Members_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.ErrorCode))
	}
	if len(m.Mbs) > 0 {
		for _, e := range m.Mbs {
			l = e.Size()
			n += 1 + l + sovCGs_55Gwar(uint64(l))
		}
	}
	return n
}

func (m *C_GWarGetGuildRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GWarGetGuildRank_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_55Gwar(uint64(l))
		}
	}
	return n
}

func (m *C_GWarGetPlrRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GWarGetPlrRank_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.ErrorCode))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_55Gwar(uint64(l))
		}
	}
	return n
}

func (m *C_GWarFight) Size() (n int) {
	var l int
	_ = l
	l = len(m.TarId)
	if l > 0 {
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	return n
}

func (m *GS_GWarFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_55Gwar(uint64(l))
	}
	if m.JfAdd != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.JfAdd))
	}
	if m.Val != 0 {
		n += 1 + sovCGs_55Gwar(uint64(m.Val))
	}
	if m.Done {
		n += 2
	}
	return n
}

func sovCGs_55Gwar(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_55Gwar(x uint64) (n int) {
	return sovCGs_55Gwar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GWarData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWarData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWarData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWarGuildBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWarGuildBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWarGuildBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApMean", wireType)
			}
			m.ApMean = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApMean |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApMax", wireType)
			}
			m.ApMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrId", wireType)
			}
			m.SvrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jf", wireType)
			}
			m.Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWarGuildMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWarGuildMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWarGuildMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWarGuildRankRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWarGuildRankRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWarGuildRankRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrId", wireType)
			}
			m.SvrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jf", wireType)
			}
			m.Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWarPlrRankRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWarPlrRankRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWarPlrRankRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jf", wireType)
			}
			m.Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarStageChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarStageChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarStageChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarNewG2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarNewG2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarNewG2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GWarGetSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GWarGetSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GWarGetSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarGetSummary_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarGetSummary_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarGetSummary_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.G2 == nil {
				m.G2 = &GWarGuildBase{}
			}
			if err := m.G2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G1Jf", wireType)
			}
			m.G1Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.G1Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GWarGetG2Members) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GWarGetG2Members: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GWarGetG2Members: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarGetG2Members_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarGetG2Members_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarGetG2Members_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbs = append(m.Mbs, &GWarGuildMember{})
			if err := m.Mbs[len(m.Mbs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GWarGetGuildRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GWarGetGuildRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GWarGetGuildRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarGetGuildRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarGetGuildRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarGetGuildRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GWarGuildRankRow{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GWarGetPlrRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GWarGetPlrRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GWarGetPlrRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarGetPlrRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarGetPlrRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarGetPlrRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GWarPlrRankRow{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GWarFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GWarFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GWarFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &TeamFormation{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GWarFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GWarFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GWarFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JfAdd", wireType)
			}
			m.JfAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JfAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_55Gwar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_55Gwar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_55Gwar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_55Gwar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_55Gwar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_55Gwar
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_55Gwar
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_55Gwar(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_55Gwar = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_55Gwar   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.55.gwar.proto", fileDescriptorCGs_55Gwar) }

var fileDescriptorCGs_55Gwar = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0xaf, 0xed, 0x24, 0x6d, 0x27, 0xfd, 0xe7, 0x5f, 0xb6, 0x09, 0xb2, 0x2a, 0x14, 0x55, 0x3e,
	0x94, 0x72, 0x20, 0x14, 0xa3, 0xde, 0xb8, 0xb4, 0x29, 0x35, 0x09, 0x4d, 0x54, 0x6d, 0x2a, 0x38,
	0x20, 0x14, 0x36, 0xf1, 0xc6, 0x8d, 0xb0, 0xbd, 0xd1, 0xda, 0x69, 0xe9, 0x8d, 0x47, 0xe0, 0xc2,
	0xc3, 0xf0, 0x06, 0x3d, 0xf2, 0x08, 0x10, 0x5e, 0x04, 0xed, 0xf8, 0x8b, 0xa8, 0x87, 0x82, 0xc4,
	0x6d, 0xe6, 0x97, 0xf1, 0xef, 0x63, 0x77, 0x36, 0x40, 0xc6, 0x43, 0x2f, 0x6a, 0x1d, 0x1c, 0xb4,
	0xbc, 0x2b, 0x26, 0x5b, 0x33, 0x29, 0x62, 0x41, 0x8c, 0x20, 0xf2, 0xb6, 0xc1, 0x13, 0x9e, 0x48,
	0x80, 0xed, 0x06, 0x0e, 0xed, 0xef, 0xb7, 0xa2, 0x58, 0xce, 0xc7, 0x71, 0x94, 0xc0, 0x16, 0xc0,
	0x9a, 0xf3, 0x86, 0xc9, 0x63, 0x16, 0x33, 0xeb, 0xab, 0x06, 0xff, 0xa9, 0xc6, 0x99, 0x4f, 0x7d,
	0xf7, 0x88, 0x45, 0x9c, 0xd4, 0x40, 0xef, 0xb8, 0xa6, 0xb6, 0xa3, 0xed, 0xad, 0x53, 0xbd, 0xe3,
	0x12, 0x02, 0xa5, 0x3e, 0x0b, 0xb8, 0xa9, 0x23, 0x82, 0xb5, 0xc2, 0x3a, 0x63, 0x11, 0x9a, 0xc6,
	0x8e, 0xb6, 0x57, 0xa6, 0x58, 0xab, 0xef, 0x4e, 0x2f, 0xcd, 0x12, 0x22, 0xfa, 0xe9, 0x25, 0xd9,
	0x00, 0xad, 0x6f, 0x96, 0xb1, 0xd5, 0xfa, 0xe4, 0x3e, 0x54, 0x0e, 0x67, 0x3d, 0xce, 0x42, 0xb3,
	0x82, 0x50, 0xda, 0x91, 0x3a, 0x94, 0x0f, 0x67, 0x3d, 0xf6, 0xd1, 0x5c, 0x45, 0x38, 0x69, 0x14,
	0x3a, 0xb8, 0x94, 0x1d, 0xd7, 0x5c, 0x4b, 0x50, 0x6c, 0x94, 0x42, 0x77, 0x62, 0xae, 0x27, 0x0a,
	0xdd, 0x89, 0xf5, 0x1e, 0xfe, 0xcf, 0xad, 0xf7, 0x78, 0x30, 0xe2, 0x92, 0x3c, 0x04, 0xe3, 0xcc,
	0x97, 0xe8, 0xbe, 0x6a, 0x37, 0x5a, 0x41, 0xe4, 0xb5, 0xce, 0x7c, 0x76, 0xcd, 0xe5, 0x60, 0x1a,
	0xcc, 0x7c, 0xde, 0x09, 0x27, 0x82, 0xaa, 0x09, 0xb2, 0x09, 0xc6, 0x6b, 0xe6, 0x63, 0xa8, 0x32,
	0x55, 0xa5, 0xca, 0x74, 0x2c, 0x42, 0x8e, 0x99, 0xd6, 0x28, 0xd6, 0xd6, 0x27, 0x0d, 0x36, 0x73,
	0x09, 0xca, 0xc2, 0x0f, 0x54, 0x5c, 0xfd, 0xb3, 0x03, 0xca, 0x43, 0x96, 0x6f, 0x87, 0xac, 0xe4,
	0x21, 0xdf, 0x42, 0x4d, 0x39, 0x38, 0xf3, 0x65, 0xa6, 0xff, 0x37, 0x19, 0xdb, 0x61, 0x9c, 0x65,
	0x6c, 0x87, 0x71, 0x4a, 0x6e, 0xe4, 0xe4, 0xcf, 0x81, 0x38, 0x83, 0xa1, 0xe2, 0x1f, 0xc4, 0xcc,
	0xe3, 0xed, 0x0b, 0x16, 0x7a, 0x1c, 0x8d, 0xa9, 0x16, 0x25, 0x94, 0x31, 0xd5, 0x28, 0xb6, 0xf3,
	0xc8, 0x46, 0x36, 0x83, 0xaa, 0xd2, 0xaa, 0xc1, 0x46, 0xfa, 0x75, 0x9f, 0x5f, 0x39, 0xb6, 0x45,
	0x60, 0xb3, 0x8d, 0xad, 0xc3, 0xe3, 0xc1, 0x3c, 0x08, 0x98, 0xbc, 0xb6, 0xe6, 0xb0, 0x95, 0xce,
	0x14, 0xe0, 0x90, 0xfe, 0xa9, 0x04, 0xb1, 0x40, 0x77, 0x6c, 0x34, 0x5c, 0xb5, 0x09, 0x46, 0x5d,
	0x5a, 0x56, 0xaa, 0x3b, 0xb6, 0x3a, 0x6b, 0xe7, 0x69, 0x77, 0x92, 0x9e, 0x2c, 0xd6, 0x56, 0x1d,
	0x48, 0x6e, 0xc5, 0xb1, 0x93, 0xe5, 0x88, 0xac, 0x77, 0xd0, 0x28, 0xcc, 0xe4, 0xf0, 0x90, 0x92,
	0x07, 0xb0, 0xfe, 0x42, 0x4a, 0x21, 0xdb, 0xc2, 0xcd, 0x2c, 0x15, 0x00, 0xd9, 0x05, 0xa3, 0x37,
	0x8a, 0x4c, 0x7d, 0xc7, 0xd8, 0xab, 0xda, 0xf5, 0x65, 0x17, 0x09, 0x07, 0x55, 0x03, 0xcb, 0xa2,
	0xd9, 0xc6, 0x58, 0x2f, 0x97, 0x44, 0x33, 0x78, 0x48, 0xc9, 0x13, 0x58, 0xa5, 0x7c, 0x2c, 0xa4,
	0x1b, 0x99, 0x1a, 0x52, 0x37, 0x96, 0xa9, 0xd3, 0xfb, 0xa6, 0xd9, 0xd4, 0xd2, 0xf9, 0xa6, 0xfb,
	0x60, 0x8d, 0x7e, 0x3f, 0xdf, 0x14, 0xbc, 0x33, 0xd0, 0xe3, 0x42, 0x39, 0x09, 0xb5, 0x95, 0x2b,
	0x17, 0x7b, 0x56, 0xe8, 0xbe, 0x82, 0x6a, 0xa2, 0x7b, 0x32, 0xf5, 0x2e, 0x62, 0x75, 0x77, 0xe7,
	0x4c, 0xe6, 0x4f, 0x20, 0x69, 0xc8, 0x2e, 0x94, 0xce, 0x39, 0x0b, 0xf0, 0xf2, 0xb2, 0xbb, 0x52,
	0xc0, 0x89, 0x90, 0x01, 0x8b, 0xa7, 0x22, 0xa4, 0xf8, 0xbb, 0xf5, 0x45, 0x83, 0x5a, 0xea, 0x18,
	0xe9, 0xee, 0x34, 0xfb, 0x08, 0x2a, 0x94, 0xcf, 0x7c, 0x76, 0x9d, 0x52, 0xdf, 0x43, 0xea, 0x23,
	0x16, 0xc7, 0x3e, 0x4f, 0x7e, 0xa0, 0xe9, 0x80, 0x72, 0xd6, 0x9d, 0x1c, 0xba, 0x6e, 0xba, 0xe1,
	0x49, 0x93, 0x3d, 0xf5, 0xd2, 0xed, 0xa7, 0x5e, 0x2e, 0x9e, 0xfa, 0x51, 0xfd, 0xe6, 0x47, 0x73,
	0xe5, 0x66, 0xd1, 0xd4, 0xbe, 0x2d, 0x9a, 0xda, 0xf7, 0x45, 0x53, 0xfb, 0xfc, 0xb3, 0xb9, 0x32,
	0xaa, 0xe0, 0x3f, 0xe6, 0xb3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x56, 0xeb, 0xd3, 0x42, 0x6f,
	0x05, 0x00, 0x00,
}
