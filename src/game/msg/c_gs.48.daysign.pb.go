// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.48.daysign.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 七日之约
type DaySignData struct {
	Taken   []int32 `protobuf:"varint,1,rep,packed,name=Taken" json:"Taken,omitempty"`
	SignDay int32   `protobuf:"varint,2,opt,name=SignDay,proto3" json:"SignDay,omitempty"`
	Close   bool    `protobuf:"varint,3,opt,name=Close,proto3" json:"Close,omitempty"`
}

func (m *DaySignData) Reset()                    { *m = DaySignData{} }
func (m *DaySignData) String() string            { return proto.CompactTextString(m) }
func (*DaySignData) ProtoMessage()               {}
func (*DaySignData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_48Daysign, []int{0} }

type C_DaySignTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_DaySignTake) Reset()                    { *m = C_DaySignTake{} }
func (m *C_DaySignTake) String() string            { return proto.CompactTextString(m) }
func (*C_DaySignTake) ProtoMessage()               {}
func (*C_DaySignTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_48Daysign, []int{1} }

type GS_DaySignTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
	Close     bool     `protobuf:"varint,3,opt,name=Close,proto3" json:"Close,omitempty"`
}

func (m *GS_DaySignTake_R) Reset()                    { *m = GS_DaySignTake_R{} }
func (m *GS_DaySignTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_DaySignTake_R) ProtoMessage()               {}
func (*GS_DaySignTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_48Daysign, []int{2} }

func init() {
	proto.RegisterType((*DaySignData)(nil), "msg.DaySignData")
	proto.RegisterType((*C_DaySignTake)(nil), "msg.C_DaySignTake")
	proto.RegisterType((*GS_DaySignTake_R)(nil), "msg.GS_DaySignTake_R")
}
func (m *DaySignData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaySignData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Taken) > 0 {
		dAtA2 := make([]byte, len(m.Taken)*10)
		var j1 int
		for _, num1 := range m.Taken {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_48Daysign(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.SignDay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_48Daysign(dAtA, i, uint64(m.SignDay))
	}
	if m.Close {
		dAtA[i] = 0x18
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C_DaySignTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_DaySignTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_48Daysign(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_DaySignTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_DaySignTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_48Daysign(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_48Daysign(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Close {
		dAtA[i] = 0x18
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintCGs_48Daysign(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DaySignData) Size() (n int) {
	var l int
	_ = l
	if len(m.Taken) > 0 {
		l = 0
		for _, e := range m.Taken {
			l += sovCGs_48Daysign(uint64(e))
		}
		n += 1 + sovCGs_48Daysign(uint64(l)) + l
	}
	if m.SignDay != 0 {
		n += 1 + sovCGs_48Daysign(uint64(m.SignDay))
	}
	if m.Close {
		n += 2
	}
	return n
}

func (m *C_DaySignTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_48Daysign(uint64(m.Id))
	}
	return n
}

func (m *GS_DaySignTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_48Daysign(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_48Daysign(uint64(l))
	}
	if m.Close {
		n += 2
	}
	return n
}

func sovCGs_48Daysign(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_48Daysign(x uint64) (n int) {
	return sovCGs_48Daysign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DaySignData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_48Daysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaySignData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaySignData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_48Daysign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Taken = append(m.Taken, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_48Daysign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_48Daysign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_48Daysign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Taken = append(m.Taken, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Taken", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignDay", wireType)
			}
			m.SignDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignDay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_48Daysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_48Daysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_DaySignTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_48Daysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_DaySignTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_DaySignTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_48Daysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_48Daysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_DaySignTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_48Daysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_DaySignTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_DaySignTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_48Daysign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_48Daysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_48Daysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_48Daysign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_48Daysign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_48Daysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_48Daysign
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_48Daysign
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_48Daysign(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_48Daysign = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_48Daysign   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.48.daysign.proto", fileDescriptorCGs_48Daysign) }

var fileDescriptorCGs_48Daysign = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0xb1, 0xd0, 0x4b, 0x49, 0xac, 0x2c, 0xce, 0x4c, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08, 0x48, 0x41,
	0xd4, 0x19, 0x18, 0xe8, 0x15, 0x97, 0x14, 0x95, 0x26, 0x97, 0x14, 0x43, 0x84, 0x95, 0x82, 0xb9,
	0xb8, 0x5d, 0x12, 0x2b, 0x83, 0x33, 0xd3, 0xf3, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0x44, 0xb8, 0x58,
	0x43, 0x12, 0xb3, 0x53, 0xf3, 0x24, 0x18, 0x15, 0x98, 0x35, 0x58, 0x83, 0x20, 0x1c, 0x21, 0x09,
	0x2e, 0x76, 0x88, 0x8a, 0x4a, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x18, 0x17, 0xa4, 0xde,
	0x39, 0x27, 0xbf, 0x38, 0x55, 0x82, 0x59, 0x81, 0x51, 0x83, 0x23, 0x08, 0xc2, 0x51, 0x92, 0xe7,
	0xe2, 0x75, 0x8e, 0x87, 0x1a, 0x0b, 0x32, 0x41, 0x88, 0x8f, 0x8b, 0xc9, 0x33, 0x45, 0x82, 0x11,
	0xac, 0x97, 0xc9, 0x33, 0x45, 0x29, 0x8f, 0x4b, 0xc0, 0x3d, 0x18, 0x59, 0x45, 0x7c, 0x90, 0x90,
	0x0c, 0x17, 0xa7, 0x6b, 0x51, 0x51, 0x7e, 0x91, 0x73, 0x7e, 0x4a, 0x2a, 0x54, 0x29, 0x42, 0x40,
	0x48, 0x8d, 0x8b, 0x3d, 0x28, 0xb5, 0x3c, 0xb1, 0x28, 0xa5, 0x18, 0xec, 0x04, 0x6e, 0x23, 0x1e,
	0xbd, 0xdc, 0xe2, 0x74, 0x3d, 0xa8, 0x58, 0x10, 0x4c, 0x12, 0xbb, 0x83, 0x9c, 0x44, 0x4e, 0x3c,
	0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27,
	0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x07, 0x81, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x70,
	0x01, 0x7a, 0x43, 0x01, 0x00, 0x00,
}
