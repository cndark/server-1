// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.20.guild.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GuildRow struct {
	Id      string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon    int32  `protobuf:"varint,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Lv      int32  `protobuf:"varint,4,opt,name=Lv,proto3" json:"Lv,omitempty"`
	MemberN int32  `protobuf:"varint,5,opt,name=MemberN,proto3" json:"MemberN,omitempty"`
	NeedLv  int32  `protobuf:"varint,6,opt,name=NeedLv,proto3" json:"NeedLv,omitempty"`
	Rank    int32  `protobuf:"varint,7,opt,name=Rank,proto3" json:"Rank,omitempty"`
	AtkPwr  int32  `protobuf:"varint,8,opt,name=AtkPwr,proto3" json:"AtkPwr,omitempty"`
}

func (m *GuildRow) Reset()                    { *m = GuildRow{} }
func (m *GuildRow) String() string            { return proto.CompactTextString(m) }
func (*GuildRow) ProtoMessage()               {}
func (*GuildRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{0} }

type GuildInfo_Full struct {
	Row         *GuildRow          `protobuf:"bytes,1,opt,name=Row" json:"Row,omitempty"`
	Exp         int64              `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
	Notice      string             `protobuf:"bytes,3,opt,name=Notice,proto3" json:"Notice,omitempty"`
	AMode       int32              `protobuf:"varint,4,opt,name=AMode,proto3" json:"AMode,omitempty"`
	Mbs         []*GuildMemberInfo `protobuf:"bytes,6,rep,name=Mbs" json:"Mbs,omitempty"`
	HarborLevel int32              `protobuf:"varint,7,opt,name=HarborLevel,proto3" json:"HarborLevel,omitempty"`
	HarborXp    int64              `protobuf:"varint,8,opt,name=HarborXp,proto3" json:"HarborXp,omitempty"`
	ZmTs        int64              `protobuf:"varint,9,opt,name=ZmTs,proto3" json:"ZmTs,omitempty"`
	PlrData     *GuildPlrData      `protobuf:"bytes,10,opt,name=PlrData" json:"PlrData,omitempty"`
}

func (m *GuildInfo_Full) Reset()                    { *m = GuildInfo_Full{} }
func (m *GuildInfo_Full) String() string            { return proto.CompactTextString(m) }
func (*GuildInfo_Full) ProtoMessage()               {}
func (*GuildInfo_Full) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{1} }

type GuildMemberInfo struct {
	Plr       *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Rank      int32             `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	AtkPwr    int32             `protobuf:"varint,3,opt,name=AtkPwr,proto3" json:"AtkPwr,omitempty"`
	Online    bool              `protobuf:"varint,4,opt,name=Online,proto3" json:"Online,omitempty"`
	OfflineTs int64             `protobuf:"varint,5,opt,name=OfflineTs,proto3" json:"OfflineTs,omitempty"`
	SignTs    int64             `protobuf:"varint,6,opt,name=SignTs,proto3" json:"SignTs,omitempty"`
}

func (m *GuildMemberInfo) Reset()                    { *m = GuildMemberInfo{} }
func (m *GuildMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*GuildMemberInfo) ProtoMessage()               {}
func (*GuildMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{2} }

type GuildApplyRow struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
}

func (m *GuildApplyRow) Reset()                    { *m = GuildApplyRow{} }
func (m *GuildApplyRow) String() string            { return proto.CompactTextString(m) }
func (*GuildApplyRow) ProtoMessage()               {}
func (*GuildApplyRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{3} }

type GuildLog struct {
	Id    int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Param map[string]string `protobuf:"bytes,2,rep,name=Param" json:"Param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ts    int64             `protobuf:"varint,3,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (m *GuildLog) Reset()                    { *m = GuildLog{} }
func (m *GuildLog) String() string            { return proto.CompactTextString(m) }
func (*GuildLog) ProtoMessage()               {}
func (*GuildLog) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{4} }

type GuildPlrData struct {
	Signed  bool            `protobuf:"varint,1,opt,name=Signed,proto3" json:"Signed,omitempty"`
	WishTs  int64           `protobuf:"varint,2,opt,name=WishTs,proto3" json:"WishTs,omitempty"`
	WishCnt map[int32]int32 `protobuf:"bytes,3,rep,name=WishCnt" json:"WishCnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GuildPlrData) Reset()                    { *m = GuildPlrData{} }
func (m *GuildPlrData) String() string            { return proto.CompactTextString(m) }
func (*GuildPlrData) ProtoMessage()               {}
func (*GuildPlrData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{5} }

type GS_GuildPlrLeaveTs struct {
	LeaveTs  int64 `protobuf:"varint,1,opt,name=LeaveTs,proto3" json:"LeaveTs,omitempty"`
	LeaveCnt int32 `protobuf:"varint,2,opt,name=LeaveCnt,proto3" json:"LeaveCnt,omitempty"`
}

func (m *GS_GuildPlrLeaveTs) Reset()                    { *m = GS_GuildPlrLeaveTs{} }
func (m *GS_GuildPlrLeaveTs) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildPlrLeaveTs) ProtoMessage()               {}
func (*GS_GuildPlrLeaveTs) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{6} }

type GS_Guild_Join struct {
	GuildId   string           `protobuf:"bytes,1,opt,name=GuildId,proto3" json:"GuildId,omitempty"`
	GuildName string           `protobuf:"bytes,2,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
	Mb        *GuildMemberInfo `protobuf:"bytes,3,opt,name=Mb" json:"Mb,omitempty"`
}

func (m *GS_Guild_Join) Reset()                    { *m = GS_Guild_Join{} }
func (m *GS_Guild_Join) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_Join) ProtoMessage()               {}
func (*GS_Guild_Join) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{7} }

type GS_Guild_Leave struct {
	Reason int32  `protobuf:"varint,1,opt,name=Reason,proto3" json:"Reason,omitempty"`
	PId    string `protobuf:"bytes,2,opt,name=PId,proto3" json:"PId,omitempty"`
	PName  string `protobuf:"bytes,3,opt,name=PName,proto3" json:"PName,omitempty"`
}

func (m *GS_Guild_Leave) Reset()                    { *m = GS_Guild_Leave{} }
func (m *GS_Guild_Leave) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_Leave) ProtoMessage()               {}
func (*GS_Guild_Leave) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{8} }

type GS_Guild_MbRank struct {
	PId   string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
	PName string `protobuf:"bytes,2,opt,name=PName,proto3" json:"PName,omitempty"`
	Rank  int32  `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (m *GS_Guild_MbRank) Reset()                    { *m = GS_Guild_MbRank{} }
func (m *GS_Guild_MbRank) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_MbRank) ProtoMessage()               {}
func (*GS_Guild_MbRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{9} }

type GS_Guild_Lv struct {
	Level int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp   int64 `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *GS_Guild_Lv) Reset()                    { *m = GS_Guild_Lv{} }
func (m *GS_Guild_Lv) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_Lv) ProtoMessage()               {}
func (*GS_Guild_Lv) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{10} }

type GS_Guild_Notice struct {
	Notice string `protobuf:"bytes,1,opt,name=Notice,proto3" json:"Notice,omitempty"`
}

func (m *GS_Guild_Notice) Reset()                    { *m = GS_Guild_Notice{} }
func (m *GS_Guild_Notice) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_Notice) ProtoMessage()               {}
func (*GS_Guild_Notice) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{11} }

type GS_Guild_Icon struct {
	Icon int32 `protobuf:"varint,1,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (m *GS_Guild_Icon) Reset()                    { *m = GS_Guild_Icon{} }
func (m *GS_Guild_Icon) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_Icon) ProtoMessage()               {}
func (*GS_Guild_Icon) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{12} }

type GS_Guild_NewApply struct {
	PId string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
}

func (m *GS_Guild_NewApply) Reset()                    { *m = GS_Guild_NewApply{} }
func (m *GS_Guild_NewApply) String() string            { return proto.CompactTextString(m) }
func (*GS_Guild_NewApply) ProtoMessage()               {}
func (*GS_Guild_NewApply) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{13} }

// 创建公会
type C_GuildCreate struct {
	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Notice string `protobuf:"bytes,2,opt,name=Notice,proto3" json:"Notice,omitempty"`
	Icon   int32  `protobuf:"varint,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (m *C_GuildCreate) Reset()                    { *m = C_GuildCreate{} }
func (m *C_GuildCreate) String() string            { return proto.CompactTextString(m) }
func (*C_GuildCreate) ProtoMessage()               {}
func (*C_GuildCreate) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{14} }

type GS_GuildCreate_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildCreate_R) Reset()                    { *m = GS_GuildCreate_R{} }
func (m *GS_GuildCreate_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildCreate_R) ProtoMessage()               {}
func (*GS_GuildCreate_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{15} }

// 解散公会
type C_GuildDestroy struct {
}

func (m *C_GuildDestroy) Reset()                    { *m = C_GuildDestroy{} }
func (m *C_GuildDestroy) String() string            { return proto.CompactTextString(m) }
func (*C_GuildDestroy) ProtoMessage()               {}
func (*C_GuildDestroy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{16} }

type GS_GuildDestroy_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildDestroy_R) Reset()                    { *m = GS_GuildDestroy_R{} }
func (m *GS_GuildDestroy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildDestroy_R) ProtoMessage()               {}
func (*GS_GuildDestroy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{17} }

// 更改设置
type C_GuildChangeSetting struct {
	AMode  int32 `protobuf:"varint,1,opt,name=AMode,proto3" json:"AMode,omitempty"`
	NeedLv int32 `protobuf:"varint,2,opt,name=NeedLv,proto3" json:"NeedLv,omitempty"`
}

func (m *C_GuildChangeSetting) Reset()                    { *m = C_GuildChangeSetting{} }
func (m *C_GuildChangeSetting) String() string            { return proto.CompactTextString(m) }
func (*C_GuildChangeSetting) ProtoMessage()               {}
func (*C_GuildChangeSetting) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{18} }

type GS_GuildChangeSetting_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildChangeSetting_R) Reset()         { *m = GS_GuildChangeSetting_R{} }
func (m *GS_GuildChangeSetting_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildChangeSetting_R) ProtoMessage()    {}
func (*GS_GuildChangeSetting_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{19}
}

// 拉取公会列表
type C_GuildList struct {
	Page int32 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *C_GuildList) Reset()                    { *m = C_GuildList{} }
func (m *C_GuildList) String() string            { return proto.CompactTextString(m) }
func (*C_GuildList) ProtoMessage()               {}
func (*C_GuildList) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{20} }

type GS_GuildList_R struct {
	ErrorCode int32       `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rows      []*GuildRow `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_GuildList_R) Reset()                    { *m = GS_GuildList_R{} }
func (m *GS_GuildList_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildList_R) ProtoMessage()               {}
func (*GS_GuildList_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{21} }

// 拉取玩家自己申请的公会列表
type C_GuildPlrApplyList struct {
}

func (m *C_GuildPlrApplyList) Reset()                    { *m = C_GuildPlrApplyList{} }
func (m *C_GuildPlrApplyList) String() string            { return proto.CompactTextString(m) }
func (*C_GuildPlrApplyList) ProtoMessage()               {}
func (*C_GuildPlrApplyList) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{22} }

type GS_GuildPlrApplyList_R struct {
	ErrorCode int32       `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rows      []*GuildRow `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_GuildPlrApplyList_R) Reset()         { *m = GS_GuildPlrApplyList_R{} }
func (m *GS_GuildPlrApplyList_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildPlrApplyList_R) ProtoMessage()    {}
func (*GS_GuildPlrApplyList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{23}
}

// 公会查找
type C_GuildSearch struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *C_GuildSearch) Reset()                    { *m = C_GuildSearch{} }
func (m *C_GuildSearch) String() string            { return proto.CompactTextString(m) }
func (*C_GuildSearch) ProtoMessage()               {}
func (*C_GuildSearch) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{24} }

type GS_GuildSearch_R struct {
	ErrorCode int32     `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Row       *GuildRow `protobuf:"bytes,2,opt,name=Row" json:"Row,omitempty"`
}

func (m *GS_GuildSearch_R) Reset()                    { *m = GS_GuildSearch_R{} }
func (m *GS_GuildSearch_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildSearch_R) ProtoMessage()               {}
func (*GS_GuildSearch_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{25} }

// 拉取公会接收的申请列表
type C_GuildApplyList struct {
}

func (m *C_GuildApplyList) Reset()                    { *m = C_GuildApplyList{} }
func (m *C_GuildApplyList) String() string            { return proto.CompactTextString(m) }
func (*C_GuildApplyList) ProtoMessage()               {}
func (*C_GuildApplyList) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{26} }

type GS_GuildApplyList_R struct {
	ErrorCode int32            `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rows      []*GuildApplyRow `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_GuildApplyList_R) Reset()                    { *m = GS_GuildApplyList_R{} }
func (m *GS_GuildApplyList_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildApplyList_R) ProtoMessage()               {}
func (*GS_GuildApplyList_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{27} }

// 拉取完整公会信息 (自己的公会)
type C_GuildInfoFull struct {
}

func (m *C_GuildInfoFull) Reset()                    { *m = C_GuildInfoFull{} }
func (m *C_GuildInfoFull) String() string            { return proto.CompactTextString(m) }
func (*C_GuildInfoFull) ProtoMessage()               {}
func (*C_GuildInfoFull) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{28} }

type GS_GuildInfoFull_R struct {
	ErrorCode int32           `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Info      *GuildInfo_Full `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
}

func (m *GS_GuildInfoFull_R) Reset()                    { *m = GS_GuildInfoFull_R{} }
func (m *GS_GuildInfoFull_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildInfoFull_R) ProtoMessage()               {}
func (*GS_GuildInfoFull_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{29} }

// 申请入会
type C_GuildApply struct {
	GuildId string `protobuf:"bytes,1,opt,name=GuildId,proto3" json:"GuildId,omitempty"`
}

func (m *C_GuildApply) Reset()                    { *m = C_GuildApply{} }
func (m *C_GuildApply) String() string            { return proto.CompactTextString(m) }
func (*C_GuildApply) ProtoMessage()               {}
func (*C_GuildApply) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{30} }

type GS_GuildApply_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApply_R) Reset()                    { *m = GS_GuildApply_R{} }
func (m *GS_GuildApply_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildApply_R) ProtoMessage()               {}
func (*GS_GuildApply_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{31} }

// 取消申请
type C_GuildApplyCancel struct {
	GuildId string `protobuf:"bytes,1,opt,name=GuildId,proto3" json:"GuildId,omitempty"`
}

func (m *C_GuildApplyCancel) Reset()                    { *m = C_GuildApplyCancel{} }
func (m *C_GuildApplyCancel) String() string            { return proto.CompactTextString(m) }
func (*C_GuildApplyCancel) ProtoMessage()               {}
func (*C_GuildApplyCancel) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{32} }

type GS_GuildApplyCancel_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApplyCancel_R) Reset()         { *m = GS_GuildApplyCancel_R{} }
func (m *GS_GuildApplyCancel_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildApplyCancel_R) ProtoMessage()    {}
func (*GS_GuildApplyCancel_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{33}
}

// 接受申请
type C_GuildApplyAccept struct {
	PId string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
}

func (m *C_GuildApplyAccept) Reset()                    { *m = C_GuildApplyAccept{} }
func (m *C_GuildApplyAccept) String() string            { return proto.CompactTextString(m) }
func (*C_GuildApplyAccept) ProtoMessage()               {}
func (*C_GuildApplyAccept) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{34} }

type GS_GuildApplyAccept_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApplyAccept_R) Reset()         { *m = GS_GuildApplyAccept_R{} }
func (m *GS_GuildApplyAccept_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildApplyAccept_R) ProtoMessage()    {}
func (*GS_GuildApplyAccept_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{35}
}

// 拒绝申请
type C_GuildApplyDeny struct {
	PId string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
}

func (m *C_GuildApplyDeny) Reset()                    { *m = C_GuildApplyDeny{} }
func (m *C_GuildApplyDeny) String() string            { return proto.CompactTextString(m) }
func (*C_GuildApplyDeny) ProtoMessage()               {}
func (*C_GuildApplyDeny) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{36} }

type GS_GuildApplyDeny_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApplyDeny_R) Reset()                    { *m = GS_GuildApplyDeny_R{} }
func (m *GS_GuildApplyDeny_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildApplyDeny_R) ProtoMessage()               {}
func (*GS_GuildApplyDeny_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{37} }

// 退出公会
type C_GuildLeave struct {
}

func (m *C_GuildLeave) Reset()                    { *m = C_GuildLeave{} }
func (m *C_GuildLeave) String() string            { return proto.CompactTextString(m) }
func (*C_GuildLeave) ProtoMessage()               {}
func (*C_GuildLeave) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{38} }

type GS_GuildLeave_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildLeave_R) Reset()                    { *m = GS_GuildLeave_R{} }
func (m *GS_GuildLeave_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildLeave_R) ProtoMessage()               {}
func (*GS_GuildLeave_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{39} }

// 踢出公会
type C_GuildKick struct {
	PId string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
}

func (m *C_GuildKick) Reset()                    { *m = C_GuildKick{} }
func (m *C_GuildKick) String() string            { return proto.CompactTextString(m) }
func (*C_GuildKick) ProtoMessage()               {}
func (*C_GuildKick) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{40} }

type GS_GuildKick_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildKick_R) Reset()                    { *m = GS_GuildKick_R{} }
func (m *GS_GuildKick_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildKick_R) ProtoMessage()               {}
func (*GS_GuildKick_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{41} }

// 设置职务
type C_GuildSetRank struct {
	PId  string `protobuf:"bytes,1,opt,name=PId,proto3" json:"PId,omitempty"`
	Rank int32  `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (m *C_GuildSetRank) Reset()                    { *m = C_GuildSetRank{} }
func (m *C_GuildSetRank) String() string            { return proto.CompactTextString(m) }
func (*C_GuildSetRank) ProtoMessage()               {}
func (*C_GuildSetRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{42} }

type GS_GuildSetRank_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildSetRank_R) Reset()                    { *m = GS_GuildSetRank_R{} }
func (m *GS_GuildSetRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildSetRank_R) ProtoMessage()               {}
func (*GS_GuildSetRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{43} }

// 公会改名
type C_GuildChangeName struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *C_GuildChangeName) Reset()                    { *m = C_GuildChangeName{} }
func (m *C_GuildChangeName) String() string            { return proto.CompactTextString(m) }
func (*C_GuildChangeName) ProtoMessage()               {}
func (*C_GuildChangeName) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{44} }

type GS_GuildChangeName_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildChangeName_R) Reset()                    { *m = GS_GuildChangeName_R{} }
func (m *GS_GuildChangeName_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildChangeName_R) ProtoMessage()               {}
func (*GS_GuildChangeName_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{45} }

// 一键接受申请
type C_GuildApplyAcceptOneKey struct {
}

func (m *C_GuildApplyAcceptOneKey) Reset()         { *m = C_GuildApplyAcceptOneKey{} }
func (m *C_GuildApplyAcceptOneKey) String() string { return proto.CompactTextString(m) }
func (*C_GuildApplyAcceptOneKey) ProtoMessage()    {}
func (*C_GuildApplyAcceptOneKey) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{46}
}

type GS_GuildApplyAcceptOneKey_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApplyAcceptOneKey_R) Reset()         { *m = GS_GuildApplyAcceptOneKey_R{} }
func (m *GS_GuildApplyAcceptOneKey_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildApplyAcceptOneKey_R) ProtoMessage()    {}
func (*GS_GuildApplyAcceptOneKey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{47}
}

// 一键拒绝申请
type C_GuildApplyDenyOneKey struct {
}

func (m *C_GuildApplyDenyOneKey) Reset()         { *m = C_GuildApplyDenyOneKey{} }
func (m *C_GuildApplyDenyOneKey) String() string { return proto.CompactTextString(m) }
func (*C_GuildApplyDenyOneKey) ProtoMessage()    {}
func (*C_GuildApplyDenyOneKey) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{48}
}

type GS_GuildApplyDenyOneKey_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildApplyDenyOneKey_R) Reset()         { *m = GS_GuildApplyDenyOneKey_R{} }
func (m *GS_GuildApplyDenyOneKey_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildApplyDenyOneKey_R) ProtoMessage()    {}
func (*GS_GuildApplyDenyOneKey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{49}
}

// 弹劾族长
type C_GuildKickOwner struct {
}

func (m *C_GuildKickOwner) Reset()                    { *m = C_GuildKickOwner{} }
func (m *C_GuildKickOwner) String() string            { return proto.CompactTextString(m) }
func (*C_GuildKickOwner) ProtoMessage()               {}
func (*C_GuildKickOwner) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{50} }

type GS_GuildKickOwner_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildKickOwner_R) Reset()                    { *m = GS_GuildKickOwner_R{} }
func (m *GS_GuildKickOwner_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildKickOwner_R) ProtoMessage()               {}
func (*GS_GuildKickOwner_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{51} }

// 拉取公会日志
type C_GuildGetLog struct {
}

func (m *C_GuildGetLog) Reset()                    { *m = C_GuildGetLog{} }
func (m *C_GuildGetLog) String() string            { return proto.CompactTextString(m) }
func (*C_GuildGetLog) ProtoMessage()               {}
func (*C_GuildGetLog) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{52} }

type GS_GuildGetLog_R struct {
	ErrorCode int32       `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Log       []*GuildLog `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
}

func (m *GS_GuildGetLog_R) Reset()                    { *m = GS_GuildGetLog_R{} }
func (m *GS_GuildGetLog_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildGetLog_R) ProtoMessage()               {}
func (*GS_GuildGetLog_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{53} }

// 每日签到
type C_GuildSign struct {
}

func (m *C_GuildSign) Reset()                    { *m = C_GuildSign{} }
func (m *C_GuildSign) String() string            { return proto.CompactTextString(m) }
func (*C_GuildSign) ProtoMessage()               {}
func (*C_GuildSign) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{54} }

type GS_GuildSign_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GuildSign_R) Reset()                    { *m = GS_GuildSign_R{} }
func (m *GS_GuildSign_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildSign_R) ProtoMessage()               {}
func (*GS_GuildSign_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{55} }

// 修改公告
type C_GuildSetNotice struct {
	Notice string `protobuf:"bytes,1,opt,name=Notice,proto3" json:"Notice,omitempty"`
}

func (m *C_GuildSetNotice) Reset()                    { *m = C_GuildSetNotice{} }
func (m *C_GuildSetNotice) String() string            { return proto.CompactTextString(m) }
func (*C_GuildSetNotice) ProtoMessage()               {}
func (*C_GuildSetNotice) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{56} }

type GS_GuildSetNotice_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildSetNotice_R) Reset()                    { *m = GS_GuildSetNotice_R{} }
func (m *GS_GuildSetNotice_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildSetNotice_R) ProtoMessage()               {}
func (*GS_GuildSetNotice_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{57} }

// 修改 icon
type C_GuildSetIcon struct {
	Icon int32 `protobuf:"varint,1,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (m *C_GuildSetIcon) Reset()                    { *m = C_GuildSetIcon{} }
func (m *C_GuildSetIcon) String() string            { return proto.CompactTextString(m) }
func (*C_GuildSetIcon) ProtoMessage()               {}
func (*C_GuildSetIcon) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{58} }

type GS_GuildSetIcon_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildSetIcon_R) Reset()                    { *m = GS_GuildSetIcon_R{} }
func (m *GS_GuildSetIcon_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildSetIcon_R) ProtoMessage()               {}
func (*GS_GuildSetIcon_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{59} }

// 发布招募
type C_GuildPublishZm struct {
}

func (m *C_GuildPublishZm) Reset()                    { *m = C_GuildPublishZm{} }
func (m *C_GuildPublishZm) String() string            { return proto.CompactTextString(m) }
func (*C_GuildPublishZm) ProtoMessage()               {}
func (*C_GuildPublishZm) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{60} }

type GS_GuildPublishZm_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ZmTs      int64 `protobuf:"varint,2,opt,name=ZmTs,proto3" json:"ZmTs,omitempty"`
}

func (m *GS_GuildPublishZm_R) Reset()                    { *m = GS_GuildPublishZm_R{} }
func (m *GS_GuildPublishZm_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildPublishZm_R) ProtoMessage()               {}
func (*GS_GuildPublishZm_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{61} }

type GuildWish struct {
	Seq     int64  `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	PlrId   string `protobuf:"bytes,2,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
	ItemNum int32  `protobuf:"varint,3,opt,name=ItemNum,proto3" json:"ItemNum,omitempty"`
	Helps   int32  `protobuf:"varint,4,opt,name=Helps,proto3" json:"Helps,omitempty"`
}

func (m *GuildWish) Reset()                    { *m = GuildWish{} }
func (m *GuildWish) String() string            { return proto.CompactTextString(m) }
func (*GuildWish) ProtoMessage()               {}
func (*GuildWish) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{62} }

// 新许愿推送
type GS_GuildWishNew struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Num  int32  `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	Seq  int64  `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *GS_GuildWishNew) Reset()                    { *m = GS_GuildWishNew{} }
func (m *GS_GuildWishNew) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishNew) ProtoMessage()               {}
func (*GS_GuildWishNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{63} }

// 自己可领取推送
type GS_GuildWishFullHelp struct {
}

func (m *GS_GuildWishFullHelp) Reset()                    { *m = GS_GuildWishFullHelp{} }
func (m *GS_GuildWishFullHelp) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishFullHelp) ProtoMessage()               {}
func (*GS_GuildWishFullHelp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{64} }

// 许愿
type C_GuildWishItem struct {
	Num int32 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *C_GuildWishItem) Reset()                    { *m = C_GuildWishItem{} }
func (m *C_GuildWishItem) String() string            { return proto.CompactTextString(m) }
func (*C_GuildWishItem) ProtoMessage()               {}
func (*C_GuildWishItem) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{65} }

type GS_GuildWishItem_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int64 `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *GS_GuildWishItem_R) Reset()                    { *m = GS_GuildWishItem_R{} }
func (m *GS_GuildWishItem_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishItem_R) ProtoMessage()               {}
func (*GS_GuildWishItem_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{66} }

// 助力
type C_GuildWishHelp struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_GuildWishHelp) Reset()                    { *m = C_GuildWishHelp{} }
func (m *C_GuildWishHelp) String() string            { return proto.CompactTextString(m) }
func (*C_GuildWishHelp) ProtoMessage()               {}
func (*C_GuildWishHelp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{67} }

type GS_GuildWishHelp_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GuildWishHelp_R) Reset()                    { *m = GS_GuildWishHelp_R{} }
func (m *GS_GuildWishHelp_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishHelp_R) ProtoMessage()               {}
func (*GS_GuildWishHelp_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{68} }

// 领取
type C_GuildWishClose struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_GuildWishClose) Reset()                    { *m = C_GuildWishClose{} }
func (m *C_GuildWishClose) String() string            { return proto.CompactTextString(m) }
func (*C_GuildWishClose) ProtoMessage()               {}
func (*C_GuildWishClose) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{69} }

type GS_GuildWishClose_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GuildWishClose_R) Reset()                    { *m = GS_GuildWishClose_R{} }
func (m *GS_GuildWishClose_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishClose_R) ProtoMessage()               {}
func (*GS_GuildWishClose_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{70} }

// 列表
type C_GuildWishList struct {
}

func (m *C_GuildWishList) Reset()                    { *m = C_GuildWishList{} }
func (m *C_GuildWishList) String() string            { return proto.CompactTextString(m) }
func (*C_GuildWishList) ProtoMessage()               {}
func (*C_GuildWishList) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{71} }

type GS_GuildWishList_R struct {
	Wishes []*GuildWish `protobuf:"bytes,1,rep,name=Wishes" json:"Wishes,omitempty"`
}

func (m *GS_GuildWishList_R) Reset()                    { *m = GS_GuildWishList_R{} }
func (m *GS_GuildWishList_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildWishList_R) ProtoMessage()               {}
func (*GS_GuildWishList_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{72} }

type GuildHarborDonateRec struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Val int64             `protobuf:"varint,2,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *GuildHarborDonateRec) Reset()                    { *m = GuildHarborDonateRec{} }
func (m *GuildHarborDonateRec) String() string            { return proto.CompactTextString(m) }
func (*GuildHarborDonateRec) ProtoMessage()               {}
func (*GuildHarborDonateRec) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{73} }

type GS_GuildHarborXpChange struct {
	Lv int32 `protobuf:"varint,1,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Xp int64 `protobuf:"varint,2,opt,name=Xp,proto3" json:"Xp,omitempty"`
}

func (m *GS_GuildHarborXpChange) Reset()         { *m = GS_GuildHarborXpChange{} }
func (m *GS_GuildHarborXpChange) String() string { return proto.CompactTextString(m) }
func (*GS_GuildHarborXpChange) ProtoMessage()    {}
func (*GS_GuildHarborXpChange) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{74}
}

// 捐赠
type C_GuildHarborDonate struct {
	Which int32 `protobuf:"varint,1,opt,name=Which,proto3" json:"Which,omitempty"`
}

func (m *C_GuildHarborDonate) Reset()                    { *m = C_GuildHarborDonate{} }
func (m *C_GuildHarborDonate) String() string            { return proto.CompactTextString(m) }
func (*C_GuildHarborDonate) ProtoMessage()               {}
func (*C_GuildHarborDonate) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{75} }

type GS_GuildHarborDonate_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildHarborDonate_R) Reset()         { *m = GS_GuildHarborDonate_R{} }
func (m *GS_GuildHarborDonate_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildHarborDonate_R) ProtoMessage()    {}
func (*GS_GuildHarborDonate_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{76}
}

// 捐赠列表
type C_GuildHarborDonateList struct {
}

func (m *C_GuildHarborDonateList) Reset()         { *m = C_GuildHarborDonateList{} }
func (m *C_GuildHarborDonateList) String() string { return proto.CompactTextString(m) }
func (*C_GuildHarborDonateList) ProtoMessage()    {}
func (*C_GuildHarborDonateList) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{77}
}

type GS_GuildHarborDonateList_R struct {
	Records []*GuildHarborDonateRec `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_GuildHarborDonateList_R) Reset()         { *m = GS_GuildHarborDonateList_R{} }
func (m *GS_GuildHarborDonateList_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildHarborDonateList_R) ProtoMessage()    {}
func (*GS_GuildHarborDonateList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{78}
}

type GuildOrderRec struct {
	Seq     int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Star    int32 `protobuf:"varint,3,opt,name=Star,proto3" json:"Star,omitempty"`
	StartTs int64 `protobuf:"varint,4,opt,name=StartTs,proto3" json:"StartTs,omitempty"`
}

func (m *GuildOrderRec) Reset()                    { *m = GuildOrderRec{} }
func (m *GuildOrderRec) String() string            { return proto.CompactTextString(m) }
func (*GuildOrderRec) ProtoMessage()               {}
func (*GuildOrderRec) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{79} }

// 获取订单
type C_GuildOrderGet struct {
}

func (m *C_GuildOrderGet) Reset()                    { *m = C_GuildOrderGet{} }
func (m *C_GuildOrderGet) String() string            { return proto.CompactTextString(m) }
func (*C_GuildOrderGet) ProtoMessage()               {}
func (*C_GuildOrderGet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{80} }

type GS_GuildOrderGet_R struct {
	ErrorCode   int32            `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Records     []*GuildOrderRec `protobuf:"bytes,2,rep,name=Records" json:"Records,omitempty"`
	GetOrdersTs int64            `protobuf:"varint,3,opt,name=GetOrdersTs,proto3" json:"GetOrdersTs,omitempty"`
}

func (m *GS_GuildOrderGet_R) Reset()                    { *m = GS_GuildOrderGet_R{} }
func (m *GS_GuildOrderGet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildOrderGet_R) ProtoMessage()               {}
func (*GS_GuildOrderGet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{81} }

// 升星
type C_GuildOrderStarup struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_GuildOrderStarup) Reset()                    { *m = C_GuildOrderStarup{} }
func (m *C_GuildOrderStarup) String() string            { return proto.CompactTextString(m) }
func (*C_GuildOrderStarup) ProtoMessage()               {}
func (*C_GuildOrderStarup) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{82} }

type GS_GuildOrderStarup_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildOrderStarup_R) Reset()         { *m = GS_GuildOrderStarup_R{} }
func (m *GS_GuildOrderStarup_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildOrderStarup_R) ProtoMessage()    {}
func (*GS_GuildOrderStarup_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{83}
}

// 启动
type C_GuildOrderStart struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_GuildOrderStart) Reset()                    { *m = C_GuildOrderStart{} }
func (m *C_GuildOrderStart) String() string            { return proto.CompactTextString(m) }
func (*C_GuildOrderStart) ProtoMessage()               {}
func (*C_GuildOrderStart) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{84} }

type GS_GuildOrderStart_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	StartTs   int64 `protobuf:"varint,2,opt,name=StartTs,proto3" json:"StartTs,omitempty"`
}

func (m *GS_GuildOrderStart_R) Reset()                    { *m = GS_GuildOrderStart_R{} }
func (m *GS_GuildOrderStart_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildOrderStart_R) ProtoMessage()               {}
func (*GS_GuildOrderStart_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{85} }

// 结束订单
type C_GuildOrderClose struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_GuildOrderClose) Reset()                    { *m = C_GuildOrderClose{} }
func (m *C_GuildOrderClose) String() string            { return proto.CompactTextString(m) }
func (*C_GuildOrderClose) ProtoMessage()               {}
func (*C_GuildOrderClose) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{86} }

type GS_GuildOrderClose_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GuildOrderClose_R) Reset()                    { *m = GS_GuildOrderClose_R{} }
func (m *GS_GuildOrderClose_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildOrderClose_R) ProtoMessage()               {}
func (*GS_GuildOrderClose_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{87} }

// 订单列表
type C_GuildOrderList struct {
}

func (m *C_GuildOrderList) Reset()                    { *m = C_GuildOrderList{} }
func (m *C_GuildOrderList) String() string            { return proto.CompactTextString(m) }
func (*C_GuildOrderList) ProtoMessage()               {}
func (*C_GuildOrderList) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{88} }

type GS_GuildOrderList_R struct {
	Records     []*GuildOrderRec `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
	GetOrdersTs int64            `protobuf:"varint,2,opt,name=GetOrdersTs,proto3" json:"GetOrdersTs,omitempty"`
}

func (m *GS_GuildOrderList_R) Reset()                    { *m = GS_GuildOrderList_R{} }
func (m *GS_GuildOrderList_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildOrderList_R) ProtoMessage()               {}
func (*GS_GuildOrderList_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{89} }

// 升级
type C_GuildTechLevelup struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_GuildTechLevelup) Reset()                    { *m = C_GuildTechLevelup{} }
func (m *C_GuildTechLevelup) String() string            { return proto.CompactTextString(m) }
func (*C_GuildTechLevelup) ProtoMessage()               {}
func (*C_GuildTechLevelup) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{90} }

type GS_GuildTechLevelup_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_GuildTechLevelup_R) Reset()         { *m = GS_GuildTechLevelup_R{} }
func (m *GS_GuildTechLevelup_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildTechLevelup_R) ProtoMessage()    {}
func (*GS_GuildTechLevelup_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{91}
}

// 重置
type C_GuildTechReset struct {
}

func (m *C_GuildTechReset) Reset()                    { *m = C_GuildTechReset{} }
func (m *C_GuildTechReset) String() string            { return proto.CompactTextString(m) }
func (*C_GuildTechReset) ProtoMessage()               {}
func (*C_GuildTechReset) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{92} }

type GS_GuildTechReset_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_GuildTechReset_R) Reset()                    { *m = GS_GuildTechReset_R{} }
func (m *GS_GuildTechReset_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildTechReset_R) ProtoMessage()               {}
func (*GS_GuildTechReset_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{93} }

// 获取信息
type C_GuildTechGetInfo struct {
}

func (m *C_GuildTechGetInfo) Reset()                    { *m = C_GuildTechGetInfo{} }
func (m *C_GuildTechGetInfo) String() string            { return proto.CompactTextString(m) }
func (*C_GuildTechGetInfo) ProtoMessage()               {}
func (*C_GuildTechGetInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{94} }

type GS_GuildTechGetInfo_R struct {
	Techs map[int32]int32 `protobuf:"bytes,1,rep,name=Techs" json:"Techs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GS_GuildTechGetInfo_R) Reset()         { *m = GS_GuildTechGetInfo_R{} }
func (m *GS_GuildTechGetInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildTechGetInfo_R) ProtoMessage()    {}
func (*GS_GuildTechGetInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{95}
}

type GuildBossHistory struct {
	Num  int32           `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	Dmgs []*GuildBossDmg `protobuf:"bytes,2,rep,name=Dmgs" json:"Dmgs,omitempty"`
}

func (m *GuildBossHistory) Reset()                    { *m = GuildBossHistory{} }
func (m *GuildBossHistory) String() string            { return proto.CompactTextString(m) }
func (*GuildBossHistory) ProtoMessage()               {}
func (*GuildBossHistory) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{96} }

type GuildBossDmg struct {
	Plr *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Plr" json:"Plr,omitempty"`
	Dmg float64           `protobuf:"fixed64,2,opt,name=Dmg,proto3" json:"Dmg,omitempty"`
}

func (m *GuildBossDmg) Reset()                    { *m = GuildBossDmg{} }
func (m *GuildBossDmg) String() string            { return proto.CompactTextString(m) }
func (*GuildBossDmg) ProtoMessage()               {}
func (*GuildBossDmg) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{97} }

// 打boss
type C_GuildBossFight struct {
	Team *TeamFormation `protobuf:"bytes,1,opt,name=Team" json:"Team,omitempty"`
}

func (m *C_GuildBossFight) Reset()                    { *m = C_GuildBossFight{} }
func (m *C_GuildBossFight) String() string            { return proto.CompactTextString(m) }
func (*C_GuildBossFight) ProtoMessage()               {}
func (*C_GuildBossFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{98} }

type GS_GuildBossFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
	Dmg       float64       `protobuf:"fixed64,4,opt,name=Dmg,proto3" json:"Dmg,omitempty"`
	HpLeft    float64       `protobuf:"fixed64,5,opt,name=HpLeft,proto3" json:"HpLeft,omitempty"`
}

func (m *GS_GuildBossFight_R) Reset()                    { *m = GS_GuildBossFight_R{} }
func (m *GS_GuildBossFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_GuildBossFight_R) ProtoMessage()               {}
func (*GS_GuildBossFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_20Guild, []int{99} }

// 拉取当前 boss 信息
type C_GuildBossGetCurrent struct {
	OnlyNum bool `protobuf:"varint,1,opt,name=OnlyNum,proto3" json:"OnlyNum,omitempty"`
}

func (m *C_GuildBossGetCurrent) Reset()         { *m = C_GuildBossGetCurrent{} }
func (m *C_GuildBossGetCurrent) String() string { return proto.CompactTextString(m) }
func (*C_GuildBossGetCurrent) ProtoMessage()    {}
func (*C_GuildBossGetCurrent) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{100}
}

type GS_GuildBossGetCurrent_R struct {
	ErrorCode int32             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Info      *GuildBossHistory `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
	HpLeft    float64           `protobuf:"fixed64,3,opt,name=HpLeft,proto3" json:"HpLeft,omitempty"`
}

func (m *GS_GuildBossGetCurrent_R) Reset()         { *m = GS_GuildBossGetCurrent_R{} }
func (m *GS_GuildBossGetCurrent_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildBossGetCurrent_R) ProtoMessage()    {}
func (*GS_GuildBossGetCurrent_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{101}
}

// 拉取历史 boss 信息
type C_GuildBossGetHistory struct {
	Num int32 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *C_GuildBossGetHistory) Reset()         { *m = C_GuildBossGetHistory{} }
func (m *C_GuildBossGetHistory) String() string { return proto.CompactTextString(m) }
func (*C_GuildBossGetHistory) ProtoMessage()    {}
func (*C_GuildBossGetHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{102}
}

type GS_GuildBossGetHistory_R struct {
	ErrorCode int32             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Info      *GuildBossHistory `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
}

func (m *GS_GuildBossGetHistory_R) Reset()         { *m = GS_GuildBossGetHistory_R{} }
func (m *GS_GuildBossGetHistory_R) String() string { return proto.CompactTextString(m) }
func (*GS_GuildBossGetHistory_R) ProtoMessage()    {}
func (*GS_GuildBossGetHistory_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_20Guild, []int{103}
}

func init() {
	proto.RegisterType((*GuildRow)(nil), "msg.GuildRow")
	proto.RegisterType((*GuildInfo_Full)(nil), "msg.GuildInfo_Full")
	proto.RegisterType((*GuildMemberInfo)(nil), "msg.GuildMemberInfo")
	proto.RegisterType((*GuildApplyRow)(nil), "msg.GuildApplyRow")
	proto.RegisterType((*GuildLog)(nil), "msg.GuildLog")
	proto.RegisterType((*GuildPlrData)(nil), "msg.GuildPlrData")
	proto.RegisterType((*GS_GuildPlrLeaveTs)(nil), "msg.GS_GuildPlrLeaveTs")
	proto.RegisterType((*GS_Guild_Join)(nil), "msg.GS_Guild_Join")
	proto.RegisterType((*GS_Guild_Leave)(nil), "msg.GS_Guild_Leave")
	proto.RegisterType((*GS_Guild_MbRank)(nil), "msg.GS_Guild_MbRank")
	proto.RegisterType((*GS_Guild_Lv)(nil), "msg.GS_Guild_Lv")
	proto.RegisterType((*GS_Guild_Notice)(nil), "msg.GS_Guild_Notice")
	proto.RegisterType((*GS_Guild_Icon)(nil), "msg.GS_Guild_Icon")
	proto.RegisterType((*GS_Guild_NewApply)(nil), "msg.GS_Guild_NewApply")
	proto.RegisterType((*C_GuildCreate)(nil), "msg.C_GuildCreate")
	proto.RegisterType((*GS_GuildCreate_R)(nil), "msg.GS_GuildCreate_R")
	proto.RegisterType((*C_GuildDestroy)(nil), "msg.C_GuildDestroy")
	proto.RegisterType((*GS_GuildDestroy_R)(nil), "msg.GS_GuildDestroy_R")
	proto.RegisterType((*C_GuildChangeSetting)(nil), "msg.C_GuildChangeSetting")
	proto.RegisterType((*GS_GuildChangeSetting_R)(nil), "msg.GS_GuildChangeSetting_R")
	proto.RegisterType((*C_GuildList)(nil), "msg.C_GuildList")
	proto.RegisterType((*GS_GuildList_R)(nil), "msg.GS_GuildList_R")
	proto.RegisterType((*C_GuildPlrApplyList)(nil), "msg.C_GuildPlrApplyList")
	proto.RegisterType((*GS_GuildPlrApplyList_R)(nil), "msg.GS_GuildPlrApplyList_R")
	proto.RegisterType((*C_GuildSearch)(nil), "msg.C_GuildSearch")
	proto.RegisterType((*GS_GuildSearch_R)(nil), "msg.GS_GuildSearch_R")
	proto.RegisterType((*C_GuildApplyList)(nil), "msg.C_GuildApplyList")
	proto.RegisterType((*GS_GuildApplyList_R)(nil), "msg.GS_GuildApplyList_R")
	proto.RegisterType((*C_GuildInfoFull)(nil), "msg.C_GuildInfoFull")
	proto.RegisterType((*GS_GuildInfoFull_R)(nil), "msg.GS_GuildInfoFull_R")
	proto.RegisterType((*C_GuildApply)(nil), "msg.C_GuildApply")
	proto.RegisterType((*GS_GuildApply_R)(nil), "msg.GS_GuildApply_R")
	proto.RegisterType((*C_GuildApplyCancel)(nil), "msg.C_GuildApplyCancel")
	proto.RegisterType((*GS_GuildApplyCancel_R)(nil), "msg.GS_GuildApplyCancel_R")
	proto.RegisterType((*C_GuildApplyAccept)(nil), "msg.C_GuildApplyAccept")
	proto.RegisterType((*GS_GuildApplyAccept_R)(nil), "msg.GS_GuildApplyAccept_R")
	proto.RegisterType((*C_GuildApplyDeny)(nil), "msg.C_GuildApplyDeny")
	proto.RegisterType((*GS_GuildApplyDeny_R)(nil), "msg.GS_GuildApplyDeny_R")
	proto.RegisterType((*C_GuildLeave)(nil), "msg.C_GuildLeave")
	proto.RegisterType((*GS_GuildLeave_R)(nil), "msg.GS_GuildLeave_R")
	proto.RegisterType((*C_GuildKick)(nil), "msg.C_GuildKick")
	proto.RegisterType((*GS_GuildKick_R)(nil), "msg.GS_GuildKick_R")
	proto.RegisterType((*C_GuildSetRank)(nil), "msg.C_GuildSetRank")
	proto.RegisterType((*GS_GuildSetRank_R)(nil), "msg.GS_GuildSetRank_R")
	proto.RegisterType((*C_GuildChangeName)(nil), "msg.C_GuildChangeName")
	proto.RegisterType((*GS_GuildChangeName_R)(nil), "msg.GS_GuildChangeName_R")
	proto.RegisterType((*C_GuildApplyAcceptOneKey)(nil), "msg.C_GuildApplyAcceptOneKey")
	proto.RegisterType((*GS_GuildApplyAcceptOneKey_R)(nil), "msg.GS_GuildApplyAcceptOneKey_R")
	proto.RegisterType((*C_GuildApplyDenyOneKey)(nil), "msg.C_GuildApplyDenyOneKey")
	proto.RegisterType((*GS_GuildApplyDenyOneKey_R)(nil), "msg.GS_GuildApplyDenyOneKey_R")
	proto.RegisterType((*C_GuildKickOwner)(nil), "msg.C_GuildKickOwner")
	proto.RegisterType((*GS_GuildKickOwner_R)(nil), "msg.GS_GuildKickOwner_R")
	proto.RegisterType((*C_GuildGetLog)(nil), "msg.C_GuildGetLog")
	proto.RegisterType((*GS_GuildGetLog_R)(nil), "msg.GS_GuildGetLog_R")
	proto.RegisterType((*C_GuildSign)(nil), "msg.C_GuildSign")
	proto.RegisterType((*GS_GuildSign_R)(nil), "msg.GS_GuildSign_R")
	proto.RegisterType((*C_GuildSetNotice)(nil), "msg.C_GuildSetNotice")
	proto.RegisterType((*GS_GuildSetNotice_R)(nil), "msg.GS_GuildSetNotice_R")
	proto.RegisterType((*C_GuildSetIcon)(nil), "msg.C_GuildSetIcon")
	proto.RegisterType((*GS_GuildSetIcon_R)(nil), "msg.GS_GuildSetIcon_R")
	proto.RegisterType((*C_GuildPublishZm)(nil), "msg.C_GuildPublishZm")
	proto.RegisterType((*GS_GuildPublishZm_R)(nil), "msg.GS_GuildPublishZm_R")
	proto.RegisterType((*GuildWish)(nil), "msg.GuildWish")
	proto.RegisterType((*GS_GuildWishNew)(nil), "msg.GS_GuildWishNew")
	proto.RegisterType((*GS_GuildWishFullHelp)(nil), "msg.GS_GuildWishFullHelp")
	proto.RegisterType((*C_GuildWishItem)(nil), "msg.C_GuildWishItem")
	proto.RegisterType((*GS_GuildWishItem_R)(nil), "msg.GS_GuildWishItem_R")
	proto.RegisterType((*C_GuildWishHelp)(nil), "msg.C_GuildWishHelp")
	proto.RegisterType((*GS_GuildWishHelp_R)(nil), "msg.GS_GuildWishHelp_R")
	proto.RegisterType((*C_GuildWishClose)(nil), "msg.C_GuildWishClose")
	proto.RegisterType((*GS_GuildWishClose_R)(nil), "msg.GS_GuildWishClose_R")
	proto.RegisterType((*C_GuildWishList)(nil), "msg.C_GuildWishList")
	proto.RegisterType((*GS_GuildWishList_R)(nil), "msg.GS_GuildWishList_R")
	proto.RegisterType((*GuildHarborDonateRec)(nil), "msg.GuildHarborDonateRec")
	proto.RegisterType((*GS_GuildHarborXpChange)(nil), "msg.GS_GuildHarborXpChange")
	proto.RegisterType((*C_GuildHarborDonate)(nil), "msg.C_GuildHarborDonate")
	proto.RegisterType((*GS_GuildHarborDonate_R)(nil), "msg.GS_GuildHarborDonate_R")
	proto.RegisterType((*C_GuildHarborDonateList)(nil), "msg.C_GuildHarborDonateList")
	proto.RegisterType((*GS_GuildHarborDonateList_R)(nil), "msg.GS_GuildHarborDonateList_R")
	proto.RegisterType((*GuildOrderRec)(nil), "msg.GuildOrderRec")
	proto.RegisterType((*C_GuildOrderGet)(nil), "msg.C_GuildOrderGet")
	proto.RegisterType((*GS_GuildOrderGet_R)(nil), "msg.GS_GuildOrderGet_R")
	proto.RegisterType((*C_GuildOrderStarup)(nil), "msg.C_GuildOrderStarup")
	proto.RegisterType((*GS_GuildOrderStarup_R)(nil), "msg.GS_GuildOrderStarup_R")
	proto.RegisterType((*C_GuildOrderStart)(nil), "msg.C_GuildOrderStart")
	proto.RegisterType((*GS_GuildOrderStart_R)(nil), "msg.GS_GuildOrderStart_R")
	proto.RegisterType((*C_GuildOrderClose)(nil), "msg.C_GuildOrderClose")
	proto.RegisterType((*GS_GuildOrderClose_R)(nil), "msg.GS_GuildOrderClose_R")
	proto.RegisterType((*C_GuildOrderList)(nil), "msg.C_GuildOrderList")
	proto.RegisterType((*GS_GuildOrderList_R)(nil), "msg.GS_GuildOrderList_R")
	proto.RegisterType((*C_GuildTechLevelup)(nil), "msg.C_GuildTechLevelup")
	proto.RegisterType((*GS_GuildTechLevelup_R)(nil), "msg.GS_GuildTechLevelup_R")
	proto.RegisterType((*C_GuildTechReset)(nil), "msg.C_GuildTechReset")
	proto.RegisterType((*GS_GuildTechReset_R)(nil), "msg.GS_GuildTechReset_R")
	proto.RegisterType((*C_GuildTechGetInfo)(nil), "msg.C_GuildTechGetInfo")
	proto.RegisterType((*GS_GuildTechGetInfo_R)(nil), "msg.GS_GuildTechGetInfo_R")
	proto.RegisterType((*GuildBossHistory)(nil), "msg.GuildBossHistory")
	proto.RegisterType((*GuildBossDmg)(nil), "msg.GuildBossDmg")
	proto.RegisterType((*C_GuildBossFight)(nil), "msg.C_GuildBossFight")
	proto.RegisterType((*GS_GuildBossFight_R)(nil), "msg.GS_GuildBossFight_R")
	proto.RegisterType((*C_GuildBossGetCurrent)(nil), "msg.C_GuildBossGetCurrent")
	proto.RegisterType((*GS_GuildBossGetCurrent_R)(nil), "msg.GS_GuildBossGetCurrent_R")
	proto.RegisterType((*C_GuildBossGetHistory)(nil), "msg.C_GuildBossGetHistory")
	proto.RegisterType((*GS_GuildBossGetHistory_R)(nil), "msg.GS_GuildBossGetHistory_R")
}
func (m *GuildRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Icon))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Lv))
	}
	if m.MemberN != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.MemberN))
	}
	if m.NeedLv != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.NeedLv))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rank))
	}
	if m.AtkPwr != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.AtkPwr))
	}
	return i, nil
}

func (m *GuildInfo_Full) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildInfo_Full) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Row.Size()))
		n1, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Exp))
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	if m.AMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.AMode))
	}
	if len(m.Mbs) > 0 {
		for _, msg := range m.Mbs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HarborLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.HarborLevel))
	}
	if m.HarborXp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.HarborXp))
	}
	if m.ZmTs != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ZmTs))
	}
	if m.PlrData != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.PlrData.Size()))
		n2, err := m.PlrData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GuildMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Plr.Size()))
		n3, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rank))
	}
	if m.AtkPwr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.AtkPwr))
	}
	if m.Online {
		dAtA[i] = 0x20
		i++
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OfflineTs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.OfflineTs))
	}
	if m.SignTs != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.SignTs))
	}
	return i, nil
}

func (m *GuildApplyRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildApplyRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Plr.Size()))
		n4, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GuildLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Id))
	}
	if len(m.Param) > 0 {
		for k, _ := range m.Param {
			dAtA[i] = 0x12
			i++
			v := m.Param[k]
			mapSize := 1 + len(k) + sovCGs_20Guild(uint64(len(k))) + 1 + len(v) + sovCGs_20Guild(uint64(len(v)))
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Ts))
	}
	return i, nil
}

func (m *GuildPlrData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildPlrData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Signed {
		dAtA[i] = 0x8
		i++
		if m.Signed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WishTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.WishTs))
	}
	if len(m.WishCnt) > 0 {
		for k, _ := range m.WishCnt {
			dAtA[i] = 0x1a
			i++
			v := m.WishCnt[k]
			mapSize := 1 + sovCGs_20Guild(uint64(k)) + 1 + sovCGs_20Guild(uint64(v))
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *GS_GuildPlrLeaveTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildPlrLeaveTs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeaveTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.LeaveTs))
	}
	if m.LeaveCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.LeaveCnt))
	}
	return i, nil
}

func (m *GS_Guild_Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_Join) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if m.Mb != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Mb.Size()))
		n5, err := m.Mb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GS_Guild_Leave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_Leave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Reason))
	}
	if len(m.PId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	if len(m.PName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PName)))
		i += copy(dAtA[i:], m.PName)
	}
	return i, nil
}

func (m *GS_Guild_MbRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_MbRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	if len(m.PName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PName)))
		i += copy(dAtA[i:], m.PName)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *GS_Guild_Lv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_Lv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *GS_Guild_Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_Notice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Notice) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *GS_Guild_Icon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_Icon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Icon != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Icon))
	}
	return i, nil
}

func (m *GS_Guild_NewApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Guild_NewApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	return i, nil
}

func (m *C_GuildCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Icon))
	}
	return i, nil
}

func (m *GS_GuildCreate_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildCreate_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildDestroy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildDestroy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildDestroy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildDestroy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildChangeSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildChangeSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.AMode))
	}
	if m.NeedLv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.NeedLv))
	}
	return i, nil
}

func (m *GS_GuildChangeSetting_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildChangeSetting_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *GS_GuildList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GuildPlrApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildPlrApplyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildPlrApplyList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildPlrApplyList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GuildSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GS_GuildSearch_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildSearch_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Row != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Row.Size()))
		n6, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *C_GuildApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildApplyList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GuildInfoFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildInfoFull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildInfoFull_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildInfoFull_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Info.Size()))
		n7, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *C_GuildApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	return i, nil
}

func (m *GS_GuildApply_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApply_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildApplyCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	return i, nil
}

func (m *GS_GuildApplyCancel_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyCancel_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildApplyAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyAccept) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	return i, nil
}

func (m *GS_GuildApplyAccept_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyAccept_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildApplyDeny) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyDeny) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	return i, nil
}

func (m *GS_GuildApplyDeny_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyDeny_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildLeave_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildLeave_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	return i, nil
}

func (m *GS_GuildKick_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildKick_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildSetRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildSetRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PId)))
		i += copy(dAtA[i:], m.PId)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *GS_GuildSetRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildSetRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GS_GuildChangeName_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildChangeName_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildApplyAcceptOneKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyAcceptOneKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildApplyAcceptOneKey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyAcceptOneKey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildApplyDenyOneKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildApplyDenyOneKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildApplyDenyOneKey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildApplyDenyOneKey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildKickOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildKickOwner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildKickOwner_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildKickOwner_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildGetLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildGetLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildGetLog_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildGetLog_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Log) > 0 {
		for _, msg := range m.Log {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_GuildSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildSign_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildSign_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n8, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *C_GuildSetNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildSetNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Notice) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *GS_GuildSetNotice_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildSetNotice_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildSetIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildSetIcon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Icon != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Icon))
	}
	return i, nil
}

func (m *GS_GuildSetIcon_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildSetIcon_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildPublishZm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildPublishZm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildPublishZm_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildPublishZm_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.ZmTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ZmTs))
	}
	return i, nil
}

func (m *GuildWish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildWish) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	if len(m.PlrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	if m.ItemNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ItemNum))
	}
	if m.Helps != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Helps))
	}
	return i, nil
}

func (m *GS_GuildWishNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Num))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildWishFullHelp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishFullHelp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *C_GuildWishItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildWishItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GS_GuildWishItem_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishItem_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *C_GuildWishHelp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildWishHelp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildWishHelp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishHelp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n9, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *C_GuildWishClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildWishClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildWishClose_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishClose_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n10, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *C_GuildWishList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildWishList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildWishList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildWishList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Wishes) > 0 {
		for _, msg := range m.Wishes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildHarborDonateRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildHarborDonateRec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Plr.Size()))
		n11, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Val != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *GS_GuildHarborXpChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildHarborXpChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Lv))
	}
	if m.Xp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Xp))
	}
	return i, nil
}

func (m *C_GuildHarborDonate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildHarborDonate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Which != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Which))
	}
	return i, nil
}

func (m *GS_GuildHarborDonate_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildHarborDonate_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildHarborDonateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildHarborDonateList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildHarborDonateList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildHarborDonateList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildOrderRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildOrderRec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	if m.Star != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Star))
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.StartTs))
	}
	return i, nil
}

func (m *C_GuildOrderGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildOrderGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildOrderGet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildOrderGet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GetOrdersTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.GetOrdersTs))
	}
	return i, nil
}

func (m *C_GuildOrderStarup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildOrderStarup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildOrderStarup_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildOrderStarup_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildOrderStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildOrderStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildOrderStart_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildOrderStart_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.StartTs))
	}
	return i, nil
}

func (m *C_GuildOrderClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildOrderClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_GuildOrderClose_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildOrderClose_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n12, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *C_GuildOrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildOrderList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildOrderList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildOrderList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GetOrdersTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.GetOrdersTs))
	}
	return i, nil
}

func (m *C_GuildTechLevelup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildTechLevelup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_GuildTechLevelup_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildTechLevelup_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_GuildTechReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildTechReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildTechReset_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildTechReset_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n13, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *C_GuildTechGetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildTechGetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_GuildTechGetInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildTechGetInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Techs) > 0 {
		for k, _ := range m.Techs {
			dAtA[i] = 0xa
			i++
			v := m.Techs[k]
			mapSize := 1 + sovCGs_20Guild(uint64(k)) + 1 + sovCGs_20Guild(uint64(v))
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *GuildBossHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Num))
	}
	if len(m.Dmgs) > 0 {
		for _, msg := range m.Dmgs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_20Guild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildBossDmg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossDmg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Plr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Plr.Size()))
		n14, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Dmg != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dmg))))
		i += 8
	}
	return i, nil
}

func (m *C_GuildBossFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildBossFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Team.Size()))
		n15, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *GS_GuildBossFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildBossFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Replay.Size()))
		n16, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Rewards.Size()))
		n17, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Dmg != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dmg))))
		i += 8
	}
	if m.HpLeft != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HpLeft))))
		i += 8
	}
	return i, nil
}

func (m *C_GuildBossGetCurrent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildBossGetCurrent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OnlyNum {
		dAtA[i] = 0x8
		i++
		if m.OnlyNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_GuildBossGetCurrent_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildBossGetCurrent_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Info.Size()))
		n18, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.HpLeft != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HpLeft))))
		i += 8
	}
	return i, nil
}

func (m *C_GuildBossGetHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_GuildBossGetHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GS_GuildBossGetHistory_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_GuildBossGetHistory_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_20Guild(dAtA, i, uint64(m.Info.Size()))
		n19, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func encodeVarintCGs_20Guild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuildRow) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Icon))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Lv))
	}
	if m.MemberN != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.MemberN))
	}
	if m.NeedLv != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.NeedLv))
	}
	if m.Rank != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Rank))
	}
	if m.AtkPwr != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.AtkPwr))
	}
	return n
}

func (m *GuildInfo_Full) Size() (n int) {
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Exp))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.AMode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.AMode))
	}
	if len(m.Mbs) > 0 {
		for _, e := range m.Mbs {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	if m.HarborLevel != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.HarborLevel))
	}
	if m.HarborXp != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.HarborXp))
	}
	if m.ZmTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ZmTs))
	}
	if m.PlrData != nil {
		l = m.PlrData.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GuildMemberInfo) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Rank))
	}
	if m.AtkPwr != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.AtkPwr))
	}
	if m.Online {
		n += 2
	}
	if m.OfflineTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.OfflineTs))
	}
	if m.SignTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.SignTs))
	}
	return n
}

func (m *GuildApplyRow) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GuildLog) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Id))
	}
	if len(m.Param) > 0 {
		for k, v := range m.Param {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCGs_20Guild(uint64(len(k))) + 1 + len(v) + sovCGs_20Guild(uint64(len(v)))
			n += mapEntrySize + 1 + sovCGs_20Guild(uint64(mapEntrySize))
		}
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Ts))
	}
	return n
}

func (m *GuildPlrData) Size() (n int) {
	var l int
	_ = l
	if m.Signed {
		n += 2
	}
	if m.WishTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.WishTs))
	}
	if len(m.WishCnt) > 0 {
		for k, v := range m.WishCnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_20Guild(uint64(k)) + 1 + sovCGs_20Guild(uint64(v))
			n += mapEntrySize + 1 + sovCGs_20Guild(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GS_GuildPlrLeaveTs) Size() (n int) {
	var l int
	_ = l
	if m.LeaveTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.LeaveTs))
	}
	if m.LeaveCnt != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.LeaveCnt))
	}
	return n
}

func (m *GS_Guild_Join) Size() (n int) {
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Mb != nil {
		l = m.Mb.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_Guild_Leave) Size() (n int) {
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Reason))
	}
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	l = len(m.PName)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_Guild_MbRank) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	l = len(m.PName)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Rank))
	}
	return n
}

func (m *GS_Guild_Lv) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Exp))
	}
	return n
}

func (m *GS_Guild_Notice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_Guild_Icon) Size() (n int) {
	var l int
	_ = l
	if m.Icon != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Icon))
	}
	return n
}

func (m *GS_Guild_NewApply) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Icon))
	}
	return n
}

func (m *GS_GuildCreate_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildDestroy) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildDestroy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildChangeSetting) Size() (n int) {
	var l int
	_ = l
	if m.AMode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.AMode))
	}
	if m.NeedLv != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.NeedLv))
	}
	return n
}

func (m *GS_GuildChangeSetting_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildList) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Page))
	}
	return n
}

func (m *GS_GuildList_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *C_GuildPlrApplyList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildPlrApplyList_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *C_GuildSearch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildSearch_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildApplyList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildApplyList_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *C_GuildInfoFull) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildInfoFull_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildApply) Size() (n int) {
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildApply_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildApplyCancel) Size() (n int) {
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildApplyCancel_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildApplyAccept) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildApplyAccept_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildApplyDeny) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildApplyDeny_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildLeave) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildLeave_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildKick) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildKick_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildSetRank) Size() (n int) {
	var l int
	_ = l
	l = len(m.PId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Rank))
	}
	return n
}

func (m *GS_GuildSetRank_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildChangeName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildChangeName_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildApplyAcceptOneKey) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildApplyAcceptOneKey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildApplyDenyOneKey) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildApplyDenyOneKey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildKickOwner) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildKickOwner_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildGetLog) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildGetLog_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *C_GuildSign) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildSign_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildSetNotice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildSetNotice_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildSetIcon) Size() (n int) {
	var l int
	_ = l
	if m.Icon != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Icon))
	}
	return n
}

func (m *GS_GuildSetIcon_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildPublishZm) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildPublishZm_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.ZmTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ZmTs))
	}
	return n
}

func (m *GuildWish) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.ItemNum != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ItemNum))
	}
	if m.Helps != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Helps))
	}
	return n
}

func (m *GS_GuildWishNew) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Num))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildWishFullHelp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *C_GuildWishItem) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Num))
	}
	return n
}

func (m *GS_GuildWishItem_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *C_GuildWishHelp) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildWishHelp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildWishClose) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildWishClose_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildWishList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildWishList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Wishes) > 0 {
		for _, e := range m.Wishes {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *GuildHarborDonateRec) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Val))
	}
	return n
}

func (m *GS_GuildHarborXpChange) Size() (n int) {
	var l int
	_ = l
	if m.Lv != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Lv))
	}
	if m.Xp != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Xp))
	}
	return n
}

func (m *C_GuildHarborDonate) Size() (n int) {
	var l int
	_ = l
	if m.Which != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Which))
	}
	return n
}

func (m *GS_GuildHarborDonate_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildHarborDonateList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildHarborDonateList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *GuildOrderRec) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	if m.Star != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Star))
	}
	if m.StartTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.StartTs))
	}
	return n
}

func (m *C_GuildOrderGet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildOrderGet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	if m.GetOrdersTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.GetOrdersTs))
	}
	return n
}

func (m *C_GuildOrderStarup) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildOrderStarup_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildOrderStart) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildOrderStart_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.StartTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.StartTs))
	}
	return n
}

func (m *C_GuildOrderClose) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Seq))
	}
	return n
}

func (m *GS_GuildOrderClose_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildOrderList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildOrderList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	if m.GetOrdersTs != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.GetOrdersTs))
	}
	return n
}

func (m *C_GuildTechLevelup) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Id))
	}
	return n
}

func (m *GS_GuildTechLevelup_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_GuildTechReset) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildTechReset_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *C_GuildTechGetInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_GuildTechGetInfo_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Techs) > 0 {
		for k, v := range m.Techs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_20Guild(uint64(k)) + 1 + sovCGs_20Guild(uint64(v))
			n += mapEntrySize + 1 + sovCGs_20Guild(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GuildBossHistory) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Num))
	}
	if len(m.Dmgs) > 0 {
		for _, e := range m.Dmgs {
			l = e.Size()
			n += 1 + l + sovCGs_20Guild(uint64(l))
		}
	}
	return n
}

func (m *GuildBossDmg) Size() (n int) {
	var l int
	_ = l
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Dmg != 0 {
		n += 9
	}
	return n
}

func (m *C_GuildBossFight) Size() (n int) {
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func (m *GS_GuildBossFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.Dmg != 0 {
		n += 9
	}
	if m.HpLeft != 0 {
		n += 9
	}
	return n
}

func (m *C_GuildBossGetCurrent) Size() (n int) {
	var l int
	_ = l
	if m.OnlyNum {
		n += 2
	}
	return n
}

func (m *GS_GuildBossGetCurrent_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	if m.HpLeft != 0 {
		n += 9
	}
	return n
}

func (m *C_GuildBossGetHistory) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.Num))
	}
	return n
}

func (m *GS_GuildBossGetHistory_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_20Guild(uint64(m.ErrorCode))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_20Guild(uint64(l))
	}
	return n
}

func sovCGs_20Guild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_20Guild(x uint64) (n int) {
	return sovCGs_20Guild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberN", wireType)
			}
			m.MemberN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLv", wireType)
			}
			m.NeedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkPwr", wireType)
			}
			m.AtkPwr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtkPwr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildInfo_Full) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildInfo_Full: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildInfo_Full: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &GuildRow{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMode", wireType)
			}
			m.AMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AMode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbs = append(m.Mbs, &GuildMemberInfo{})
			if err := m.Mbs[len(m.Mbs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HarborLevel", wireType)
			}
			m.HarborLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HarborLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HarborXp", wireType)
			}
			m.HarborXp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HarborXp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZmTs", wireType)
			}
			m.ZmTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZmTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlrData == nil {
				m.PlrData = &GuildPlrData{}
			}
			if err := m.PlrData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkPwr", wireType)
			}
			m.AtkPwr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtkPwr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTs", wireType)
			}
			m.OfflineTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTs", wireType)
			}
			m.SignTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildApplyRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildApplyRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildApplyRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Param == nil {
				m.Param = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_20Guild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCGs_20Guild
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCGs_20Guild
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_20Guild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Param[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildPlrData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildPlrData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildPlrData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishTs", wireType)
			}
			m.WishTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WishTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WishCnt == nil {
				m.WishCnt = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_20Guild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_20Guild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WishCnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildPlrLeaveTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildPlrLeaveTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildPlrLeaveTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveTs", wireType)
			}
			m.LeaveTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveCnt", wireType)
			}
			m.LeaveCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mb == nil {
				m.Mb = &GuildMemberInfo{}
			}
			if err := m.Mb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_Leave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_Leave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_Leave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_MbRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_MbRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_MbRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_Lv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_Lv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_Lv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_Icon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_Icon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_Icon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Guild_NewApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Guild_NewApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Guild_NewApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildCreate_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildCreate_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildCreate_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildDestroy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildDestroy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildDestroy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildDestroy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildDestroy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildDestroy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildChangeSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildChangeSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildChangeSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMode", wireType)
			}
			m.AMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AMode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLv", wireType)
			}
			m.NeedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildChangeSetting_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildChangeSetting_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildChangeSetting_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &GuildRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildPlrApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildPlrApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildPlrApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildPlrApplyList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildPlrApplyList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildPlrApplyList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &GuildRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildSearch_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildSearch_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildSearch_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &GuildRow{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &GuildApplyRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildInfoFull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildInfoFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildInfoFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildInfoFull_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildInfoFull_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildInfoFull_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GuildInfo_Full{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApply_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApply_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApply_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyCancel_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyCancel_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyCancel_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyAccept_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyAccept_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyAccept_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyDeny) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyDeny: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyDeny: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyDeny_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyDeny_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyDeny_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildLeave_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildLeave_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildLeave_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildKick_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildKick_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildKick_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildSetRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildSetRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildSetRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildSetRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildSetRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildSetRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildChangeName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildChangeName_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildChangeName_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildChangeName_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyAcceptOneKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyAcceptOneKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyAcceptOneKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyAcceptOneKey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyAcceptOneKey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyAcceptOneKey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildApplyDenyOneKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildApplyDenyOneKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildApplyDenyOneKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildApplyDenyOneKey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildApplyDenyOneKey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildApplyDenyOneKey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildKickOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildKickOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildKickOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildKickOwner_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildKickOwner_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildKickOwner_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildGetLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildGetLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildGetLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildGetLog_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildGetLog_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildGetLog_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &GuildLog{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildSign_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildSign_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildSign_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildSetNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildSetNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildSetNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildSetNotice_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildSetNotice_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildSetNotice_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildSetIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildSetIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildSetIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildSetIcon_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildSetIcon_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildSetIcon_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildPublishZm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildPublishZm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildPublishZm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildPublishZm_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildPublishZm_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildPublishZm_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZmTs", wireType)
			}
			m.ZmTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZmTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildWish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildWish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildWish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helps", wireType)
			}
			m.Helps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Helps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishFullHelp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishFullHelp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishFullHelp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildWishItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildWishItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildWishItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishItem_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishItem_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishItem_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildWishHelp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildWishHelp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildWishHelp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishHelp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishHelp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishHelp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildWishClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildWishClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildWishClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishClose_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishClose_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishClose_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildWishList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildWishList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildWishList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildWishList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildWishList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildWishList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wishes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wishes = append(m.Wishes, &GuildWish{})
			if err := m.Wishes[len(m.Wishes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildHarborDonateRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildHarborDonateRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildHarborDonateRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildHarborXpChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildHarborXpChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildHarborXpChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xp", wireType)
			}
			m.Xp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildHarborDonate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildHarborDonate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildHarborDonate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Which", wireType)
			}
			m.Which = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Which |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildHarborDonate_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildHarborDonate_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildHarborDonate_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildHarborDonateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildHarborDonateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildHarborDonateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildHarborDonateList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildHarborDonateList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildHarborDonateList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GuildHarborDonateRec{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildOrderRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildOrderRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildOrderRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildOrderGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildOrderGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildOrderGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildOrderGet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildOrderGet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildOrderGet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GuildOrderRec{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOrdersTs", wireType)
			}
			m.GetOrdersTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetOrdersTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildOrderStarup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildOrderStarup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildOrderStarup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildOrderStarup_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildOrderStarup_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildOrderStarup_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildOrderStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildOrderStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildOrderStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildOrderStart_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildOrderStart_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildOrderStart_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildOrderClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildOrderClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildOrderClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildOrderClose_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildOrderClose_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildOrderClose_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildOrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildOrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildOrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildOrderList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildOrderList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildOrderList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GuildOrderRec{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOrdersTs", wireType)
			}
			m.GetOrdersTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetOrdersTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildTechLevelup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildTechLevelup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildTechLevelup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildTechLevelup_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildTechLevelup_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildTechLevelup_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildTechReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildTechReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildTechReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildTechReset_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildTechReset_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildTechReset_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildTechGetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildTechGetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildTechGetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildTechGetInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildTechGetInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildTechGetInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Techs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Techs == nil {
				m.Techs = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_20Guild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_20Guild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_20Guild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Techs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBossHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dmgs = append(m.Dmgs, &GuildBossDmg{})
			if err := m.Dmgs[len(m.Dmgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBossDmg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossDmg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossDmg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dmg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildBossFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildBossFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildBossFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &TeamFormation{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildBossFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildBossFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildBossFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dmg = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpLeft", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HpLeft = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildBossGetCurrent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildBossGetCurrent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildBossGetCurrent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyNum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildBossGetCurrent_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildBossGetCurrent_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildBossGetCurrent_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GuildBossHistory{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpLeft", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HpLeft = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_GuildBossGetHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_GuildBossGetHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_GuildBossGetHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_GuildBossGetHistory_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_GuildBossGetHistory_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_GuildBossGetHistory_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GuildBossHistory{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_20Guild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_20Guild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_20Guild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_20Guild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_20Guild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_20Guild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_20Guild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_20Guild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_20Guild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_20Guild   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.20.guild.proto", fileDescriptorCGs_20Guild) }

var fileDescriptorCGs_20Guild = []byte{
	// 2003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x19, 0xcb, 0x72, 0xdc, 0xc6,
	0xd1, 0x00, 0xf8, 0x52, 0x53, 0xa4, 0x48, 0x88, 0x94, 0x21, 0x26, 0x45, 0xd3, 0xa3, 0x77, 0x9c,
	0xda, 0xc8, 0x52, 0xec, 0x30, 0x72, 0x2e, 0x12, 0x29, 0x51, 0xb4, 0x96, 0xe4, 0x6a, 0x76, 0x4b,
	0x56, 0xe4, 0x54, 0xb1, 0xc0, 0xe5, 0x08, 0xdc, 0x12, 0x16, 0xd8, 0x00, 0x58, 0x32, 0xac, 0xdc,
	0xf2, 0x01, 0xa9, 0x1c, 0x72, 0xc8, 0x67, 0xf8, 0x90, 0x8f, 0xf0, 0x31, 0x9f, 0x90, 0x28, 0x3f,
	0xe2, 0xea, 0x79, 0x63, 0x17, 0x34, 0xc8, 0x2a, 0x9e, 0x76, 0xba, 0xd1, 0xd3, 0xef, 0xee, 0xe9,
	0x99, 0x85, 0xeb, 0xdd, 0xfd, 0x28, 0x6f, 0x3c, 0x7a, 0xd8, 0x88, 0x86, 0xbd, 0xf8, 0xb0, 0x31,
	0xc8, 0xd2, 0x22, 0xf5, 0xbd, 0x7e, 0x1e, 0xad, 0x40, 0x94, 0x46, 0xa9, 0x40, 0xac, 0x2c, 0x73,
	0xaa, 0x87, 0x0f, 0x1b, 0x79, 0x91, 0x0d, 0xbb, 0x45, 0x2e, 0xd0, 0xe4, 0x07, 0x07, 0x66, 0xb6,
	0x70, 0x1f, 0x4d, 0x4f, 0xfc, 0x79, 0x70, 0xb7, 0x0f, 0x03, 0x67, 0xcd, 0xb9, 0x7f, 0x85, 0xba,
	0xdb, 0x87, 0xbe, 0x0f, 0x13, 0xbb, 0x61, 0x9f, 0x05, 0x2e, 0xc7, 0xf0, 0x35, 0xe2, 0xb6, 0xbb,
	0x69, 0x12, 0x78, 0x6b, 0xce, 0xfd, 0x49, 0xca, 0xd7, 0xb8, 0xaf, 0x79, 0x1c, 0x4c, 0x70, 0x8c,
	0xdb, 0x3c, 0xf6, 0x03, 0x98, 0xde, 0x61, 0xfd, 0x03, 0x96, 0xed, 0x06, 0x93, 0x1c, 0xa9, 0x40,
	0xff, 0x06, 0x4c, 0xed, 0x32, 0x76, 0xd8, 0x3c, 0x0e, 0xa6, 0xf8, 0x07, 0x09, 0x21, 0x57, 0x1a,
	0x26, 0x1f, 0x82, 0x69, 0xc1, 0x15, 0xd7, 0x48, 0xfb, 0xb4, 0xf8, 0xd0, 0x3a, 0xc9, 0x82, 0x19,
	0x41, 0x2b, 0x20, 0xf2, 0x2f, 0x17, 0xe6, 0xb9, 0xca, 0xdb, 0xc9, 0xfb, 0x74, 0xff, 0xc5, 0x30,
	0x8e, 0xfd, 0xcf, 0xc0, 0xa3, 0xe9, 0x09, 0xd7, 0x7c, 0xf6, 0xd1, 0x5c, 0xa3, 0x9f, 0x47, 0x0d,
	0x65, 0x14, 0xc5, 0x2f, 0xfe, 0x02, 0x78, 0xcf, 0xff, 0x32, 0xe0, 0x86, 0x78, 0x14, 0x97, 0x5c,
	0x93, 0xb4, 0xe8, 0x75, 0x19, 0xb7, 0xe4, 0x0a, 0x95, 0x90, 0xbf, 0x04, 0x93, 0x4f, 0x77, 0xd2,
	0x43, 0x26, 0xcd, 0x11, 0x80, 0x7f, 0x17, 0xbc, 0x9d, 0x83, 0x3c, 0x98, 0x5a, 0xf3, 0xee, 0xcf,
	0x3e, 0x5a, 0x32, 0x02, 0x84, 0x5d, 0xa8, 0x08, 0x45, 0x02, 0x7f, 0x0d, 0x66, 0x5f, 0x86, 0xd9,
	0x41, 0x9a, 0x35, 0xd9, 0x31, 0x8b, 0xa5, 0x39, 0x36, 0xca, 0x5f, 0x81, 0x19, 0x01, 0xbe, 0x1d,
	0x70, 0xbb, 0x3c, 0xaa, 0x61, 0xf4, 0xc2, 0xbb, 0x7e, 0x27, 0x0f, 0xae, 0x70, 0x3c, 0x5f, 0xfb,
	0x5f, 0xc0, 0x74, 0x2b, 0xce, 0x36, 0xc3, 0x22, 0x0c, 0x80, 0x9b, 0xb7, 0x68, 0xa4, 0xcb, 0x0f,
	0x54, 0x51, 0x90, 0x7f, 0x3b, 0x70, 0x6d, 0x44, 0x2f, 0xff, 0x1e, 0x78, 0xad, 0x38, 0x93, 0xbe,
	0x59, 0xe6, 0x9b, 0x5b, 0x71, 0x78, 0xca, 0xb2, 0x76, 0xaf, 0x3f, 0x88, 0x99, 0xd0, 0xbd, 0x15,
	0x67, 0x3a, 0x06, 0x6e, 0x65, 0x0c, 0x3c, 0x3b, 0x06, 0x88, 0xdf, 0x4b, 0xe2, 0x5e, 0x22, 0xdc,
	0x34, 0x43, 0x25, 0xe4, 0xff, 0x12, 0xae, 0xec, 0xbd, 0x7f, 0x8f, 0xcb, 0x4e, 0xce, 0x63, 0xef,
	0x51, 0x83, 0xc0, 0x5d, 0xed, 0x5e, 0x94, 0x74, 0x72, 0x1e, 0x7d, 0x8f, 0x4a, 0x88, 0xac, 0xc3,
	0x1c, 0xd7, 0xfa, 0xe9, 0x60, 0x10, 0x9f, 0x62, 0xb8, 0xce, 0xab, 0x33, 0xf9, 0xa7, 0x4a, 0xdf,
	0x66, 0x1a, 0x59, 0xe9, 0x3b, 0xc9, 0xd3, 0xb7, 0x01, 0x93, 0xad, 0x30, 0x0b, 0xfb, 0x81, 0xcb,
	0xc3, 0x16, 0x18, 0xc7, 0x35, 0xd3, 0xa8, 0xc1, 0x3f, 0x3d, 0x4f, 0x8a, 0xec, 0x94, 0x0a, 0x32,
	0xdc, 0xdf, 0xc9, 0xb9, 0xa1, 0x1e, 0x75, 0x3b, 0xf9, 0xca, 0x3a, 0x80, 0x21, 0xc2, 0x14, 0xfa,
	0xc0, 0x4e, 0x65, 0x75, 0xe0, 0x12, 0x53, 0xe5, 0x38, 0x8c, 0x87, 0xaa, 0x3e, 0x04, 0xf0, 0xc4,
	0x5d, 0x77, 0x30, 0x0e, 0x57, 0xed, 0x08, 0x29, 0xcb, 0x99, 0x50, 0x6f, 0x86, 0x4a, 0x08, 0xf1,
	0xdf, 0xf5, 0xf2, 0xa3, 0x4e, 0x2e, 0x53, 0x53, 0x42, 0xfe, 0x3a, 0x4c, 0xe3, 0x6a, 0x23, 0x29,
	0x02, 0x8f, 0x2b, 0xbf, 0x3a, 0x16, 0xf5, 0x86, 0x24, 0x10, 0x26, 0x28, 0xf2, 0x95, 0x27, 0x70,
	0xd5, 0xfe, 0x60, 0xab, 0x3d, 0x59, 0xa1, 0xf6, 0xa4, 0xad, 0xf6, 0xb7, 0xe0, 0x6f, 0xb5, 0xf7,
	0x95, 0x90, 0x26, 0x0b, 0x8f, 0x31, 0x6a, 0x01, 0x4c, 0xcb, 0x25, 0xe7, 0xe2, 0x51, 0x05, 0x62,
	0x2e, 0xf3, 0x25, 0xaa, 0x29, 0x98, 0x69, 0x98, 0xf4, 0x61, 0x4e, 0xf1, 0xda, 0xff, 0x36, 0xed,
	0x25, 0xc8, 0x46, 0x54, 0xad, 0xea, 0x30, 0x0a, 0xc4, 0xa4, 0xe1, 0x4b, 0xab, 0xd7, 0x18, 0x84,
	0x7f, 0x1b, 0xdc, 0x9d, 0x03, 0x1e, 0x95, 0xb3, 0x2a, 0xcf, 0xdd, 0x39, 0x20, 0x2d, 0x98, 0xd7,
	0xe2, 0xb8, 0x0e, 0xe8, 0x5a, 0xca, 0xc2, 0x3c, 0x4d, 0xa4, 0xed, 0x12, 0x42, 0x87, 0xb4, 0xb6,
	0x0f, 0xa5, 0x1c, 0x5c, 0xa2, 0x43, 0x5a, 0x5c, 0xb6, 0xe8, 0x04, 0x02, 0x20, 0x3b, 0x70, 0x4d,
	0x73, 0xdc, 0x39, 0xe0, 0xd5, 0x20, 0xb7, 0x3a, 0x15, 0x5b, 0x5d, 0x6b, 0xab, 0xae, 0x24, 0xcf,
	0x54, 0x12, 0xf9, 0x0a, 0x66, 0x8d, 0x82, 0xc7, 0xb8, 0x51, 0xb4, 0x08, 0xa1, 0x9c, 0x00, 0xc6,
	0xdb, 0x14, 0x79, 0x60, 0x69, 0x21, 0x3b, 0x94, 0xe9, 0x5c, 0x8e, 0xdd, 0xb9, 0xc8, 0x2d, 0xcb,
	0xe3, 0xbc, 0x2d, 0xab, 0x56, 0xed, 0x98, 0x56, 0x4d, 0xee, 0xc0, 0xa2, 0xe1, 0xc7, 0x4e, 0x78,
	0xc5, 0x8d, 0xdb, 0x45, 0xf6, 0x60, 0x6e, 0x43, 0x50, 0x6d, 0x64, 0x2c, 0x2c, 0x98, 0x3e, 0x0a,
	0x1c, 0xeb, 0x28, 0x30, 0x8a, 0xb8, 0xa5, 0x16, 0x5a, 0x71, 0x44, 0x90, 0x87, 0xb0, 0xa0, 0xe4,
	0x0a, 0x8e, 0xfb, 0x14, 0xe3, 0xfe, 0x3c, 0xcb, 0xd2, 0x6c, 0x03, 0xdb, 0xad, 0x50, 0xd2, 0x20,
	0xc8, 0x02, 0xcc, 0x4b, 0x15, 0x36, 0x59, 0x5e, 0x64, 0xe9, 0x29, 0xf9, 0xd2, 0xe8, 0x2e, 0x51,
	0xb5, 0x4c, 0x36, 0x61, 0x49, 0xd9, 0x71, 0x14, 0x26, 0x11, 0x6b, 0xb3, 0xa2, 0xe8, 0x25, 0x91,
	0xe9, 0xf2, 0x8e, 0xdd, 0xe5, 0xcd, 0xe9, 0xe4, 0xda, 0xa7, 0x13, 0xf9, 0x1d, 0x7c, 0xaa, 0x95,
	0xb7, 0xd9, 0xd4, 0x8a, 0xff, 0x1c, 0x66, 0xa5, 0xf8, 0x66, 0x2f, 0x2f, 0xd0, 0x31, 0xad, 0x30,
	0x52, 0x74, 0x7c, 0x4d, 0x5e, 0x9b, 0xc4, 0x45, 0x9a, 0x3a, 0x96, 0xfe, 0xe7, 0x30, 0x41, 0xd3,
	0x93, 0x5c, 0xf6, 0xb4, 0x91, 0xb3, 0x8e, 0x7f, 0x22, 0xcb, 0x70, 0x7d, 0x43, 0x57, 0x31, 0x8f,
	0x30, 0x72, 0x26, 0x7f, 0x84, 0x1b, 0x56, 0x75, 0x6b, 0xfc, 0x65, 0x48, 0xbc, 0xa5, 0xd3, 0xa5,
	0xcd, 0xc2, 0xac, 0x7b, 0x54, 0x95, 0x2e, 0xe4, 0xb5, 0x49, 0x01, 0x41, 0x55, 0x2b, 0x59, 0x1e,
	0xeb, 0xee, 0x59, 0xc7, 0x3a, 0xf1, 0x61, 0x41, 0xca, 0x35, 0x66, 0x7e, 0x0f, 0xd7, 0x95, 0x98,
	0xf3, 0xdb, 0x78, 0xb7, 0x64, 0xa3, 0x6f, 0x44, 0xa9, 0x23, 0x49, 0x1a, 0xba, 0x08, 0xd7, 0xa4,
	0x40, 0xec, 0x3c, 0x38, 0x7b, 0x90, 0xef, 0x4d, 0xd3, 0x54, 0xb8, 0x5a, 0x71, 0xf7, 0x60, 0x02,
	0x69, 0xa5, 0x65, 0xd7, 0x8d, 0x38, 0x3d, 0xd2, 0x50, 0x4e, 0x40, 0xee, 0xc3, 0x55, 0xdb, 0xc0,
	0xb3, 0x9b, 0x28, 0xf9, 0x8d, 0x69, 0x14, 0x9c, 0xb4, 0x36, 0x37, 0x1b, 0xe0, 0xdb, 0xac, 0x37,
	0xc2, 0xa4, 0xcb, 0xe2, 0x9f, 0x11, 0xf0, 0x15, 0x2c, 0x97, 0x04, 0x88, 0x0d, 0xb5, 0x62, 0xee,
	0x96, 0xc5, 0x3c, 0xed, 0x76, 0xd9, 0xa0, 0xa8, 0xe8, 0x38, 0xa3, 0xec, 0x05, 0x61, 0x2d, 0xfb,
	0xdb, 0xe5, 0x0c, 0xd8, 0x64, 0x49, 0x55, 0x3b, 0x7b, 0x3c, 0x92, 0x13, 0x48, 0x56, 0xcb, 0x7a,
	0x5e, 0xfb, 0x9e, 0x1f, 0x28, 0xb6, 0x87, 0x39, 0xa2, 0x96, 0xc1, 0x67, 0xba, 0xfa, 0x5f, 0xf5,
	0xba, 0x15, 0xa7, 0x07, 0x69, 0x98, 0xda, 0x47, 0x8a, 0x5a, 0x86, 0x5f, 0xeb, 0x96, 0xd8, 0x66,
	0xc5, 0x19, 0x27, 0x52, 0xc5, 0x14, 0x67, 0x37, 0x4e, 0xb9, 0xb1, 0x56, 0xd4, 0x3d, 0x58, 0x2c,
	0x35, 0x4e, 0x75, 0xae, 0x8d, 0x55, 0xf5, 0x6f, 0x61, 0xa9, 0xdc, 0x1b, 0x11, 0x5b, 0xcb, 0x7e,
	0x05, 0x82, 0xf1, 0xac, 0xd8, 0x4b, 0xd8, 0x2b, 0x76, 0x4a, 0xbe, 0x81, 0x5f, 0x54, 0x64, 0x82,
	0xf8, 0x58, 0xcb, 0x38, 0x80, 0x1b, 0xa3, 0xf9, 0x20, 0xd9, 0xfe, 0x1e, 0x6e, 0x8e, 0xe5, 0xc0,
	0x39, 0x99, 0x9a, 0x36, 0x83, 0x61, 0xda, 0x3b, 0x49, 0x58, 0x66, 0xa7, 0x94, 0x46, 0xd6, 0x32,
	0xba, 0xa6, 0xfb, 0xe4, 0x16, 0x2b, 0x9a, 0x69, 0x64, 0xf7, 0x44, 0x81, 0x39, 0x4f, 0x4f, 0x6c,
	0xa6, 0xd1, 0x78, 0x33, 0x6e, 0xa6, 0x11, 0xc5, 0x2f, 0x64, 0x4e, 0x67, 0x1d, 0xce, 0x98, 0xe4,
	0x8d, 0xc9, 0x31, 0x84, 0xcf, 0xd1, 0x09, 0xa7, 0x29, 0x3b, 0x09, 0xb3, 0xc3, 0x5c, 0x76, 0xa7,
	0xab, 0x5c, 0x86, 0xc4, 0x51, 0xf5, 0x91, 0xfc, 0x4a, 0xfb, 0xa4, 0xcd, 0x8a, 0x9a, 0xc9, 0xc4,
	0xf2, 0x95, 0x26, 0x3e, 0x47, 0x65, 0x5b, 0xc9, 0x7e, 0xe6, 0x3c, 0x53, 0x4e, 0x6d, 0x44, 0x5d,
	0x20, 0x9a, 0xad, 0xe1, 0x41, 0xdc, 0xcb, 0x8f, 0xde, 0xf5, 0xc9, 0x96, 0xd1, 0x50, 0x23, 0x6b,
	0x5d, 0xa5, 0xae, 0x6b, 0xae, 0xb9, 0xae, 0x91, 0xae, 0x9c, 0x65, 0x71, 0x06, 0xc7, 0xea, 0x6c,
	0xb3, 0x3f, 0xcb, 0xa9, 0x19, 0x97, 0x7c, 0x5e, 0x8c, 0x33, 0x3d, 0x7e, 0x0a, 0x00, 0x9b, 0xee,
	0x76, 0xc1, 0xfa, 0xbb, 0xc3, 0xbe, 0x9c, 0x99, 0x14, 0x88, 0xf4, 0x2f, 0x59, 0x3c, 0xc8, 0xd5,
	0x6d, 0x94, 0x03, 0x64, 0xdb, 0x74, 0x22, 0x94, 0xb3, 0xcb, 0x4e, 0x2a, 0xe7, 0xb3, 0x05, 0xf0,
	0x90, 0xa5, 0xe8, 0x04, 0xb8, 0x54, 0x0a, 0x79, 0x5a, 0x21, 0x72, 0xc3, 0x94, 0x2f, 0xb2, 0xc2,
	0xa3, 0x07, 0x65, 0x90, 0x5b, 0xfa, 0xa0, 0x43, 0x34, 0xaa, 0xa3, 0xd8, 0x39, 0x9a, 0x1d, 0xd9,
	0x34, 0x47, 0x9f, 0xa2, 0xaa, 0x75, 0x9a, 0x54, 0xc1, 0x35, 0x2a, 0x94, 0x45, 0xa1, 0xf4, 0x71,
	0xc7, 0x91, 0x77, 0x65, 0x51, 0x48, 0x75, 0x69, 0xa9, 0x6c, 0xce, 0x10, 0x7e, 0x73, 0x8a, 0xd3,
	0x9c, 0x55, 0x68, 0x60, 0xcd, 0x15, 0x9a, 0xec, 0xd2, 0x54, 0x58, 0x2c, 0xf9, 0x80, 0xcf, 0x31,
	0x7f, 0x28, 0x5b, 0x2c, 0xc7, 0x98, 0xbb, 0xe2, 0xc2, 0xc8, 0xf0, 0x2e, 0x86, 0x1d, 0x60, 0xde,
	0x74, 0x00, 0xc4, 0x53, 0xf9, 0x95, 0xbc, 0x86, 0x25, 0x8e, 0x14, 0x6f, 0x0b, 0x9b, 0x69, 0x12,
	0x16, 0x8c, 0xb2, 0xee, 0xf9, 0x5f, 0x03, 0x16, 0xc0, 0x7b, 0x13, 0xc6, 0x2a, 0x4e, 0x6f, 0xc2,
	0x98, 0xac, 0x9b, 0xf9, 0x51, 0xbd, 0x58, 0x88, 0x8e, 0x2f, 0xdf, 0x7f, 0x1c, 0xfd, 0xfe, 0x33,
	0x0f, 0xee, 0x5b, 0x75, 0x8b, 0x71, 0xdf, 0x0e, 0xc8, 0x17, 0x7a, 0x20, 0xb5, 0xd5, 0xc1, 0xe4,
	0xfe, 0xee, 0xa8, 0xd7, 0x3d, 0x52, 0x43, 0x38, 0x07, 0xc8, 0xd7, 0xa3, 0x62, 0x04, 0x75, 0x6d,
	0x59, 0xdf, 0x84, 0x4f, 0x2b, 0x84, 0x70, 0x57, 0xbe, 0x86, 0x95, 0x2a, 0x96, 0xd2, 0xa5, 0x8f,
	0x31, 0x46, 0xdd, 0x14, 0x63, 0x24, 0x7c, 0x7a, 0xd3, 0xf8, 0x74, 0xc4, 0x7d, 0x54, 0x51, 0xe2,
	0x05, 0x89, 0x13, 0xec, 0x65, 0x87, 0x2c, 0x43, 0xc7, 0x8e, 0xd7, 0xba, 0x0f, 0x13, 0xed, 0x22,
	0x54, 0x2f, 0x27, 0x7c, 0x8d, 0x95, 0x8e, 0xbf, 0x45, 0x47, 0x54, 0xb4, 0x47, 0x15, 0x68, 0x65,
	0x00, 0x67, 0xb9, 0xc5, 0x0a, 0xf2, 0x37, 0xc7, 0xa4, 0x80, 0x42, 0xd6, 0x66, 0xdc, 0xaf, 0x8d,
	0x35, 0x63, 0xc3, 0xac, 0x52, 0x56, 0x9b, 0xe1, 0xaf, 0xc1, 0xec, 0x16, 0x2b, 0x38, 0x3e, 0xd7,
	0x6f, 0x1f, 0x36, 0xca, 0x9a, 0xdf, 0x38, 0x0a, 0xd5, 0x1d, 0x56, 0x15, 0xa8, 0x35, 0xbf, 0x59,
	0x84, 0xb5, 0x51, 0xbb, 0xa3, 0xe7, 0x0c, 0xbd, 0xab, 0xa8, 0xe0, 0xbe, 0x6b, 0xda, 0x94, 0xa1,
	0xab, 0xf5, 0x85, 0xe5, 0x6d, 0xb7, 0xec, 0xed, 0x11, 0xb1, 0x67, 0xd5, 0xfc, 0x9f, 0x46, 0xc4,
	0x5e, 0x6e, 0xd1, 0x9b, 0x83, 0x88, 0x33, 0xe7, 0xa9, 0xca, 0x4c, 0x97, 0xd1, 0xc8, 0x7d, 0x6a,
	0x47, 0xd5, 0xb9, 0x70, 0x54, 0xdd, 0xf1, 0xa8, 0xde, 0xd6, 0x51, 0xed, 0xb0, 0xee, 0x11, 0x7f,
	0x7c, 0x18, 0x0e, 0x46, 0x1f, 0xd0, 0xec, 0x98, 0x5a, 0x64, 0x17, 0x38, 0x60, 0x71, 0x17, 0x65,
	0x39, 0x2b, 0xdd, 0xca, 0x34, 0xf2, 0xd2, 0x1c, 0xb9, 0x54, 0xb2, 0x66, 0x8b, 0x15, 0xfc, 0xee,
	0xf4, 0x77, 0xa7, 0xac, 0xbe, 0xc4, 0xef, 0x53, 0xff, 0x1b, 0x98, 0x44, 0x84, 0xf2, 0xe5, 0x1d,
	0xe1, 0xcb, 0x2a, 0xd2, 0x06, 0xa7, 0x93, 0xaf, 0x84, 0x7c, 0xbd, 0xb2, 0x0e, 0x60, 0x90, 0x17,
	0x7a, 0x5e, 0x7b, 0x05, 0x0b, 0x5c, 0xc2, 0xb3, 0x34, 0xcf, 0x5f, 0xf6, 0xf2, 0x22, 0x15, 0xfb,
	0xcb, 0x87, 0xaa, 0x7f, 0x07, 0x26, 0x36, 0xfb, 0x91, 0xaa, 0x5e, 0xeb, 0xb5, 0x17, 0xb7, 0x6d,
	0xf6, 0x23, 0xca, 0x3f, 0x93, 0x6d, 0xf9, 0xc2, 0x28, 0xb1, 0x17, 0x6a, 0xec, 0x9b, 0xfd, 0x88,
	0x6b, 0xe7, 0x50, 0x5c, 0x92, 0x27, 0x3a, 0x5e, 0xc8, 0xec, 0x45, 0x2f, 0x3a, 0x2a, 0xf0, 0x42,
	0xdc, 0x61, 0x61, 0x5f, 0xf2, 0x13, 0xd9, 0x86, 0x88, 0x17, 0x69, 0xd6, 0x0f, 0x8b, 0x5e, 0x9a,
	0x50, 0xfe, 0x9d, 0xfc, 0xe0, 0x98, 0xc0, 0xea, 0xdd, 0xb5, 0x81, 0x7d, 0x00, 0x53, 0x94, 0x0d,
	0xe2, 0xf0, 0x54, 0xc6, 0x55, 0x58, 0xf9, 0x2c, 0x2c, 0x8a, 0x98, 0x89, 0x0f, 0x54, 0x12, 0xd8,
	0x39, 0xe0, 0xfd, 0x4c, 0x0e, 0x28, 0xb3, 0x26, 0xb4, 0x59, 0x38, 0x8d, 0xbe, 0x1c, 0x34, 0xd9,
	0xfb, 0x82, 0x3f, 0x44, 0x3b, 0x54, 0x42, 0xe4, 0x4b, 0x58, 0xb6, 0xcc, 0xdd, 0x62, 0xc5, 0xc6,
	0x30, 0xcb, 0x58, 0x52, 0x60, 0xbb, 0xd8, 0x4b, 0xe2, 0x53, 0x15, 0x8f, 0x19, 0xaa, 0x40, 0xf2,
	0x57, 0x08, 0x6c, 0x23, 0xcd, 0x9e, 0x73, 0x58, 0x6a, 0xdf, 0xf4, 0x97, 0xcb, 0xd1, 0x94, 0x49,
	0x20, 0xee, 0xfa, 0x96, 0xbe, 0x5e, 0x49, 0xdf, 0x07, 0xa3, 0xfa, 0x9e, 0x99, 0x3b, 0xa4, 0x3b,
	0xa6, 0xa7, 0xa4, 0xbd, 0x44, 0x3d, 0x9f, 0x2d, 0xfd, 0xf8, 0xbf, 0xd5, 0x4f, 0x7e, 0xfc, 0xb8,
	0xea, 0xfc, 0xe7, 0xe3, 0xaa, 0xf3, 0xdf, 0x8f, 0xab, 0xce, 0x3f, 0xfe, 0xbf, 0xfa, 0xc9, 0xc1,
	0x14, 0xff, 0x3f, 0xe9, 0xf1, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x91, 0x63, 0x51, 0xcb, 0x8e,
	0x1a, 0x00, 0x00,
}
