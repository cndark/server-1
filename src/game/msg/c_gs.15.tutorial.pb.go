// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.15.tutorial.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TutorialData struct {
	Steps map[string]int32 `protobuf:"bytes,1,rep,name=Steps" json:"Steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TutorialData) Reset()                    { *m = TutorialData{} }
func (m *TutorialData) String() string            { return proto.CompactTextString(m) }
func (*TutorialData) ProtoMessage()               {}
func (*TutorialData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_15Tutorial, []int{0} }

// 设置步骤
type C_TutorialSet struct {
	Tp   string `protobuf:"bytes,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
	Step int32  `protobuf:"varint,2,opt,name=Step,proto3" json:"Step,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *C_TutorialSet) Reset()                    { *m = C_TutorialSet{} }
func (m *C_TutorialSet) String() string            { return proto.CompactTextString(m) }
func (*C_TutorialSet) ProtoMessage()               {}
func (*C_TutorialSet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_15Tutorial, []int{1} }

type GS_TutorialSet_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TutorialSet_R) Reset()                    { *m = GS_TutorialSet_R{} }
func (m *GS_TutorialSet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_TutorialSet_R) ProtoMessage()               {}
func (*GS_TutorialSet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_15Tutorial, []int{2} }

func init() {
	proto.RegisterType((*TutorialData)(nil), "msg.TutorialData")
	proto.RegisterType((*C_TutorialSet)(nil), "msg.C_TutorialSet")
	proto.RegisterType((*GS_TutorialSet_R)(nil), "msg.GS_TutorialSet_R")
}
func (m *TutorialData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TutorialData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Steps) > 0 {
		for k, _ := range m.Steps {
			dAtA[i] = 0xa
			i++
			v := m.Steps[k]
			mapSize := 1 + len(k) + sovCGs_15Tutorial(uint64(len(k))) + 1 + sovCGs_15Tutorial(uint64(v))
			i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *C_TutorialSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TutorialSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(len(m.Tp)))
		i += copy(dAtA[i:], m.Tp)
	}
	if m.Step != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(m.Step))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GS_TutorialSet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TutorialSet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_15Tutorial(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintCGs_15Tutorial(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TutorialData) Size() (n int) {
	var l int
	_ = l
	if len(m.Steps) > 0 {
		for k, v := range m.Steps {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCGs_15Tutorial(uint64(len(k))) + 1 + sovCGs_15Tutorial(uint64(v))
			n += mapEntrySize + 1 + sovCGs_15Tutorial(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_TutorialSet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tp)
	if l > 0 {
		n += 1 + l + sovCGs_15Tutorial(uint64(l))
	}
	if m.Step != 0 {
		n += 1 + sovCGs_15Tutorial(uint64(m.Step))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCGs_15Tutorial(uint64(l))
	}
	return n
}

func (m *GS_TutorialSet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_15Tutorial(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_15Tutorial(uint64(l))
	}
	return n
}

func sovCGs_15Tutorial(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_15Tutorial(x uint64) (n int) {
	return sovCGs_15Tutorial(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TutorialData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_15Tutorial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TutorialData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TutorialData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Steps == nil {
				m.Steps = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_15Tutorial
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_15Tutorial
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCGs_15Tutorial
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_15Tutorial
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_15Tutorial(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_15Tutorial
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Steps[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_15Tutorial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TutorialSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_15Tutorial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TutorialSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TutorialSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_15Tutorial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TutorialSet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_15Tutorial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TutorialSet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TutorialSet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_15Tutorial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_15Tutorial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_15Tutorial(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_15Tutorial
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_15Tutorial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_15Tutorial
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_15Tutorial
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_15Tutorial(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_15Tutorial = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_15Tutorial   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.15.tutorial.proto", fileDescriptorCGs_15Tutorial) }

var fileDescriptorCGs_15Tutorial = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x3b, 0x89, 0x51, 0xfa, 0x5a, 0xa5, 0x0c, 0x55, 0x42, 0x28, 0x21, 0x64, 0x21, 0x59,
	0x0d, 0x35, 0x22, 0x14, 0x97, 0xd6, 0xe0, 0xa2, 0xbb, 0x49, 0x16, 0xee, 0x42, 0x6c, 0x87, 0x20,
	0xb6, 0x4e, 0x98, 0x99, 0x28, 0x01, 0x0f, 0xe1, 0xb1, 0xba, 0xf4, 0x08, 0x1a, 0x2f, 0x52, 0x32,
	0x49, 0x69, 0x77, 0x2f, 0xdf, 0xfb, 0xff, 0xef, 0x91, 0x81, 0xab, 0x65, 0x9a, 0x4b, 0x72, 0x73,
	0x47, 0x54, 0xa9, 0xb8, 0x78, 0xcd, 0xd6, 0xa4, 0x10, 0x5c, 0x71, 0x6c, 0x6e, 0x64, 0xee, 0x40,
	0xce, 0x73, 0xde, 0x02, 0xe7, 0x52, 0x07, 0xa7, 0x53, 0x22, 0x95, 0x28, 0x97, 0x4a, 0xb6, 0xd8,
	0xff, 0x82, 0x61, 0xd2, 0x35, 0x1f, 0x33, 0x95, 0xe1, 0x10, 0xac, 0x58, 0xb1, 0x42, 0xda, 0xc8,
	0x33, 0x83, 0x41, 0x38, 0x21, 0x1b, 0x99, 0x93, 0xe3, 0x04, 0xd1, 0xeb, 0xe8, 0x5d, 0x89, 0x8a,
	0xb6, 0x51, 0x67, 0x06, 0x70, 0x80, 0x78, 0x04, 0xe6, 0x1b, 0xab, 0x6c, 0xe4, 0xa1, 0xa0, 0x4f,
	0x9b, 0x11, 0x8f, 0xc1, 0xfa, 0xc8, 0xd6, 0x25, 0xb3, 0x0d, 0x0f, 0x05, 0x16, 0x6d, 0x3f, 0xee,
	0x8d, 0x19, 0xf2, 0x23, 0x38, 0x9f, 0xa7, 0x7b, 0x7b, 0xcc, 0x14, 0xbe, 0x00, 0x23, 0x29, 0xba,
	0xae, 0x91, 0x14, 0x18, 0xc3, 0x49, 0xa3, 0xee, 0x9a, 0x7a, 0x6e, 0x0e, 0x2c, 0x58, 0x65, 0x9b,
	0xed, 0x81, 0x05, 0xab, 0xfc, 0x67, 0x18, 0x3d, 0xc5, 0xc7, 0x9e, 0x94, 0xe2, 0x09, 0xf4, 0x23,
	0x21, 0xb8, 0x98, 0xf3, 0x15, 0xd3, 0x42, 0x8b, 0x1e, 0x00, 0xbe, 0x86, 0x33, 0xca, 0x3e, 0x33,
	0xb1, 0x92, 0x5a, 0x3d, 0x08, 0x87, 0xfa, 0x47, 0x3b, 0x46, 0xf7, 0xcb, 0x87, 0xf1, 0xf6, 0xcf,
	0xed, 0x6d, 0x6b, 0x17, 0xfd, 0xd4, 0x2e, 0xfa, 0xad, 0x5d, 0xf4, 0xfd, 0xef, 0xf6, 0x5e, 0x4e,
	0xf5, 0xdb, 0xdd, 0xee, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0x6d, 0xdf, 0x9f, 0x7d, 0x01, 0x00,
	0x00,
}
