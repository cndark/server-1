// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.18.bill.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BillBuyCnt struct {
	PayId int32 `protobuf:"varint,1,opt,name=PayId,proto3" json:"PayId,omitempty"`
	N     int32 `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *BillBuyCnt) Reset()                    { *m = BillBuyCnt{} }
func (m *BillBuyCnt) String() string            { return proto.CompactTextString(m) }
func (*BillBuyCnt) ProtoMessage()               {}
func (*BillBuyCnt) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{0} }

// 推送
type GS_BillDone struct {
	ProdId  int32    `protobuf:"varint,1,opt,name=ProdId,proto3" json:"ProdId,omitempty"`
	Rewards *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_BillDone) Reset()                    { *m = GS_BillDone{} }
func (m *GS_BillDone) String() string            { return proto.CompactTextString(m) }
func (*GS_BillDone) ProtoMessage()               {}
func (*GS_BillDone) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{1} }

// 推送三方订单
type GS_BillOrder struct {
	OrderId string `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	Amount  int32  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *GS_BillOrder) Reset()                    { *m = GS_BillOrder{} }
func (m *GS_BillOrder) String() string            { return proto.CompactTextString(m) }
func (*GS_BillOrder) ProtoMessage()               {}
func (*GS_BillOrder) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{2} }

// 获取信息
type C_BillInfo struct {
}

func (m *C_BillInfo) Reset()                    { *m = C_BillInfo{} }
func (m *C_BillInfo) String() string            { return proto.CompactTextString(m) }
func (*C_BillInfo) ProtoMessage()               {}
func (*C_BillInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{3} }

type GS_BillInfo_R struct {
	ErrorCode    int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	BuyCnt       []*BillBuyCnt `protobuf:"bytes,2,rep,name=BuyCnt" json:"BuyCnt,omitempty"`
	TotalBaseCcy int64         `protobuf:"varint,3,opt,name=TotalBaseCcy,proto3" json:"TotalBaseCcy,omitempty"`
}

func (m *GS_BillInfo_R) Reset()                    { *m = GS_BillInfo_R{} }
func (m *GS_BillInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_BillInfo_R) ProtoMessage()               {}
func (*GS_BillInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{4} }

// 获取充值返利码
type C_BillRefundCodeGet struct {
}

func (m *C_BillRefundCodeGet) Reset()                    { *m = C_BillRefundCodeGet{} }
func (m *C_BillRefundCodeGet) String() string            { return proto.CompactTextString(m) }
func (*C_BillRefundCodeGet) ProtoMessage()               {}
func (*C_BillRefundCodeGet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{5} }

type GS_BillRefundCodeGet_R struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Code      string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *GS_BillRefundCodeGet_R) Reset()                    { *m = GS_BillRefundCodeGet_R{} }
func (m *GS_BillRefundCodeGet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_BillRefundCodeGet_R) ProtoMessage()               {}
func (*GS_BillRefundCodeGet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{6} }

// 领取返利
type C_BillRefundTake struct {
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *C_BillRefundTake) Reset()                    { *m = C_BillRefundTake{} }
func (m *C_BillRefundTake) String() string            { return proto.CompactTextString(m) }
func (*C_BillRefundTake) ProtoMessage()               {}
func (*C_BillRefundTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{7} }

type GS_BillRefundTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_BillRefundTake_R) Reset()                    { *m = GS_BillRefundTake_R{} }
func (m *GS_BillRefundTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_BillRefundTake_R) ProtoMessage()               {}
func (*GS_BillRefundTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_18Bill, []int{8} }

func init() {
	proto.RegisterType((*BillBuyCnt)(nil), "msg.BillBuyCnt")
	proto.RegisterType((*GS_BillDone)(nil), "msg.GS_BillDone")
	proto.RegisterType((*GS_BillOrder)(nil), "msg.GS_BillOrder")
	proto.RegisterType((*C_BillInfo)(nil), "msg.C_BillInfo")
	proto.RegisterType((*GS_BillInfo_R)(nil), "msg.GS_BillInfo_R")
	proto.RegisterType((*C_BillRefundCodeGet)(nil), "msg.C_BillRefundCodeGet")
	proto.RegisterType((*GS_BillRefundCodeGet_R)(nil), "msg.GS_BillRefundCodeGet_R")
	proto.RegisterType((*C_BillRefundTake)(nil), "msg.C_BillRefundTake")
	proto.RegisterType((*GS_BillRefundTake_R)(nil), "msg.GS_BillRefundTake_R")
}
func (m *BillBuyCnt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillBuyCnt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PayId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.PayId))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_BillDone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_BillDone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProdId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.ProdId))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GS_BillOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_BillOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *C_BillInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_BillInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_BillInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_BillInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.BuyCnt) > 0 {
		for _, msg := range m.BuyCnt {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_18Bill(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalBaseCcy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.TotalBaseCcy))
	}
	return i, nil
}

func (m *C_BillRefundCodeGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_BillRefundCodeGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_BillRefundCodeGet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_BillRefundCodeGet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *C_BillRefundTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_BillRefundTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *GS_BillRefundTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_BillRefundTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_18Bill(dAtA, i, uint64(m.Rewards.Size()))
		n2, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintCGs_18Bill(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BillBuyCnt) Size() (n int) {
	var l int
	_ = l
	if m.PayId != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.PayId))
	}
	if m.N != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.N))
	}
	return n
}

func (m *GS_BillDone) Size() (n int) {
	var l int
	_ = l
	if m.ProdId != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.ProdId))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_18Bill(uint64(l))
	}
	return n
}

func (m *GS_BillOrder) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovCGs_18Bill(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.Amount))
	}
	return n
}

func (m *C_BillInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_BillInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.ErrorCode))
	}
	if len(m.BuyCnt) > 0 {
		for _, e := range m.BuyCnt {
			l = e.Size()
			n += 1 + l + sovCGs_18Bill(uint64(l))
		}
	}
	if m.TotalBaseCcy != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.TotalBaseCcy))
	}
	return n
}

func (m *C_BillRefundCodeGet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_BillRefundCodeGet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.ErrorCode))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCGs_18Bill(uint64(l))
	}
	return n
}

func (m *C_BillRefundTake) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCGs_18Bill(uint64(l))
	}
	return n
}

func (m *GS_BillRefundTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_18Bill(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_18Bill(uint64(l))
	}
	return n
}

func sovCGs_18Bill(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_18Bill(x uint64) (n int) {
	return sovCGs_18Bill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BillBuyCnt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillBuyCnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillBuyCnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayId", wireType)
			}
			m.PayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_BillDone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_BillDone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_BillDone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProdId", wireType)
			}
			m.ProdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProdId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_BillOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_BillOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_BillOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_BillInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_BillInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_BillInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_BillInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_BillInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_BillInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyCnt = append(m.BuyCnt, &BillBuyCnt{})
			if err := m.BuyCnt[len(m.BuyCnt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBaseCcy", wireType)
			}
			m.TotalBaseCcy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBaseCcy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_BillRefundCodeGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_BillRefundCodeGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_BillRefundCodeGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_BillRefundCodeGet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_BillRefundCodeGet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_BillRefundCodeGet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_BillRefundTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_BillRefundTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_BillRefundTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_BillRefundTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_BillRefundTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_BillRefundTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_18Bill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_18Bill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_18Bill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_18Bill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_18Bill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_18Bill
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_18Bill
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_18Bill(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_18Bill = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_18Bill   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.18.bill.proto", fileDescriptorCGs_18Bill) }

var fileDescriptorCGs_18Bill = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4e, 0xea, 0x40,
	0x18, 0x65, 0xe8, 0x05, 0xc2, 0x47, 0x6f, 0xee, 0xcd, 0xf0, 0x93, 0x86, 0x98, 0x86, 0xcc, 0x02,
	0x59, 0x35, 0x88, 0x1b, 0x97, 0xda, 0x6a, 0x08, 0x26, 0x22, 0x19, 0xd9, 0xb9, 0x20, 0x85, 0x96,
	0x86, 0x58, 0x3a, 0x66, 0x3a, 0x8d, 0xc1, 0xa7, 0xf0, 0xb1, 0x58, 0xfa, 0x08, 0x8a, 0x2f, 0x62,
	0x3a, 0x1d, 0x04, 0x56, 0xb8, 0x9b, 0x73, 0xbe, 0xf3, 0x9d, 0x73, 0x3a, 0x1d, 0xc0, 0xb3, 0x49,
	0x10, 0x5b, 0x67, 0x17, 0xd6, 0x74, 0x11, 0x86, 0xd6, 0x33, 0x67, 0x82, 0x61, 0x6d, 0x19, 0x07,
	0x4d, 0x08, 0x58, 0xc0, 0x32, 0xa2, 0x59, 0x97, 0xa2, 0x6e, 0xd7, 0x8a, 0x05, 0x4f, 0x66, 0x22,
	0xce, 0x68, 0xd2, 0x05, 0xb0, 0x17, 0x61, 0x68, 0x27, 0x2b, 0x27, 0x12, 0xb8, 0x06, 0x85, 0x91,
	0xbb, 0x1a, 0x78, 0x06, 0x6a, 0xa1, 0x4e, 0x81, 0x66, 0x00, 0xeb, 0x80, 0x86, 0x46, 0x5e, 0x32,
	0x68, 0x48, 0xee, 0xa0, 0xd2, 0x7f, 0x98, 0xa4, 0x4b, 0xd7, 0x2c, 0xf2, 0x71, 0x03, 0x8a, 0x23,
	0xce, 0xbc, 0x9f, 0x1d, 0x85, 0x70, 0x1b, 0x4a, 0xd4, 0x7f, 0x71, 0xb9, 0x17, 0xcb, 0xd5, 0x4a,
	0x4f, 0xb7, 0x96, 0x71, 0x60, 0x29, 0x8e, 0x6e, 0x87, 0xe4, 0x12, 0x74, 0x65, 0x77, 0xcf, 0x3d,
	0x9f, 0x63, 0x03, 0x4a, 0xf2, 0xa0, 0x0c, 0xcb, 0x74, 0x0b, 0xd3, 0xa4, 0xab, 0x25, 0x4b, 0x22,
	0xa1, 0xba, 0x28, 0x44, 0x74, 0x00, 0x47, 0x1a, 0x0c, 0xa2, 0x39, 0x23, 0xaf, 0xf0, 0x57, 0xf9,
	0xa5, 0x70, 0x42, 0xf1, 0x09, 0x94, 0x6f, 0x38, 0x67, 0xdc, 0x61, 0x9e, 0xaf, 0x3a, 0xee, 0x08,
	0x7c, 0x0a, 0xc5, 0xec, 0xdb, 0x8d, 0x7c, 0x4b, 0xeb, 0x54, 0x7a, 0xff, 0x64, 0xcb, 0xdd, 0x95,
	0x50, 0x35, 0xc6, 0x04, 0xf4, 0x31, 0x13, 0x6e, 0x68, 0xbb, 0xb1, 0xef, 0xcc, 0x56, 0x86, 0xd6,
	0x42, 0x1d, 0x8d, 0x1e, 0x70, 0xa4, 0x0e, 0xd5, 0xac, 0x09, 0xf5, 0xe7, 0x49, 0xe4, 0xa5, 0x01,
	0x7d, 0x5f, 0x90, 0x5b, 0x68, 0xa8, 0x4a, 0x07, 0xfc, 0xd1, 0x6e, 0x18, 0xfe, 0xc8, 0x41, 0x5e,
	0xde, 0x83, 0x3c, 0x93, 0x36, 0xfc, 0xdf, 0x8f, 0x18, 0xbb, 0x4f, 0x3b, 0x1d, 0xda, 0xd3, 0x3d,
	0x42, 0xf5, 0x20, 0x33, 0x15, 0x1e, 0x0d, 0xfc, 0xe5, 0x3f, 0xb3, 0x6b, 0xeb, 0x4f, 0x33, 0xb7,
	0xde, 0x98, 0xe8, 0x7d, 0x63, 0xa2, 0x8f, 0x8d, 0x89, 0xde, 0xbe, 0xcc, 0xdc, 0xb4, 0x28, 0x5f,
	0xd4, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0xf3, 0x8a, 0x66, 0x8f, 0x02, 0x00, 0x00,
}
