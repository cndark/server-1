// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.59.wleveldraw.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 推图十连
type WLevelDrawData struct {
	Id        int32                     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DrawItems map[int32]*WLevelDrawItem `protobuf:"bytes,2,rep,name=DrawItems" json:"DrawItems,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WLevelDrawData) Reset()                    { *m = WLevelDrawData{} }
func (m *WLevelDrawData) String() string            { return proto.CompactTextString(m) }
func (*WLevelDrawData) ProtoMessage()               {}
func (*WLevelDrawData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_59Wleveldraw, []int{0} }

type WLevelDrawItem struct {
	Items []*Item `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (m *WLevelDrawItem) Reset()                    { *m = WLevelDrawItem{} }
func (m *WLevelDrawItem) String() string            { return proto.CompactTextString(m) }
func (*WLevelDrawItem) ProtoMessage()               {}
func (*WLevelDrawItem) Descriptor() ([]byte, []int) { return fileDescriptorCGs_59Wleveldraw, []int{1} }

type C_WLevelDrawDraw struct {
	Idx int32 `protobuf:"varint,1,opt,name=Idx,proto3" json:"Idx,omitempty"`
}

func (m *C_WLevelDrawDraw) Reset()                    { *m = C_WLevelDrawDraw{} }
func (m *C_WLevelDrawDraw) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelDrawDraw) ProtoMessage()               {}
func (*C_WLevelDrawDraw) Descriptor() ([]byte, []int) { return fileDescriptorCGs_59Wleveldraw, []int{2} }

type GS_WLevelDrawDraw_R struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Items     []*Item `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty"`
}

func (m *GS_WLevelDrawDraw_R) Reset()         { *m = GS_WLevelDrawDraw_R{} }
func (m *GS_WLevelDrawDraw_R) String() string { return proto.CompactTextString(m) }
func (*GS_WLevelDrawDraw_R) ProtoMessage()    {}
func (*GS_WLevelDrawDraw_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_59Wleveldraw, []int{3}
}

type C_WLevelDrawTake struct {
	Idx       int32 `protobuf:"varint,1,opt,name=Idx,proto3" json:"Idx,omitempty"`
	IsAutoDec bool  `protobuf:"varint,2,opt,name=IsAutoDec,proto3" json:"IsAutoDec,omitempty"`
}

func (m *C_WLevelDrawTake) Reset()                    { *m = C_WLevelDrawTake{} }
func (m *C_WLevelDrawTake) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelDrawTake) ProtoMessage()               {}
func (*C_WLevelDrawTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_59Wleveldraw, []int{4} }

type GS_WLevelDrawTake_R struct {
	ErrorCode    int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards      *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
	AutoDecItems []*Item  `protobuf:"bytes,3,rep,name=AutoDecItems" json:"AutoDecItems,omitempty"`
}

func (m *GS_WLevelDrawTake_R) Reset()         { *m = GS_WLevelDrawTake_R{} }
func (m *GS_WLevelDrawTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_WLevelDrawTake_R) ProtoMessage()    {}
func (*GS_WLevelDrawTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_59Wleveldraw, []int{5}
}

func init() {
	proto.RegisterType((*WLevelDrawData)(nil), "msg.WLevelDrawData")
	proto.RegisterType((*WLevelDrawItem)(nil), "msg.WLevelDrawItem")
	proto.RegisterType((*C_WLevelDrawDraw)(nil), "msg.C_WLevelDrawDraw")
	proto.RegisterType((*GS_WLevelDrawDraw_R)(nil), "msg.GS_WLevelDrawDraw_R")
	proto.RegisterType((*C_WLevelDrawTake)(nil), "msg.C_WLevelDrawTake")
	proto.RegisterType((*GS_WLevelDrawTake_R)(nil), "msg.GS_WLevelDrawTake_R")
}
func (m *WLevelDrawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLevelDrawData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.Id))
	}
	if len(m.DrawItems) > 0 {
		for k, _ := range m.DrawItems {
			dAtA[i] = 0x12
			i++
			v := m.DrawItems[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCGs_59Wleveldraw(uint64(msgSize))
			}
			mapSize := 1 + sovCGs_59Wleveldraw(uint64(k)) + msgSize
			i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *WLevelDrawItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLevelDrawItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_WLevelDrawDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelDrawDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.Idx))
	}
	return i, nil
}

func (m *GS_WLevelDrawDraw_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelDrawDraw_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_WLevelDrawTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelDrawTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.Idx))
	}
	if m.IsAutoDec {
		dAtA[i] = 0x10
		i++
		if m.IsAutoDec {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_WLevelDrawTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelDrawTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(m.Rewards.Size()))
		n2, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.AutoDecItems) > 0 {
		for _, msg := range m.AutoDecItems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCGs_59Wleveldraw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCGs_59Wleveldraw(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WLevelDrawData) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_59Wleveldraw(uint64(m.Id))
	}
	if len(m.DrawItems) > 0 {
		for k, v := range m.DrawItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCGs_59Wleveldraw(uint64(l))
			}
			mapEntrySize := 1 + sovCGs_59Wleveldraw(uint64(k)) + l
			n += mapEntrySize + 1 + sovCGs_59Wleveldraw(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WLevelDrawItem) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_59Wleveldraw(uint64(l))
		}
	}
	return n
}

func (m *C_WLevelDrawDraw) Size() (n int) {
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCGs_59Wleveldraw(uint64(m.Idx))
	}
	return n
}

func (m *GS_WLevelDrawDraw_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_59Wleveldraw(uint64(m.ErrorCode))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_59Wleveldraw(uint64(l))
		}
	}
	return n
}

func (m *C_WLevelDrawTake) Size() (n int) {
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCGs_59Wleveldraw(uint64(m.Idx))
	}
	if m.IsAutoDec {
		n += 2
	}
	return n
}

func (m *GS_WLevelDrawTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_59Wleveldraw(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_59Wleveldraw(uint64(l))
	}
	if len(m.AutoDecItems) > 0 {
		for _, e := range m.AutoDecItems {
			l = e.Size()
			n += 1 + l + sovCGs_59Wleveldraw(uint64(l))
		}
	}
	return n
}

func sovCGs_59Wleveldraw(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_59Wleveldraw(x uint64) (n int) {
	return sovCGs_59Wleveldraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WLevelDrawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLevelDrawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLevelDrawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrawItems == nil {
				m.DrawItems = make(map[int32]*WLevelDrawItem)
			}
			var mapkey int32
			var mapvalue *WLevelDrawItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_59Wleveldraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_59Wleveldraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_59Wleveldraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_59Wleveldraw
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_59Wleveldraw
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WLevelDrawItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_59Wleveldraw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DrawItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLevelDrawItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLevelDrawItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLevelDrawItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelDrawDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelDrawDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelDrawDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelDrawDraw_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelDrawDraw_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelDrawDraw_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelDrawTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelDrawTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelDrawTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoDec", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoDec = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelDrawTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelDrawTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelDrawTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoDecItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoDecItems = append(m.AutoDecItems, &Item{})
			if err := m.AutoDecItems[len(m.AutoDecItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_59Wleveldraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_59Wleveldraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_59Wleveldraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_59Wleveldraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_59Wleveldraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_59Wleveldraw
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_59Wleveldraw
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_59Wleveldraw(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_59Wleveldraw = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_59Wleveldraw   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.59.wleveldraw.proto", fileDescriptorCGs_59Wleveldraw) }

var fileDescriptorCGs_59Wleveldraw = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4d, 0x4a, 0xf3, 0x40,
	0x1c, 0xc6, 0x3b, 0x09, 0x7d, 0x5f, 0xfb, 0x6f, 0x29, 0x65, 0xaa, 0x10, 0x8a, 0xc4, 0x12, 0x44,
	0xea, 0xc2, 0x50, 0x2b, 0x82, 0xba, 0xd2, 0x7e, 0x20, 0x01, 0x37, 0xc6, 0x82, 0xcb, 0x32, 0x36,
	0x43, 0x16, 0x6d, 0x8d, 0xcc, 0x4c, 0x9b, 0xf6, 0x0a, 0xae, 0xbc, 0x8c, 0x77, 0xe8, 0xd2, 0x23,
	0x68, 0xbd, 0x88, 0xcc, 0x24, 0x35, 0x4d, 0x44, 0xdc, 0x85, 0xe7, 0x63, 0x9e, 0xdf, 0x0c, 0x01,
	0x63, 0x38, 0xf0, 0xb9, 0x7d, 0x7a, 0x6e, 0x87, 0x63, 0x3a, 0xa3, 0x63, 0x8f, 0x91, 0xd0, 0x7e,
	0x62, 0x81, 0x08, 0xb0, 0x3e, 0xe1, 0x7e, 0x0d, 0xfc, 0xc0, 0x0f, 0x22, 0xa1, 0xb6, 0xa3, 0xa2,
	0xcd, 0xa6, 0xcd, 0x05, 0x9b, 0x0e, 0x05, 0x8f, 0x64, 0xeb, 0x15, 0x41, 0xf9, 0xfe, 0x46, 0x96,
	0xbb, 0x8c, 0x84, 0x5d, 0x22, 0x08, 0x2e, 0x83, 0xe6, 0x78, 0x06, 0xaa, 0xa3, 0x46, 0xde, 0xd5,
	0x1c, 0x0f, 0x5f, 0x42, 0x41, 0x7a, 0x8e, 0xa0, 0x13, 0x6e, 0x68, 0x75, 0xbd, 0x51, 0x6c, 0x59,
	0xf6, 0x84, 0xfb, 0x76, 0xba, 0x67, 0x7f, 0x87, 0x7a, 0x8f, 0x82, 0x2d, 0xdc, 0xa4, 0x54, 0xbb,
	0x85, 0x72, 0xda, 0xc4, 0x15, 0xd0, 0x47, 0x74, 0x11, 0x8f, 0xc8, 0x4f, 0x7c, 0x08, 0xf9, 0x19,
	0x19, 0x4f, 0xa9, 0xa1, 0xd5, 0x51, 0xa3, 0xd8, 0xaa, 0x66, 0x16, 0x64, 0xd7, 0x8d, 0x12, 0x17,
	0xda, 0x19, 0xb2, 0x8e, 0x37, 0xb1, 0xa5, 0x89, 0xf7, 0x20, 0x1f, 0x21, 0x22, 0x85, 0x58, 0x50,
	0x07, 0x44, 0x35, 0xa5, 0x5b, 0xfb, 0x50, 0xe9, 0x0c, 0x36, 0x98, 0x19, 0x09, 0x25, 0x87, 0xe3,
	0xcd, 0xd7, 0x1c, 0x8e, 0x37, 0xb7, 0xfa, 0x50, 0xbd, 0xbe, 0xcb, 0xc4, 0x06, 0x2e, 0xde, 0x85,
	0x42, 0x8f, 0xb1, 0x80, 0x75, 0x02, 0x8f, 0xc6, 0xf1, 0x44, 0x48, 0xb6, 0xb5, 0x5f, 0xb6, 0xdb,
	0xe9, 0xed, 0x3e, 0x19, 0xd1, 0x9f, 0xdb, 0x72, 0xc4, 0xe1, 0x57, 0x53, 0x11, 0x74, 0xe9, 0x50,
	0xbd, 0xc3, 0x96, 0x9b, 0x08, 0xd6, 0x33, 0xca, 0xa0, 0xc9, 0x53, 0xfe, 0x44, 0x3b, 0x80, 0xff,
	0x2e, 0x0d, 0x09, 0xf3, 0x78, 0xfc, 0xb2, 0x25, 0x05, 0x17, 0x6b, 0xee, 0xda, 0xc4, 0x47, 0x50,
	0x8a, 0x87, 0xa2, 0x9b, 0xe8, 0xd9, 0x9b, 0xa4, 0xec, 0xf6, 0xf6, 0xf2, 0xc3, 0xcc, 0x2d, 0x57,
	0x26, 0x7a, 0x5b, 0x99, 0xe8, 0x7d, 0x65, 0xa2, 0x97, 0x4f, 0x33, 0xf7, 0xf0, 0x4f, 0xfd, 0x54,
	0x27, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x26, 0x63, 0x16, 0x98, 0x02, 0x00, 0x00,
}
