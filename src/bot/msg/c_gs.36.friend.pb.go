// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.36.friend.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 好友
type FriendData struct {
	Friends   []*FriendInfo       `protobuf:"bytes,1,rep,name=Friends" json:"Friends,omitempty"`
	ApplyList []*PlayerSimpleInfo `protobuf:"bytes,2,rep,name=ApplyList" json:"ApplyList,omitempty"`
	BlackList []*PlayerSimpleInfo `protobuf:"bytes,3,rep,name=BlackList" json:"BlackList,omitempty"`
	GiveList  []string            `protobuf:"bytes,4,rep,name=GiveList" json:"GiveList,omitempty"`
	RecvList  []string            `protobuf:"bytes,5,rep,name=RecvList" json:"RecvList,omitempty"`
}

func (m *FriendData) Reset()                    { *m = FriendData{} }
func (m *FriendData) String() string            { return proto.CompactTextString(m) }
func (*FriendData) ProtoMessage()               {}
func (*FriendData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{0} }

type FriendInfo struct {
	Info     *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Info" json:"Info,omitempty"`
	IsOnline bool              `protobuf:"varint,2,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`
	OffTs    int64             `protobuf:"varint,3,opt,name=OffTs,proto3" json:"OffTs,omitempty"`
	Ts       int64             `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`
	ChatData []*ChatOne        `protobuf:"bytes,5,rep,name=ChatData" json:"ChatData,omitempty"`
}

func (m *FriendInfo) Reset()                    { *m = FriendInfo{} }
func (m *FriendInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()               {}
func (*FriendInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{1} }

// 新的好友申请
type GS_FriendNewApplied struct {
	PlrId string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *GS_FriendNewApplied) Reset()                    { *m = GS_FriendNewApplied{} }
func (m *GS_FriendNewApplied) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendNewApplied) ProtoMessage()               {}
func (*GS_FriendNewApplied) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{2} }

// 新的好友
type GS_FriendNewFriend struct {
	Frd *FriendInfo `protobuf:"bytes,1,opt,name=Frd" json:"Frd,omitempty"`
}

func (m *GS_FriendNewFriend) Reset()                    { *m = GS_FriendNewFriend{} }
func (m *GS_FriendNewFriend) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendNewFriend) ProtoMessage()               {}
func (*GS_FriendNewFriend) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{3} }

type GS_FriendRemoveFriend struct {
	PlrId string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *GS_FriendRemoveFriend) Reset()         { *m = GS_FriendRemoveFriend{} }
func (m *GS_FriendRemoveFriend) String() string { return proto.CompactTextString(m) }
func (*GS_FriendRemoveFriend) ProtoMessage()    {}
func (*GS_FriendRemoveFriend) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{4}
}

type GS_FriendRecv struct {
	PlrId string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *GS_FriendRecv) Reset()                    { *m = GS_FriendRecv{} }
func (m *GS_FriendRecv) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendRecv) ProtoMessage()               {}
func (*GS_FriendRecv) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{5} }

// 好友列表
type C_FriendGetFrds struct {
}

func (m *C_FriendGetFrds) Reset()                    { *m = C_FriendGetFrds{} }
func (m *C_FriendGetFrds) String() string            { return proto.CompactTextString(m) }
func (*C_FriendGetFrds) ProtoMessage()               {}
func (*C_FriendGetFrds) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{6} }

type GS_FriendGetFrds_R struct {
	Friends []*FriendInfo `protobuf:"bytes,1,rep,name=Friends" json:"Friends,omitempty"`
}

func (m *GS_FriendGetFrds_R) Reset()                    { *m = GS_FriendGetFrds_R{} }
func (m *GS_FriendGetFrds_R) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendGetFrds_R) ProtoMessage()               {}
func (*GS_FriendGetFrds_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{7} }

// 搜索好友
type C_FriendSearchFrds struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *C_FriendSearchFrds) Reset()                    { *m = C_FriendSearchFrds{} }
func (m *C_FriendSearchFrds) String() string            { return proto.CompactTextString(m) }
func (*C_FriendSearchFrds) ProtoMessage()               {}
func (*C_FriendSearchFrds) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{8} }

type GS_FriendSearchFrds_R struct {
	Plrs []*PlayerSimpleInfo `protobuf:"bytes,1,rep,name=Plrs" json:"Plrs,omitempty"`
}

func (m *GS_FriendSearchFrds_R) Reset()         { *m = GS_FriendSearchFrds_R{} }
func (m *GS_FriendSearchFrds_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendSearchFrds_R) ProtoMessage()    {}
func (*GS_FriendSearchFrds_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{9}
}

// 移除好友
type C_FriendRemoveFrds struct {
	PlrId string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *C_FriendRemoveFrds) Reset()                    { *m = C_FriendRemoveFrds{} }
func (m *C_FriendRemoveFrds) String() string            { return proto.CompactTextString(m) }
func (*C_FriendRemoveFrds) ProtoMessage()               {}
func (*C_FriendRemoveFrds) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{10} }

type GS_FriendRemoveFrds_R struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	PlrId     string `protobuf:"bytes,2,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *GS_FriendRemoveFrds_R) Reset()         { *m = GS_FriendRemoveFrds_R{} }
func (m *GS_FriendRemoveFrds_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendRemoveFrds_R) ProtoMessage()    {}
func (*GS_FriendRemoveFrds_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{11}
}

// 申请列表
type C_FriendGetApplyList struct {
}

func (m *C_FriendGetApplyList) Reset()         { *m = C_FriendGetApplyList{} }
func (m *C_FriendGetApplyList) String() string { return proto.CompactTextString(m) }
func (*C_FriendGetApplyList) ProtoMessage()    {}
func (*C_FriendGetApplyList) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{12}
}

type GS_FriendGetApplyList_R struct {
	ApplyList []*PlayerSimpleInfo `protobuf:"bytes,1,rep,name=ApplyList" json:"ApplyList,omitempty"`
}

func (m *GS_FriendGetApplyList_R) Reset()         { *m = GS_FriendGetApplyList_R{} }
func (m *GS_FriendGetApplyList_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendGetApplyList_R) ProtoMessage()    {}
func (*GS_FriendGetApplyList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{13}
}

// 申请好友
type C_FriendApply struct {
	PlrId string `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *C_FriendApply) Reset()                    { *m = C_FriendApply{} }
func (m *C_FriendApply) String() string            { return proto.CompactTextString(m) }
func (*C_FriendApply) ProtoMessage()               {}
func (*C_FriendApply) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{14} }

type GS_FriendApply_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_FriendApply_R) Reset()                    { *m = GS_FriendApply_R{} }
func (m *GS_FriendApply_R) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendApply_R) ProtoMessage()               {}
func (*GS_FriendApply_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{15} }

// 接受好友
type C_FriendAccept struct {
	IsAccept bool     `protobuf:"varint,1,opt,name=IsAccept,proto3" json:"IsAccept,omitempty"`
	PlrIds   []string `protobuf:"bytes,2,rep,name=PlrIds" json:"PlrIds,omitempty"`
}

func (m *C_FriendAccept) Reset()                    { *m = C_FriendAccept{} }
func (m *C_FriendAccept) String() string            { return proto.CompactTextString(m) }
func (*C_FriendAccept) ProtoMessage()               {}
func (*C_FriendAccept) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{16} }

type GS_FriendAccept_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_FriendAccept_R) Reset()                    { *m = GS_FriendAccept_R{} }
func (m *GS_FriendAccept_R) String() string            { return proto.CompactTextString(m) }
func (*GS_FriendAccept_R) ProtoMessage()               {}
func (*GS_FriendAccept_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{17} }

// 黑白名单列表
type C_FriendGetBlackList struct {
}

func (m *C_FriendGetBlackList) Reset()         { *m = C_FriendGetBlackList{} }
func (m *C_FriendGetBlackList) String() string { return proto.CompactTextString(m) }
func (*C_FriendGetBlackList) ProtoMessage()    {}
func (*C_FriendGetBlackList) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{18}
}

type GS_FriendGetBlackList_R struct {
	BlackList []*PlayerSimpleInfo `protobuf:"bytes,1,rep,name=BlackList" json:"BlackList,omitempty"`
}

func (m *GS_FriendGetBlackList_R) Reset()         { *m = GS_FriendGetBlackList_R{} }
func (m *GS_FriendGetBlackList_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendGetBlackList_R) ProtoMessage()    {}
func (*GS_FriendGetBlackList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{19}
}

// 添加移除黑白名单
type C_FriendAddBlackList struct {
	IsAdd bool   `protobuf:"varint,1,opt,name=IsAdd,proto3" json:"IsAdd,omitempty"`
	PlrId string `protobuf:"bytes,2,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *C_FriendAddBlackList) Reset()         { *m = C_FriendAddBlackList{} }
func (m *C_FriendAddBlackList) String() string { return proto.CompactTextString(m) }
func (*C_FriendAddBlackList) ProtoMessage()    {}
func (*C_FriendAddBlackList) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{20}
}

type GS_FriendAddBlackList_R struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	IsAdd     bool   `protobuf:"varint,2,opt,name=IsAdd,proto3" json:"IsAdd,omitempty"`
	PlrId     string `protobuf:"bytes,3,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
}

func (m *GS_FriendAddBlackList_R) Reset()         { *m = GS_FriendAddBlackList_R{} }
func (m *GS_FriendAddBlackList_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendAddBlackList_R) ProtoMessage()    {}
func (*GS_FriendAddBlackList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{21}
}

// 送礼和收礼
type C_FriendGiveAndRecv struct {
	PlrIds []string `protobuf:"bytes,1,rep,name=PlrIds" json:"PlrIds,omitempty"`
}

func (m *C_FriendGiveAndRecv) Reset()                    { *m = C_FriendGiveAndRecv{} }
func (m *C_FriendGiveAndRecv) String() string            { return proto.CompactTextString(m) }
func (*C_FriendGiveAndRecv) ProtoMessage()               {}
func (*C_FriendGiveAndRecv) Descriptor() ([]byte, []int) { return fileDescriptorCGs_36Friend, []int{22} }

type GS_FriendGiveAndRecv_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	PlrIds    []string `protobuf:"bytes,2,rep,name=PlrIds" json:"PlrIds,omitempty"`
	Cnt       int32    `protobuf:"varint,3,opt,name=Cnt,proto3" json:"Cnt,omitempty"`
}

func (m *GS_FriendGiveAndRecv_R) Reset()         { *m = GS_FriendGiveAndRecv_R{} }
func (m *GS_FriendGiveAndRecv_R) String() string { return proto.CompactTextString(m) }
func (*GS_FriendGiveAndRecv_R) ProtoMessage()    {}
func (*GS_FriendGiveAndRecv_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_36Friend, []int{23}
}

func init() {
	proto.RegisterType((*FriendData)(nil), "msg.FriendData")
	proto.RegisterType((*FriendInfo)(nil), "msg.FriendInfo")
	proto.RegisterType((*GS_FriendNewApplied)(nil), "msg.GS_FriendNewApplied")
	proto.RegisterType((*GS_FriendNewFriend)(nil), "msg.GS_FriendNewFriend")
	proto.RegisterType((*GS_FriendRemoveFriend)(nil), "msg.GS_FriendRemoveFriend")
	proto.RegisterType((*GS_FriendRecv)(nil), "msg.GS_FriendRecv")
	proto.RegisterType((*C_FriendGetFrds)(nil), "msg.C_FriendGetFrds")
	proto.RegisterType((*GS_FriendGetFrds_R)(nil), "msg.GS_FriendGetFrds_R")
	proto.RegisterType((*C_FriendSearchFrds)(nil), "msg.C_FriendSearchFrds")
	proto.RegisterType((*GS_FriendSearchFrds_R)(nil), "msg.GS_FriendSearchFrds_R")
	proto.RegisterType((*C_FriendRemoveFrds)(nil), "msg.C_FriendRemoveFrds")
	proto.RegisterType((*GS_FriendRemoveFrds_R)(nil), "msg.GS_FriendRemoveFrds_R")
	proto.RegisterType((*C_FriendGetApplyList)(nil), "msg.C_FriendGetApplyList")
	proto.RegisterType((*GS_FriendGetApplyList_R)(nil), "msg.GS_FriendGetApplyList_R")
	proto.RegisterType((*C_FriendApply)(nil), "msg.C_FriendApply")
	proto.RegisterType((*GS_FriendApply_R)(nil), "msg.GS_FriendApply_R")
	proto.RegisterType((*C_FriendAccept)(nil), "msg.C_FriendAccept")
	proto.RegisterType((*GS_FriendAccept_R)(nil), "msg.GS_FriendAccept_R")
	proto.RegisterType((*C_FriendGetBlackList)(nil), "msg.C_FriendGetBlackList")
	proto.RegisterType((*GS_FriendGetBlackList_R)(nil), "msg.GS_FriendGetBlackList_R")
	proto.RegisterType((*C_FriendAddBlackList)(nil), "msg.C_FriendAddBlackList")
	proto.RegisterType((*GS_FriendAddBlackList_R)(nil), "msg.GS_FriendAddBlackList_R")
	proto.RegisterType((*C_FriendGiveAndRecv)(nil), "msg.C_FriendGiveAndRecv")
	proto.RegisterType((*GS_FriendGiveAndRecv_R)(nil), "msg.GS_FriendGiveAndRecv_R")
}
func (m *FriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ApplyList) > 0 {
		for _, msg := range m.ApplyList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlackList) > 0 {
		for _, msg := range m.BlackList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GiveList) > 0 {
		for _, s := range m.GiveList {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RecvList) > 0 {
		for _, s := range m.RecvList {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *FriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsOnline {
		dAtA[i] = 0x10
		i++
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OffTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.OffTs))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.Ts))
	}
	if len(m.ChatData) > 0 {
		for _, msg := range m.ChatData {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GS_FriendNewApplied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendNewApplied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_FriendNewFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendNewFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frd != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.Frd.Size()))
		n2, err := m.Frd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GS_FriendRemoveFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendRemoveFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_FriendRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *C_FriendGetFrds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendGetFrds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_FriendGetFrds_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendGetFrds_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_FriendSearchFrds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendSearchFrds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GS_FriendSearchFrds_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendSearchFrds_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Plrs) > 0 {
		for _, msg := range m.Plrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_FriendRemoveFrds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendRemoveFrds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_FriendRemoveFrds_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendRemoveFrds_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.PlrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *C_FriendGetApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendGetApplyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_FriendGetApplyList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendGetApplyList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplyList) > 0 {
		for _, msg := range m.ApplyList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_FriendApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_FriendApply_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendApply_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_FriendAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendAccept) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAccept {
		dAtA[i] = 0x8
		i++
		if m.IsAccept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GS_FriendAccept_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendAccept_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_FriendGetBlackList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendGetBlackList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_FriendGetBlackList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendGetBlackList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlackList) > 0 {
		for _, msg := range m.BlackList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_36Friend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_FriendAddBlackList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendAddBlackList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAdd {
		dAtA[i] = 0x8
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *GS_FriendAddBlackList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendAddBlackList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.ErrorCode))
	}
	if m.IsAdd {
		dAtA[i] = 0x10
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlrId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	return i, nil
}

func (m *C_FriendGiveAndRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_FriendGiveAndRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GS_FriendGiveAndRecv_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_FriendGiveAndRecv_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_36Friend(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func encodeVarintCGs_36Friend(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FriendData) Size() (n int) {
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	if len(m.ApplyList) > 0 {
		for _, e := range m.ApplyList {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	if len(m.BlackList) > 0 {
		for _, e := range m.BlackList {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	if len(m.GiveList) > 0 {
		for _, s := range m.GiveList {
			l = len(s)
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	if len(m.RecvList) > 0 {
		for _, s := range m.RecvList {
			l = len(s)
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *FriendInfo) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	if m.OffTs != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.OffTs))
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.Ts))
	}
	if len(m.ChatData) > 0 {
		for _, e := range m.ChatData {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *GS_FriendNewApplied) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendNewFriend) Size() (n int) {
	var l int
	_ = l
	if m.Frd != nil {
		l = m.Frd.Size()
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendRemoveFriend) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendRecv) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *C_FriendGetFrds) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_FriendGetFrds_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *C_FriendSearchFrds) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendSearchFrds_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Plrs) > 0 {
		for _, e := range m.Plrs {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *C_FriendRemoveFrds) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendRemoveFrds_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.ErrorCode))
	}
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *C_FriendGetApplyList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_FriendGetApplyList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplyList) > 0 {
		for _, e := range m.ApplyList {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *C_FriendApply) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendApply_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_FriendAccept) Size() (n int) {
	var l int
	_ = l
	if m.IsAccept {
		n += 2
	}
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			l = len(s)
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *GS_FriendAccept_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_FriendGetBlackList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_FriendGetBlackList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.BlackList) > 0 {
		for _, e := range m.BlackList {
			l = e.Size()
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *C_FriendAddBlackList) Size() (n int) {
	var l int
	_ = l
	if m.IsAdd {
		n += 2
	}
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *GS_FriendAddBlackList_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.ErrorCode))
	}
	if m.IsAdd {
		n += 2
	}
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_36Friend(uint64(l))
	}
	return n
}

func (m *C_FriendGiveAndRecv) Size() (n int) {
	var l int
	_ = l
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			l = len(s)
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	return n
}

func (m *GS_FriendGiveAndRecv_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.ErrorCode))
	}
	if len(m.PlrIds) > 0 {
		for _, s := range m.PlrIds {
			l = len(s)
			n += 1 + l + sovCGs_36Friend(uint64(l))
		}
	}
	if m.Cnt != 0 {
		n += 1 + sovCGs_36Friend(uint64(m.Cnt))
	}
	return n
}

func sovCGs_36Friend(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_36Friend(x uint64) (n int) {
	return sovCGs_36Friend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FriendData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &FriendInfo{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyList = append(m.ApplyList, &PlayerSimpleInfo{})
			if err := m.ApplyList[len(m.ApplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackList = append(m.BlackList, &PlayerSimpleInfo{})
			if err := m.BlackList[len(m.BlackList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiveList = append(m.GiveList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvList = append(m.RecvList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PlayerSimpleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffTs", wireType)
			}
			m.OffTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatData = append(m.ChatData, &ChatOne{})
			if err := m.ChatData[len(m.ChatData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendNewApplied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendNewApplied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendNewApplied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendNewFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendNewFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendNewFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frd == nil {
				m.Frd = &FriendInfo{}
			}
			if err := m.Frd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendRemoveFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendRemoveFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendRemoveFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendGetFrds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendGetFrds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendGetFrds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendGetFrds_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendGetFrds_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendGetFrds_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &FriendInfo{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendSearchFrds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendSearchFrds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendSearchFrds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendSearchFrds_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendSearchFrds_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendSearchFrds_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plrs = append(m.Plrs, &PlayerSimpleInfo{})
			if err := m.Plrs[len(m.Plrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendRemoveFrds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendRemoveFrds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendRemoveFrds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendRemoveFrds_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendRemoveFrds_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendRemoveFrds_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendGetApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendGetApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendGetApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendGetApplyList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendGetApplyList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendGetApplyList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyList = append(m.ApplyList, &PlayerSimpleInfo{})
			if err := m.ApplyList[len(m.ApplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendApply_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendApply_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendApply_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccept = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrIds = append(m.PlrIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendAccept_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendAccept_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendAccept_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendGetBlackList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendGetBlackList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendGetBlackList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendGetBlackList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendGetBlackList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendGetBlackList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackList = append(m.BlackList, &PlayerSimpleInfo{})
			if err := m.BlackList[len(m.BlackList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendAddBlackList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendAddBlackList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendAddBlackList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendAddBlackList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendAddBlackList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendAddBlackList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_FriendGiveAndRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_FriendGiveAndRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_FriendGiveAndRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrIds = append(m.PlrIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_FriendGiveAndRecv_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_FriendGiveAndRecv_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_FriendGiveAndRecv_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrIds = append(m.PlrIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_36Friend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_36Friend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_36Friend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_36Friend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_36Friend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_36Friend
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_36Friend
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_36Friend(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_36Friend = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_36Friend   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.36.friend.proto", fileDescriptorCGs_36Friend) }

var fileDescriptorCGs_36Friend = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xad, 0xe3, 0xa4, 0x5f, 0x33, 0xfd, 0xe8, 0xcf, 0x36, 0x2d, 0x51, 0x85, 0xa2, 0xb0, 0x12,
	0x52, 0x0a, 0xaa, 0xd5, 0x1f, 0x04, 0x97, 0x28, 0x49, 0x69, 0x15, 0x81, 0xda, 0x6a, 0xdb, 0xfb,
	0x60, 0xec, 0x4d, 0x6a, 0xe1, 0xc4, 0xd1, 0xae, 0x09, 0xea, 0x5b, 0xf0, 0x0e, 0xbc, 0x4c, 0x2f,
	0xb9, 0xe5, 0x0e, 0xca, 0x8b, 0xa0, 0x9d, 0x75, 0x76, 0x5d, 0xa8, 0x69, 0xb9, 0xca, 0xce, 0xcc,
	0x99, 0x39, 0x33, 0x67, 0x3d, 0x1b, 0xa8, 0x05, 0xfd, 0xa1, 0xf4, 0xf6, 0x5f, 0x78, 0x03, 0x11,
	0xf1, 0x71, 0xe8, 0x4d, 0x44, 0x92, 0x26, 0xc4, 0x1d, 0xc9, 0xe1, 0x26, 0x0c, 0x93, 0x61, 0xa2,
	0x1d, 0x9b, 0xeb, 0x08, 0xdb, 0xd9, 0xf1, 0x64, 0x2a, 0x3e, 0x06, 0xa9, 0xcc, 0xdc, 0x04, 0xdd,
	0xcf, 0x77, 0xbd, 0xe0, 0xc2, 0x4f, 0xb5, 0x8f, 0x7e, 0x73, 0x00, 0x0e, 0xb1, 0xd8, 0x81, 0x9f,
	0xfa, 0x64, 0x0b, 0xfe, 0xd3, 0x96, 0xac, 0x3b, 0x4d, 0xb7, 0xb5, 0xb8, 0xb7, 0xec, 0x8d, 0xe4,
	0xd0, 0xd3, 0xbe, 0xde, 0x78, 0x90, 0xb0, 0x59, 0x9c, 0xec, 0x43, 0xb5, 0x3d, 0x99, 0xc4, 0x97,
	0x6f, 0x23, 0x99, 0xd6, 0x4b, 0x08, 0x5e, 0x47, 0xf0, 0x69, 0xec, 0x5f, 0x72, 0x71, 0x16, 0x8d,
	0x26, 0x31, 0xc7, 0x14, 0x8b, 0x53, 0x49, 0x9d, 0xd8, 0x0f, 0x3e, 0x60, 0x92, 0xfb, 0xd7, 0x24,
	0x83, 0x23, 0x9b, 0xb0, 0x70, 0x14, 0x4d, 0x39, 0xe6, 0x94, 0x9b, 0x6e, 0xab, 0xca, 0x8c, 0xad,
	0x62, 0x8c, 0x07, 0x53, 0x8c, 0x55, 0x74, 0x6c, 0x66, 0xd3, 0x2f, 0x66, 0x36, 0x55, 0x91, 0x6c,
	0x41, 0x59, 0xfd, 0xd6, 0x9d, 0xa6, 0x53, 0x4c, 0x8b, 0x10, 0x55, 0xb5, 0x27, 0x4f, 0xc6, 0x71,
	0x34, 0xe6, 0xf5, 0x52, 0xd3, 0x69, 0x2d, 0x30, 0x63, 0x93, 0x1a, 0x54, 0x4e, 0x06, 0x83, 0x73,
	0x59, 0x77, 0x9b, 0x4e, 0xcb, 0x65, 0xda, 0x20, 0x4b, 0x50, 0x3a, 0x97, 0xf5, 0x32, 0xba, 0x4a,
	0xe7, 0x92, 0xb4, 0x60, 0xa1, 0x7b, 0xe1, 0xa7, 0x4a, 0x54, 0xec, 0x6b, 0x71, 0xef, 0x7f, 0x24,
	0x54, 0xce, 0x93, 0x31, 0x67, 0x26, 0x4a, 0x9f, 0xc1, 0xda, 0xd1, 0x59, 0x5f, 0xf7, 0x79, 0xcc,
	0x3f, 0x29, 0xad, 0x22, 0x1e, 0x2a, 0x9a, 0xd3, 0x58, 0xf4, 0x42, 0x6c, 0xb7, 0xca, 0xb4, 0x41,
	0x5f, 0x02, 0xc9, 0x83, 0xf5, 0x81, 0x3c, 0x06, 0xf7, 0x50, 0x84, 0xd9, 0x60, 0x7f, 0xdc, 0x98,
	0x8a, 0xd1, 0x6d, 0x58, 0x37, 0x89, 0x8c, 0x8f, 0x92, 0x29, 0xcf, 0x72, 0x6f, 0xe7, 0x79, 0x02,
	0x0f, 0x72, 0xf0, 0x60, 0x5a, 0x00, 0x5b, 0x85, 0xe5, 0x6e, 0x86, 0x3a, 0xe2, 0xe9, 0xa1, 0x08,
	0x25, 0x7d, 0x95, 0xeb, 0x30, 0xf3, 0xf5, 0xd9, 0x3f, 0x7c, 0x57, 0xb4, 0x05, 0x64, 0x56, 0xf3,
	0x8c, 0xfb, 0x22, 0xb8, 0x50, 0x25, 0x08, 0x81, 0xf2, 0xb1, 0x3f, 0xe2, 0x19, 0x3d, 0x9e, 0x69,
	0x27, 0x37, 0x93, 0x85, 0x22, 0x5b, 0xf9, 0x34, 0x16, 0x33, 0xaa, 0xa2, 0x9b, 0x56, 0x10, 0xfa,
	0xd4, 0xb2, 0xcd, 0x64, 0x09, 0x65, 0xc1, 0xb4, 0x6f, 0x6e, 0xd1, 0x10, 0xf9, 0x1e, 0x41, 0xf5,
	0xb5, 0x10, 0x89, 0xe8, 0x26, 0xa1, 0xee, 0xb0, 0xc2, 0xac, 0xc3, 0x16, 0x2b, 0xe5, 0x8b, 0x6d,
	0x40, 0x2d, 0x27, 0x9d, 0xd9, 0x10, 0x7a, 0x0c, 0x0f, 0xf3, 0xfa, 0x99, 0x40, 0x9f, 0xdd, 0xdc,
	0x38, 0xe7, 0x7e, 0x1b, 0xa7, 0x6e, 0x72, 0xc6, 0x83, 0xce, 0x82, 0xd9, 0x76, 0x60, 0xc5, 0xd0,
	0x22, 0xee, 0xae, 0xb1, 0xe8, 0x01, 0x2c, 0x99, 0xc2, 0x41, 0xc0, 0x27, 0xa9, 0xde, 0x1a, 0x7d,
	0x46, 0x38, 0x6e, 0x4d, 0x16, 0xdb, 0x80, 0x79, 0x24, 0x92, 0xf8, 0x54, 0x54, 0x59, 0x66, 0xd1,
	0x5d, 0x58, 0xb5, 0xbc, 0x08, 0xbd, 0x93, 0xf8, 0xa6, 0x72, 0xe6, 0x99, 0xf8, 0x5d, 0x39, 0x13,
	0xd0, 0xca, 0xd9, 0x67, 0xc7, 0xb9, 0xdf, 0xb3, 0x43, 0x3b, 0x96, 0xa7, 0x1d, 0x86, 0xf6, 0x39,
	0xaa, 0x41, 0xa5, 0x27, 0xdb, 0x61, 0x98, 0xcd, 0xa8, 0x8d, 0x82, 0x5b, 0x0e, 0x72, 0x3d, 0xe5,
	0x8b, 0xdc, 0xe7, 0xa3, 0xd1, 0x24, 0xa5, 0x5b, 0x49, 0xdc, 0x3c, 0xc9, 0x36, 0xac, 0x19, 0x41,
	0xa2, 0x29, 0x6f, 0x67, 0x2b, 0x6b, 0x25, 0x77, 0x6e, 0x48, 0xfe, 0x0e, 0x36, 0xac, 0x4e, 0x16,
	0x7f, 0x67, 0x4b, 0x05, 0x57, 0x48, 0x56, 0xc0, 0xed, 0x8e, 0x53, 0x6c, 0xa9, 0xc2, 0xd4, 0xb1,
	0x53, 0xbb, 0xfa, 0xd1, 0x98, 0xbb, 0xba, 0x6e, 0x38, 0x5f, 0xaf, 0x1b, 0xce, 0xf7, 0xeb, 0x86,
	0xf3, 0xf9, 0x67, 0x63, 0xee, 0xfd, 0x3c, 0xfe, 0xe3, 0xec, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x7c, 0xae, 0xe8, 0xc5, 0x06, 0x00, 0x00,
}
