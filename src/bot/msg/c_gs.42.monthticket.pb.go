// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.42.monthticket.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ============================================================================
// 月票
type MonthTicketData struct {
	Items      []*MonthTicketItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
	IsBuy      bool               `protobuf:"varint,2,opt,name=IsBuy,proto3" json:"IsBuy,omitempty"`
	Lv         int32              `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Exp        int32              `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
	TakeBase   int32              `protobuf:"varint,5,opt,name=TakeBase,proto3" json:"TakeBase,omitempty"`
	TakeTicket int32              `protobuf:"varint,6,opt,name=TakeTicket,proto3" json:"TakeTicket,omitempty"`
	PickId     []int32            `protobuf:"varint,7,rep,packed,name=PickId" json:"PickId,omitempty"`
	TaskTaken  []int32            `protobuf:"varint,8,rep,packed,name=TaskTaken" json:"TaskTaken,omitempty"`
}

func (m *MonthTicketData) Reset()                    { *m = MonthTicketData{} }
func (m *MonthTicketData) String() string            { return proto.CompactTextString(m) }
func (*MonthTicketData) ProtoMessage()               {}
func (*MonthTicketData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_42Monthticket, []int{0} }

type MonthTicketItem struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
	Fin bool    `protobuf:"varint,3,opt,name=Fin,proto3" json:"Fin,omitempty"`
}

func (m *MonthTicketItem) Reset()                    { *m = MonthTicketItem{} }
func (m *MonthTicketItem) String() string            { return proto.CompactTextString(m) }
func (*MonthTicketItem) ProtoMessage()               {}
func (*MonthTicketItem) Descriptor() ([]byte, []int) { return fileDescriptorCGs_42Monthticket, []int{1} }

// ============================================================================
// 通知: 进度变化
type GS_MonthTicketValueChanged struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *GS_MonthTicketValueChanged) Reset()         { *m = GS_MonthTicketValueChanged{} }
func (m *GS_MonthTicketValueChanged) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketValueChanged) ProtoMessage()    {}
func (*GS_MonthTicketValueChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{2}
}

// 通知: 一个日常项完成
type GS_MonthTicketItemCompleted struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GS_MonthTicketItemCompleted) Reset()         { *m = GS_MonthTicketItemCompleted{} }
func (m *GS_MonthTicketItemCompleted) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketItemCompleted) ProtoMessage()    {}
func (*GS_MonthTicketItemCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{3}
}

// 购买悬赏令
type GS_MonthTicketIsBuy struct {
	IsBuy bool `protobuf:"varint,1,opt,name=IsBuy,proto3" json:"IsBuy,omitempty"`
}

func (m *GS_MonthTicketIsBuy) Reset()         { *m = GS_MonthTicketIsBuy{} }
func (m *GS_MonthTicketIsBuy) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketIsBuy) ProtoMessage()    {}
func (*GS_MonthTicketIsBuy) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{4}
}

type C_MonthTicketInfo struct {
}

func (m *C_MonthTicketInfo) Reset()         { *m = C_MonthTicketInfo{} }
func (m *C_MonthTicketInfo) String() string { return proto.CompactTextString(m) }
func (*C_MonthTicketInfo) ProtoMessage()    {}
func (*C_MonthTicketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{5}
}

type GS_MonthTicketInfo_R struct {
	Data *MonthTicketData `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *GS_MonthTicketInfo_R) Reset()         { *m = GS_MonthTicketInfo_R{} }
func (m *GS_MonthTicketInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketInfo_R) ProtoMessage()    {}
func (*GS_MonthTicketInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{6}
}

// 领取月票奖励
type C_MonthTicketTakeOneKey struct {
}

func (m *C_MonthTicketTakeOneKey) Reset()         { *m = C_MonthTicketTakeOneKey{} }
func (m *C_MonthTicketTakeOneKey) String() string { return proto.CompactTextString(m) }
func (*C_MonthTicketTakeOneKey) ProtoMessage()    {}
func (*C_MonthTicketTakeOneKey) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{7}
}

type GS_MonthTicketTakeOneKey_R struct {
	ErrorCode  int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards    *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
	TakeBase   int32    `protobuf:"varint,3,opt,name=TakeBase,proto3" json:"TakeBase,omitempty"`
	TakeTicket int32    `protobuf:"varint,4,opt,name=TakeTicket,proto3" json:"TakeTicket,omitempty"`
}

func (m *GS_MonthTicketTakeOneKey_R) Reset()         { *m = GS_MonthTicketTakeOneKey_R{} }
func (m *GS_MonthTicketTakeOneKey_R) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketTakeOneKey_R) ProtoMessage()    {}
func (*GS_MonthTicketTakeOneKey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{8}
}

// 购买升级
type C_MonthTicketBuyUp struct {
	N int32 `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_MonthTicketBuyUp) Reset()         { *m = C_MonthTicketBuyUp{} }
func (m *C_MonthTicketBuyUp) String() string { return proto.CompactTextString(m) }
func (*C_MonthTicketBuyUp) ProtoMessage()    {}
func (*C_MonthTicketBuyUp) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{9}
}

type GS_MonthTicketBuyUp_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Lv        int32 `protobuf:"varint,2,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Exp       int32 `protobuf:"varint,3,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *GS_MonthTicketBuyUp_R) Reset()         { *m = GS_MonthTicketBuyUp_R{} }
func (m *GS_MonthTicketBuyUp_R) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketBuyUp_R) ProtoMessage()    {}
func (*GS_MonthTicketBuyUp_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{10}
}

// 领取月票奖励
type C_MonthTicketTake struct {
	Lv int32 `protobuf:"varint,1,opt,name=Lv,proto3" json:"Lv,omitempty"`
}

func (m *C_MonthTicketTake) Reset()         { *m = C_MonthTicketTake{} }
func (m *C_MonthTicketTake) String() string { return proto.CompactTextString(m) }
func (*C_MonthTicketTake) ProtoMessage()    {}
func (*C_MonthTicketTake) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{11}
}

type GS_MonthTicketTake_R struct {
	ErrorCode  int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards    *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
	TakeBase   int32    `protobuf:"varint,3,opt,name=TakeBase,proto3" json:"TakeBase,omitempty"`
	TakeTicket int32    `protobuf:"varint,4,opt,name=TakeTicket,proto3" json:"TakeTicket,omitempty"`
}

func (m *GS_MonthTicketTake_R) Reset()         { *m = GS_MonthTicketTake_R{} }
func (m *GS_MonthTicketTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketTake_R) ProtoMessage()    {}
func (*GS_MonthTicketTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{12}
}

// 领取任务奖励
type C_MonthTicketTaskTake struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=Ids" json:"Ids,omitempty"`
}

func (m *C_MonthTicketTaskTake) Reset()         { *m = C_MonthTicketTaskTake{} }
func (m *C_MonthTicketTaskTake) String() string { return proto.CompactTextString(m) }
func (*C_MonthTicketTaskTake) ProtoMessage()    {}
func (*C_MonthTicketTaskTake) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{13}
}

type GS_MonthTicketTaskTake_R struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Ids       []int32 `protobuf:"varint,2,rep,packed,name=Ids" json:"Ids,omitempty"`
	Lv        int32   `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Exp       int32   `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *GS_MonthTicketTaskTake_R) Reset()         { *m = GS_MonthTicketTaskTake_R{} }
func (m *GS_MonthTicketTaskTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_MonthTicketTaskTake_R) ProtoMessage()    {}
func (*GS_MonthTicketTaskTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_42Monthticket, []int{14}
}

func init() {
	proto.RegisterType((*MonthTicketData)(nil), "msg.MonthTicketData")
	proto.RegisterType((*MonthTicketItem)(nil), "msg.MonthTicketItem")
	proto.RegisterType((*GS_MonthTicketValueChanged)(nil), "msg.GS_MonthTicketValueChanged")
	proto.RegisterType((*GS_MonthTicketItemCompleted)(nil), "msg.GS_MonthTicketItemCompleted")
	proto.RegisterType((*GS_MonthTicketIsBuy)(nil), "msg.GS_MonthTicketIsBuy")
	proto.RegisterType((*C_MonthTicketInfo)(nil), "msg.C_MonthTicketInfo")
	proto.RegisterType((*GS_MonthTicketInfo_R)(nil), "msg.GS_MonthTicketInfo_R")
	proto.RegisterType((*C_MonthTicketTakeOneKey)(nil), "msg.C_MonthTicketTakeOneKey")
	proto.RegisterType((*GS_MonthTicketTakeOneKey_R)(nil), "msg.GS_MonthTicketTakeOneKey_R")
	proto.RegisterType((*C_MonthTicketBuyUp)(nil), "msg.C_MonthTicketBuyUp")
	proto.RegisterType((*GS_MonthTicketBuyUp_R)(nil), "msg.GS_MonthTicketBuyUp_R")
	proto.RegisterType((*C_MonthTicketTake)(nil), "msg.C_MonthTicketTake")
	proto.RegisterType((*GS_MonthTicketTake_R)(nil), "msg.GS_MonthTicketTake_R")
	proto.RegisterType((*C_MonthTicketTaskTake)(nil), "msg.C_MonthTicketTaskTake")
	proto.RegisterType((*GS_MonthTicketTaskTake_R)(nil), "msg.GS_MonthTicketTaskTake_R")
}
func (m *MonthTicketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthTicketData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsBuy {
		dAtA[i] = 0x10
		i++
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Exp))
	}
	if m.TakeBase != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeTicket))
	}
	if len(m.PickId) > 0 {
		dAtA2 := make([]byte, len(m.PickId)*10)
		var j1 int
		for _, num1 := range m.PickId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.TaskTaken) > 0 {
		dAtA4 := make([]byte, len(m.TaskTaken)*10)
		var j3 int
		for _, num1 := range m.TaskTaken {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *MonthTicketItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthTicketItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	if m.Fin {
		dAtA[i] = 0x18
		i++
		if m.Fin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_MonthTicketValueChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketValueChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	return i, nil
}

func (m *GS_MonthTicketItemCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketItemCompleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_MonthTicketIsBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketIsBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		dAtA[i] = 0x8
		i++
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C_MonthTicketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MonthTicketInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_MonthTicketInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_MonthTicketTakeOneKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MonthTicketTakeOneKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_MonthTicketTakeOneKey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketTakeOneKey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Rewards.Size()))
		n6, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.TakeBase != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeTicket))
	}
	return i, nil
}

func (m *C_MonthTicketBuyUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MonthTicketBuyUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_MonthTicketBuyUp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketBuyUp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *C_MonthTicketTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MonthTicketTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *GS_MonthTicketTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Rewards.Size()))
		n7, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.TakeBase != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.TakeTicket))
	}
	return i, nil
}

func (m *C_MonthTicketTaskTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_MonthTicketTaskTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA9 := make([]byte, len(m.Ids)*10)
		var j8 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *GS_MonthTicketTaskTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_MonthTicketTaskTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Ids) > 0 {
		dAtA11 := make([]byte, len(m.Ids)*10)
		var j10 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_42Monthticket(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func encodeVarintCGs_42Monthticket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MonthTicketData) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_42Monthticket(uint64(l))
		}
	}
	if m.IsBuy {
		n += 2
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Exp))
	}
	if m.TakeBase != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeTicket))
	}
	if len(m.PickId) > 0 {
		l = 0
		for _, e := range m.PickId {
			l += sovCGs_42Monthticket(uint64(e))
		}
		n += 1 + sovCGs_42Monthticket(uint64(l)) + l
	}
	if len(m.TaskTaken) > 0 {
		l = 0
		for _, e := range m.TaskTaken {
			l += sovCGs_42Monthticket(uint64(e))
		}
		n += 1 + sovCGs_42Monthticket(uint64(l)) + l
	}
	return n
}

func (m *MonthTicketItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	if m.Fin {
		n += 2
	}
	return n
}

func (m *GS_MonthTicketValueChanged) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func (m *GS_MonthTicketItemCompleted) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Id))
	}
	return n
}

func (m *GS_MonthTicketIsBuy) Size() (n int) {
	var l int
	_ = l
	if m.IsBuy {
		n += 2
	}
	return n
}

func (m *C_MonthTicketInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_MonthTicketInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCGs_42Monthticket(uint64(l))
	}
	return n
}

func (m *C_MonthTicketTakeOneKey) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_MonthTicketTakeOneKey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_42Monthticket(uint64(l))
	}
	if m.TakeBase != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeTicket))
	}
	return n
}

func (m *C_MonthTicketBuyUp) Size() (n int) {
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.N))
	}
	return n
}

func (m *GS_MonthTicketBuyUp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.ErrorCode))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Exp))
	}
	return n
}

func (m *C_MonthTicketTake) Size() (n int) {
	var l int
	_ = l
	if m.Lv != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Lv))
	}
	return n
}

func (m *GS_MonthTicketTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_42Monthticket(uint64(l))
	}
	if m.TakeBase != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeBase))
	}
	if m.TakeTicket != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.TakeTicket))
	}
	return n
}

func (m *C_MonthTicketTaskTake) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCGs_42Monthticket(uint64(e))
		}
		n += 1 + sovCGs_42Monthticket(uint64(l)) + l
	}
	return n
}

func (m *GS_MonthTicketTaskTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.ErrorCode))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCGs_42Monthticket(uint64(e))
		}
		n += 1 + sovCGs_42Monthticket(uint64(l)) + l
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovCGs_42Monthticket(uint64(m.Exp))
	}
	return n
}

func sovCGs_42Monthticket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_42Monthticket(x uint64) (n int) {
	return sovCGs_42Monthticket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonthTicketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthTicketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthTicketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MonthTicketItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeBase", wireType)
			}
			m.TakeBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeBase |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeTicket", wireType)
			}
			m.TakeTicket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeTicket |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PickId = append(m.PickId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_42Monthticket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_42Monthticket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PickId = append(m.PickId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PickId", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaskTaken = append(m.TaskTaken, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_42Monthticket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_42Monthticket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaskTaken = append(m.TaskTaken, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTaken", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthTicketItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthTicketItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthTicketItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketValueChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketValueChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketValueChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketItemCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketItemCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketItemCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketIsBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketIsBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketIsBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MonthTicketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MonthTicketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MonthTicketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MonthTicketData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MonthTicketTakeOneKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MonthTicketTakeOneKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MonthTicketTakeOneKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketTakeOneKey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketTakeOneKey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketTakeOneKey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeBase", wireType)
			}
			m.TakeBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeBase |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeTicket", wireType)
			}
			m.TakeTicket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeTicket |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MonthTicketBuyUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MonthTicketBuyUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MonthTicketBuyUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketBuyUp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketBuyUp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketBuyUp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MonthTicketTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MonthTicketTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MonthTicketTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeBase", wireType)
			}
			m.TakeBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeBase |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeTicket", wireType)
			}
			m.TakeTicket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeTicket |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_MonthTicketTaskTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_MonthTicketTaskTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_MonthTicketTaskTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_42Monthticket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_42Monthticket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_MonthTicketTaskTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_MonthTicketTaskTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_MonthTicketTaskTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_42Monthticket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_42Monthticket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_42Monthticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_42Monthticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_42Monthticket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_42Monthticket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_42Monthticket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_42Monthticket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_42Monthticket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_42Monthticket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_42Monthticket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_42Monthticket   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.42.monthticket.proto", fileDescriptorCGs_42Monthticket) }

var fileDescriptorCGs_42Monthticket = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xc6, 0x71, 0x1a, 0xa6, 0x15, 0x3f, 0xdb, 0x04, 0xdc, 0x80, 0xac, 0x68, 0x91, 0x50,
	0x00, 0x61, 0x55, 0x81, 0x33, 0x42, 0x09, 0x01, 0x59, 0x94, 0x82, 0x96, 0x50, 0x8e, 0x91, 0x89,
	0xb7, 0x6e, 0x94, 0xd8, 0x8e, 0xbc, 0x4e, 0x21, 0x6f, 0xc1, 0x91, 0x13, 0xcf, 0xd3, 0x23, 0x8f,
	0x00, 0xe1, 0xc0, 0x6b, 0xa0, 0xd9, 0x75, 0x93, 0xd8, 0x20, 0x72, 0xed, 0x6d, 0xfc, 0xcd, 0x37,
	0x93, 0xef, 0x9b, 0x99, 0x2c, 0xec, 0x0f, 0x07, 0x81, 0x74, 0x9e, 0xb4, 0x9d, 0x30, 0x8e, 0xd2,
	0xd3, 0x74, 0x34, 0x1c, 0x8b, 0xd4, 0x99, 0x26, 0x71, 0x1a, 0x53, 0x23, 0x94, 0x41, 0x03, 0x82,
	0x38, 0x88, 0x35, 0xd0, 0xa8, 0x2b, 0xee, 0xc1, 0x81, 0x23, 0xd3, 0x64, 0x36, 0x4c, 0xa5, 0x86,
	0xd9, 0x6f, 0x02, 0xd7, 0x5e, 0x63, 0x75, 0x5f, 0x55, 0x3f, 0xf7, 0x52, 0x8f, 0x3e, 0x00, 0xd3,
	0x4d, 0x45, 0x28, 0x2d, 0xd2, 0x34, 0x5a, 0x3b, 0xed, 0x9a, 0x13, 0xca, 0xc0, 0x59, 0x23, 0x61,
	0x92, 0x6b, 0x0a, 0xad, 0x81, 0xe9, 0xca, 0xce, 0x6c, 0x6e, 0x95, 0x9a, 0xa4, 0x55, 0xe5, 0xfa,
	0x83, 0x5e, 0x85, 0xd2, 0xe1, 0x99, 0x65, 0x34, 0x49, 0xcb, 0xe4, 0xa5, 0xc3, 0x33, 0x7a, 0x1d,
	0x8c, 0xde, 0xe7, 0xa9, 0x55, 0x56, 0x00, 0x86, 0xb4, 0x01, 0xd5, 0xbe, 0x37, 0x16, 0x1d, 0x4f,
	0x0a, 0xcb, 0x54, 0xf0, 0xf2, 0x9b, 0xda, 0x00, 0x18, 0xeb, 0x1f, 0xb3, 0x2a, 0x2a, 0xbb, 0x86,
	0xd0, 0x9b, 0x50, 0x79, 0x3b, 0x1a, 0x8e, 0x5d, 0xdf, 0xda, 0x6e, 0x1a, 0x2d, 0x93, 0x67, 0x5f,
	0xf4, 0x0e, 0x5c, 0xe9, 0x7b, 0x72, 0x8c, 0xcc, 0xc8, 0xaa, 0xaa, 0xd4, 0x0a, 0x60, 0xbd, 0x9c,
	0x51, 0x54, 0x8f, 0x32, 0x5d, 0xdf, 0x22, 0x5a, 0xa6, 0xeb, 0xa3, 0xcc, 0x63, 0x6f, 0xa2, 0xac,
	0x10, 0x8e, 0x21, 0x22, 0x2f, 0x46, 0x91, 0x72, 0x52, 0xe5, 0x18, 0xb2, 0xa7, 0xd0, 0x78, 0xf9,
	0x6e, 0xb0, 0xd6, 0xe9, 0xd8, 0x9b, 0xcc, 0x44, 0xf7, 0xd4, 0x8b, 0x02, 0xe1, 0x6f, 0xee, 0xc8,
	0x1e, 0xc1, 0xed, 0x7c, 0x3d, 0x2a, 0xe9, 0xc6, 0xe1, 0x74, 0x22, 0xd2, 0xbf, 0x1b, 0xb0, 0x87,
	0xb0, 0x57, 0xa0, 0xab, 0x01, 0x2f, 0xc7, 0x4e, 0xd6, 0xc6, 0xce, 0xf6, 0xe0, 0x46, 0x37, 0xc7,
	0x8d, 0x4e, 0x62, 0xf6, 0x0c, 0x6a, 0x85, 0x0e, 0xd1, 0x49, 0x3c, 0xe0, 0xb4, 0x05, 0x65, 0xdc,
	0xb6, 0xea, 0xf0, 0x8f, 0x25, 0x63, 0x8e, 0x2b, 0x06, 0xdb, 0x87, 0x5b, 0xb9, 0xb6, 0x38, 0xcf,
	0x37, 0x91, 0x78, 0x25, 0xe6, 0xec, 0x1b, 0x29, 0x8e, 0x63, 0x95, 0x1c, 0x70, 0xdc, 0x48, 0x2f,
	0x49, 0xe2, 0xa4, 0x1b, 0xfb, 0x22, 0x33, 0xb5, 0x02, 0xe8, 0x3d, 0xd8, 0xe6, 0xe2, 0x93, 0x97,
	0xf8, 0x52, 0x0d, 0x68, 0xa7, 0xbd, 0xab, 0x44, 0x64, 0x18, 0xbf, 0x48, 0xe6, 0x6e, 0xc5, 0xf8,
	0xef, 0xad, 0x94, 0x8b, 0xb7, 0xc2, 0x18, 0xd0, 0x9c, 0xf6, 0xce, 0x6c, 0xfe, 0x7e, 0x4a, 0x77,
	0x81, 0x1c, 0x65, 0x7a, 0xc8, 0x11, 0xfb, 0x00, 0xf5, 0xbc, 0x07, 0x45, 0xda, 0x28, 0x5f, 0x1f,
	0x79, 0xa9, 0x78, 0xe4, 0xc6, 0xf2, 0xc8, 0xd9, 0xdd, 0xc2, 0x3e, 0x50, 0x57, 0x56, 0x46, 0x2e,
	0xca, 0xd8, 0x57, 0x52, 0x5c, 0x10, 0xd2, 0x2e, 0xc5, 0xf0, 0xee, 0x43, 0xbd, 0xa0, 0x5f, 0xff,
	0x99, 0xd0, 0xaa, 0xeb, 0xeb, 0xf7, 0xc1, 0xe4, 0x18, 0xb2, 0x09, 0x58, 0x45, 0x13, 0x9a, 0xbb,
	0xd1, 0x48, 0xd6, 0xab, 0xb4, 0xec, 0xb5, 0xf9, 0xf5, 0xe8, 0xd4, 0xce, 0x7f, 0xda, 0x5b, 0xe7,
	0x0b, 0x9b, 0x7c, 0x5f, 0xd8, 0xe4, 0xc7, 0xc2, 0x26, 0x5f, 0x7e, 0xd9, 0x5b, 0x1f, 0x2b, 0xea,
	0x49, 0x7b, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x82, 0x3c, 0xa1, 0xbd, 0x17, 0x05, 0x00, 0x00,
}
