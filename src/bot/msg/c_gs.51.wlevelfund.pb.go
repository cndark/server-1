// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.51.wlevelfund.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 推图基金
type WLevelFundData struct {
	IsBuy bool    `protobuf:"varint,1,opt,name=IsBuy,proto3" json:"IsBuy,omitempty"`
	Taken []int32 `protobuf:"varint,2,rep,packed,name=Taken" json:"Taken,omitempty"`
}

func (m *WLevelFundData) Reset()                    { *m = WLevelFundData{} }
func (m *WLevelFundData) String() string            { return proto.CompactTextString(m) }
func (*WLevelFundData) ProtoMessage()               {}
func (*WLevelFundData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_51Wlevelfund, []int{0} }

// 新购
type GS_WLevelFundNew struct {
	FundId int32 `protobuf:"varint,1,opt,name=FundId,proto3" json:"FundId,omitempty"`
}

func (m *GS_WLevelFundNew) Reset()                    { *m = GS_WLevelFundNew{} }
func (m *GS_WLevelFundNew) String() string            { return proto.CompactTextString(m) }
func (*GS_WLevelFundNew) ProtoMessage()               {}
func (*GS_WLevelFundNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_51Wlevelfund, []int{1} }

type C_WLevelFundTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_WLevelFundTake) Reset()                    { *m = C_WLevelFundTake{} }
func (m *C_WLevelFundTake) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelFundTake) ProtoMessage()               {}
func (*C_WLevelFundTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_51Wlevelfund, []int{2} }

type GS_WLevelFundTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WLevelFundTake_R) Reset()         { *m = GS_WLevelFundTake_R{} }
func (m *GS_WLevelFundTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_WLevelFundTake_R) ProtoMessage()    {}
func (*GS_WLevelFundTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_51Wlevelfund, []int{3}
}

func init() {
	proto.RegisterType((*WLevelFundData)(nil), "msg.WLevelFundData")
	proto.RegisterType((*GS_WLevelFundNew)(nil), "msg.GS_WLevelFundNew")
	proto.RegisterType((*C_WLevelFundTake)(nil), "msg.C_WLevelFundTake")
	proto.RegisterType((*GS_WLevelFundTake_R)(nil), "msg.GS_WLevelFundTake_R")
}
func (m *WLevelFundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLevelFundData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		dAtA[i] = 0x8
		i++
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Taken) > 0 {
		dAtA2 := make([]byte, len(m.Taken)*10)
		var j1 int
		for _, num1 := range m.Taken {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_51Wlevelfund(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GS_WLevelFundNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelFundNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FundId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_51Wlevelfund(dAtA, i, uint64(m.FundId))
	}
	return i, nil
}

func (m *C_WLevelFundTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelFundTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_51Wlevelfund(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_WLevelFundTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelFundTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_51Wlevelfund(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_51Wlevelfund(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintCGs_51Wlevelfund(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WLevelFundData) Size() (n int) {
	var l int
	_ = l
	if m.IsBuy {
		n += 2
	}
	if len(m.Taken) > 0 {
		l = 0
		for _, e := range m.Taken {
			l += sovCGs_51Wlevelfund(uint64(e))
		}
		n += 1 + sovCGs_51Wlevelfund(uint64(l)) + l
	}
	return n
}

func (m *GS_WLevelFundNew) Size() (n int) {
	var l int
	_ = l
	if m.FundId != 0 {
		n += 1 + sovCGs_51Wlevelfund(uint64(m.FundId))
	}
	return n
}

func (m *C_WLevelFundTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_51Wlevelfund(uint64(m.Id))
	}
	return n
}

func (m *GS_WLevelFundTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_51Wlevelfund(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_51Wlevelfund(uint64(l))
	}
	return n
}

func sovCGs_51Wlevelfund(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_51Wlevelfund(x uint64) (n int) {
	return sovCGs_51Wlevelfund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WLevelFundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_51Wlevelfund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLevelFundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLevelFundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_51Wlevelfund
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Taken = append(m.Taken, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_51Wlevelfund
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_51Wlevelfund
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_51Wlevelfund
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Taken = append(m.Taken, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Taken", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_51Wlevelfund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_51Wlevelfund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelFundNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_51Wlevelfund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelFundNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelFundNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundId", wireType)
			}
			m.FundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_51Wlevelfund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_51Wlevelfund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelFundTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_51Wlevelfund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelFundTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelFundTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_51Wlevelfund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_51Wlevelfund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelFundTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_51Wlevelfund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelFundTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelFundTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_51Wlevelfund
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_51Wlevelfund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_51Wlevelfund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_51Wlevelfund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_51Wlevelfund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_51Wlevelfund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_51Wlevelfund
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_51Wlevelfund
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_51Wlevelfund(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_51Wlevelfund = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_51Wlevelfund   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.51.wlevelfund.proto", fileDescriptorCGs_51Wlevelfund) }

var fileDescriptorCGs_51Wlevelfund = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0x35, 0xd4, 0x2b, 0xcf, 0x49, 0x2d, 0x4b, 0xcd, 0x49, 0x2b, 0xcd, 0x4b, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87,
	0x08, 0x48, 0x89, 0x82, 0x95, 0x1a, 0x18, 0xe8, 0x15, 0x97, 0x14, 0x95, 0x26, 0x97, 0x14, 0x43,
	0x84, 0x95, 0x6c, 0xb8, 0xf8, 0xc2, 0x7d, 0x40, 0x7a, 0xdd, 0x4a, 0xf3, 0x52, 0x5c, 0x12, 0x4b,
	0x12, 0x85, 0x44, 0xb8, 0x58, 0x3d, 0x8b, 0x9d, 0x4a, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x82, 0x20, 0x1c, 0x90, 0x68, 0x48, 0x62, 0x76, 0x6a, 0x9e, 0x04, 0x93, 0x02, 0xb3, 0x06, 0x6b,
	0x10, 0x84, 0xa3, 0xa4, 0xc5, 0x25, 0xe0, 0x1e, 0x1c, 0x8f, 0x30, 0xc0, 0x2f, 0xb5, 0x5c, 0x48,
	0x8c, 0x8b, 0x0d, 0xc4, 0xf4, 0x4c, 0x01, 0x1b, 0xc0, 0x1a, 0x04, 0xe5, 0x29, 0x29, 0x71, 0x09,
	0x38, 0x23, 0x29, 0x05, 0x19, 0x20, 0xc4, 0xc7, 0xc5, 0x04, 0x57, 0xc7, 0xe4, 0x99, 0xa2, 0x14,
	0xcd, 0x25, 0x8c, 0x62, 0x1e, 0x48, 0x51, 0x7c, 0x90, 0x90, 0x0c, 0x17, 0xa7, 0x6b, 0x51, 0x51,
	0x7e, 0x91, 0x73, 0x7e, 0x4a, 0x2a, 0x54, 0x35, 0x42, 0x40, 0x48, 0x8d, 0x8b, 0x3d, 0x28, 0xb5,
	0x3c, 0xb1, 0x28, 0xa5, 0x58, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x88, 0x47, 0x2f, 0xb7, 0x38,
	0x5d, 0x0f, 0x2a, 0x16, 0x04, 0x93, 0x74, 0x12, 0x39, 0xf1, 0x50, 0x8e, 0xe1, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0x21, 0x89, 0x0d,
	0x1c, 0x0e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x95, 0x53, 0xaa, 0x4b, 0x01, 0x00,
	0x00,
}
