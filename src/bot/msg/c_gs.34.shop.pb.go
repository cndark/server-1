// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.34.shop.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 商店
type ShopData struct {
	Id    int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Goods []*Good `protobuf:"bytes,2,rep,name=Goods" json:"Goods,omitempty"`
}

func (m *ShopData) Reset()                    { *m = ShopData{} }
func (m *ShopData) String() string            { return proto.CompactTextString(m) }
func (*ShopData) ProtoMessage()               {}
func (*ShopData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{0} }

type Good struct {
	Id     int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BuyCnt int32 `protobuf:"varint,2,opt,name=BuyCnt,proto3" json:"BuyCnt,omitempty"`
}

func (m *Good) Reset()                    { *m = Good{} }
func (m *Good) String() string            { return proto.CompactTextString(m) }
func (*Good) ProtoMessage()               {}
func (*Good) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{1} }

type C_ShopGetInfo struct {
	ShopId int32 `protobuf:"varint,1,opt,name=ShopId,proto3" json:"ShopId,omitempty"`
}

func (m *C_ShopGetInfo) Reset()                    { *m = C_ShopGetInfo{} }
func (m *C_ShopGetInfo) String() string            { return proto.CompactTextString(m) }
func (*C_ShopGetInfo) ProtoMessage()               {}
func (*C_ShopGetInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{2} }

type GS_ShopGetInfo_R struct {
	ErrorCode int32     `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Shop      *ShopData `protobuf:"bytes,2,opt,name=Shop" json:"Shop,omitempty"`
}

func (m *GS_ShopGetInfo_R) Reset()                    { *m = GS_ShopGetInfo_R{} }
func (m *GS_ShopGetInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ShopGetInfo_R) ProtoMessage()               {}
func (*GS_ShopGetInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{3} }

type C_ShopBuy struct {
	ShopId int32 `protobuf:"varint,1,opt,name=ShopId,proto3" json:"ShopId,omitempty"`
	ItemId int32 `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	N      int32 `protobuf:"varint,3,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_ShopBuy) Reset()                    { *m = C_ShopBuy{} }
func (m *C_ShopBuy) String() string            { return proto.CompactTextString(m) }
func (*C_ShopBuy) ProtoMessage()               {}
func (*C_ShopBuy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{4} }

type GS_ShopBuy_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ItemId    int32 `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	N         int32 `protobuf:"varint,3,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *GS_ShopBuy_R) Reset()                    { *m = GS_ShopBuy_R{} }
func (m *GS_ShopBuy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ShopBuy_R) ProtoMessage()               {}
func (*GS_ShopBuy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{5} }

type C_ShopRefresh struct {
	ShopId int32 `protobuf:"varint,1,opt,name=ShopId,proto3" json:"ShopId,omitempty"`
}

func (m *C_ShopRefresh) Reset()                    { *m = C_ShopRefresh{} }
func (m *C_ShopRefresh) String() string            { return proto.CompactTextString(m) }
func (*C_ShopRefresh) ProtoMessage()               {}
func (*C_ShopRefresh) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{6} }

type GS_ShopRefresh_R struct {
	ErrorCode int32     `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Shop      *ShopData `protobuf:"bytes,2,opt,name=Shop" json:"Shop,omitempty"`
}

func (m *GS_ShopRefresh_R) Reset()                    { *m = GS_ShopRefresh_R{} }
func (m *GS_ShopRefresh_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ShopRefresh_R) ProtoMessage()               {}
func (*GS_ShopRefresh_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_34Shop, []int{7} }

func init() {
	proto.RegisterType((*ShopData)(nil), "msg.ShopData")
	proto.RegisterType((*Good)(nil), "msg.Good")
	proto.RegisterType((*C_ShopGetInfo)(nil), "msg.C_ShopGetInfo")
	proto.RegisterType((*GS_ShopGetInfo_R)(nil), "msg.GS_ShopGetInfo_R")
	proto.RegisterType((*C_ShopBuy)(nil), "msg.C_ShopBuy")
	proto.RegisterType((*GS_ShopBuy_R)(nil), "msg.GS_ShopBuy_R")
	proto.RegisterType((*C_ShopRefresh)(nil), "msg.C_ShopRefresh")
	proto.RegisterType((*GS_ShopRefresh_R)(nil), "msg.GS_ShopRefresh_R")
}
func (m *ShopData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.Id))
	}
	if len(m.Goods) > 0 {
		for _, msg := range m.Goods {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_34Shop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Good) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Good) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.Id))
	}
	if m.BuyCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.BuyCnt))
	}
	return i, nil
}

func (m *C_ShopGetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ShopGetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ShopId))
	}
	return i, nil
}

func (m *GS_ShopGetInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ShopGetInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Shop != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.Shop.Size()))
		n1, err := m.Shop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_ShopBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ShopBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ShopId))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ItemId))
	}
	if m.N != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_ShopBuy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ShopBuy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ErrorCode))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ItemId))
	}
	if m.N != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *C_ShopRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ShopRefresh) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ShopId))
	}
	return i, nil
}

func (m *GS_ShopRefresh_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ShopRefresh_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Shop != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_34Shop(dAtA, i, uint64(m.Shop.Size()))
		n2, err := m.Shop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintCGs_34Shop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShopData) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.Id))
	}
	if len(m.Goods) > 0 {
		for _, e := range m.Goods {
			l = e.Size()
			n += 1 + l + sovCGs_34Shop(uint64(l))
		}
	}
	return n
}

func (m *Good) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.Id))
	}
	if m.BuyCnt != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.BuyCnt))
	}
	return n
}

func (m *C_ShopGetInfo) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ShopId))
	}
	return n
}

func (m *GS_ShopGetInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ErrorCode))
	}
	if m.Shop != nil {
		l = m.Shop.Size()
		n += 1 + l + sovCGs_34Shop(uint64(l))
	}
	return n
}

func (m *C_ShopBuy) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ShopId))
	}
	if m.ItemId != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ItemId))
	}
	if m.N != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.N))
	}
	return n
}

func (m *GS_ShopBuy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ErrorCode))
	}
	if m.ItemId != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ItemId))
	}
	if m.N != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.N))
	}
	return n
}

func (m *C_ShopRefresh) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ShopId))
	}
	return n
}

func (m *GS_ShopRefresh_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_34Shop(uint64(m.ErrorCode))
	}
	if m.Shop != nil {
		l = m.Shop.Size()
		n += 1 + l + sovCGs_34Shop(uint64(l))
	}
	return n
}

func sovCGs_34Shop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_34Shop(x uint64) (n int) {
	return sovCGs_34Shop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShopData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goods = append(m.Goods, &Good{})
			if err := m.Goods[len(m.Goods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Good) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Good: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Good: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCnt", wireType)
			}
			m.BuyCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ShopGetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ShopGetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ShopGetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ShopGetInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ShopGetInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ShopGetInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shop == nil {
				m.Shop = &ShopData{}
			}
			if err := m.Shop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ShopBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ShopBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ShopBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ShopBuy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ShopBuy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ShopBuy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ShopRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ShopRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ShopRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ShopRefresh_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ShopRefresh_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ShopRefresh_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shop == nil {
				m.Shop = &ShopData{}
			}
			if err := m.Shop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_34Shop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_34Shop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_34Shop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_34Shop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_34Shop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_34Shop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_34Shop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_34Shop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_34Shop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_34Shop   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.34.shop.proto", fileDescriptorCGs_34Shop) }

var fileDescriptorCGs_34Shop = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0x36, 0xd1, 0x2b, 0xce, 0xc8, 0x2f, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08, 0x28, 0x59, 0x73, 0x71, 0x04,
	0x67, 0xe4, 0x17, 0xb8, 0x24, 0x96, 0x24, 0x0a, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0x31, 0x79, 0xa6, 0x08, 0xc9, 0x73, 0xb1, 0xba, 0xe7, 0xe7, 0xa7, 0x14,
	0x4b, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0x71, 0xea, 0xe5, 0x16, 0xa7, 0xeb, 0x81, 0x44, 0x82,
	0x20, 0xe2, 0x4a, 0x7a, 0x5c, 0x2c, 0x20, 0x06, 0x86, 0x46, 0x31, 0x2e, 0x36, 0xa7, 0xd2, 0x4a,
	0xe7, 0xbc, 0x12, 0x09, 0x26, 0xb0, 0x18, 0x94, 0xa7, 0xa4, 0xce, 0xc5, 0xeb, 0x1c, 0x0f, 0xb2,
	0xce, 0x3d, 0xb5, 0xc4, 0x33, 0x2f, 0x2d, 0x1f, 0xa4, 0x10, 0xc4, 0x85, 0x6b, 0x86, 0xf2, 0x94,
	0x82, 0xb9, 0x04, 0xdc, 0x83, 0x91, 0x55, 0xc6, 0x07, 0x09, 0xc9, 0x70, 0x71, 0xba, 0x16, 0x15,
	0xe5, 0x17, 0x39, 0xe7, 0xa7, 0xa4, 0x42, 0x95, 0x23, 0x04, 0x84, 0x14, 0xb9, 0x58, 0x40, 0xca,
	0xc1, 0x16, 0x72, 0x1b, 0xf1, 0x82, 0x9d, 0x0a, 0xf3, 0x58, 0x10, 0x58, 0x4a, 0xc9, 0x93, 0x8b,
	0x13, 0x62, 0xbb, 0x53, 0x69, 0x25, 0x2e, 0x9b, 0x41, 0xe2, 0x9e, 0x25, 0xa9, 0xb9, 0x9e, 0x29,
	0x30, 0xa7, 0x43, 0x78, 0x42, 0x3c, 0x5c, 0x8c, 0x7e, 0x12, 0xcc, 0x60, 0x21, 0x46, 0x3f, 0xa5,
	0x20, 0x2e, 0x1e, 0xa8, 0xfb, 0x9c, 0x4a, 0x2b, 0x09, 0xba, 0x8d, 0x38, 0x33, 0xe1, 0x81, 0x13,
	0x94, 0x9a, 0x56, 0x94, 0x5a, 0x9c, 0x41, 0x44, 0xe0, 0x40, 0x55, 0x52, 0x21, 0x70, 0x9c, 0x44,
	0x4e, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x27, 0x12, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x8d, 0x88, 0x8a, 0x4b, 0x02, 0x00, 0x00,
}
