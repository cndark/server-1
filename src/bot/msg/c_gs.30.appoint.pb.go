// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.30.appoint.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ============================================================================
// 酒馆派遣
type AppointData struct {
	Tasks []*AppointTask `protobuf:"bytes,1,rep,name=Tasks" json:"Tasks,omitempty"`
	AddTs int64          `protobuf:"varint,2,opt,name=AddTs,proto3" json:"AddTs,omitempty"`
}

func (m *AppointData) Reset()                    { *m = AppointData{} }
func (m *AppointData) String() string            { return proto.CompactTextString(m) }
func (*AppointData) ProtoMessage()               {}
func (*AppointData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{0} }

type AppointTask struct {
	Seq int32 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Id  int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	// 任务条件1:最大英雄星级;2:元素*100+个数;2:职业*100+个数
	Cond   map[int32]int32 `protobuf:"bytes,3,rep,name=Cond" json:"Cond,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsLock bool            `protobuf:"varint,4,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
	Ts     int64           `protobuf:"varint,5,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Heroes []int64         `protobuf:"varint,6,rep,packed,name=Heroes" json:"Heroes,omitempty"`
}

func (m *AppointTask) Reset()                    { *m = AppointTask{} }
func (m *AppointTask) String() string            { return proto.CompactTextString(m) }
func (*AppointTask) ProtoMessage()               {}
func (*AppointTask) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{1} }

// 新增任务
type GS_AppointAddTask struct {
	Tasks []*AppointTask `protobuf:"bytes,1,rep,name=Tasks" json:"Tasks,omitempty"`
}

func (m *GS_AppointAddTask) Reset()                    { *m = GS_AppointAddTask{} }
func (m *GS_AppointAddTask) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointAddTask) ProtoMessage()               {}
func (*GS_AppointAddTask) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{2} }

// 检查恢复
type C_AppointCheckAdd struct {
}

func (m *C_AppointCheckAdd) Reset()                    { *m = C_AppointCheckAdd{} }
func (m *C_AppointCheckAdd) String() string            { return proto.CompactTextString(m) }
func (*C_AppointCheckAdd) ProtoMessage()               {}
func (*C_AppointCheckAdd) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{3} }

type GS_AppointCheckAdd_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	AddTs     int64 `protobuf:"varint,2,opt,name=AddTs,proto3" json:"AddTs,omitempty"`
}

func (m *GS_AppointCheckAdd_R) Reset()         { *m = GS_AppointCheckAdd_R{} }
func (m *GS_AppointCheckAdd_R) String() string { return proto.CompactTextString(m) }
func (*GS_AppointCheckAdd_R) ProtoMessage()    {}
func (*GS_AppointCheckAdd_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_30Appoint, []int{4}
}

// 刷新
type C_AppointRefresh struct {
}

func (m *C_AppointRefresh) Reset()                    { *m = C_AppointRefresh{} }
func (m *C_AppointRefresh) String() string            { return proto.CompactTextString(m) }
func (*C_AppointRefresh) ProtoMessage()               {}
func (*C_AppointRefresh) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{5} }

type GS_AppointRefresh_R struct {
	ErrorCode int32        `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data      *AppointData `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (m *GS_AppointRefresh_R) Reset()                    { *m = GS_AppointRefresh_R{} }
func (m *GS_AppointRefresh_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointRefresh_R) ProtoMessage()               {}
func (*GS_AppointRefresh_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{6} }

// 锁定
type C_AppointLock struct {
	Seq    int32 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	IsLock bool  `protobuf:"varint,2,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
}

func (m *C_AppointLock) Reset()                    { *m = C_AppointLock{} }
func (m *C_AppointLock) String() string            { return proto.CompactTextString(m) }
func (*C_AppointLock) ProtoMessage()               {}
func (*C_AppointLock) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{7} }

type GS_AppointLock_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int32 `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
	IsLock    bool  `protobuf:"varint,3,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
}

func (m *GS_AppointLock_R) Reset()                    { *m = GS_AppointLock_R{} }
func (m *GS_AppointLock_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointLock_R) ProtoMessage()               {}
func (*GS_AppointLock_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{8} }

// 派遣
type C_AppointSend struct {
	Seq    int32   `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Heroes []int64 `protobuf:"varint,2,rep,packed,name=Heroes" json:"Heroes,omitempty"`
}

func (m *C_AppointSend) Reset()                    { *m = C_AppointSend{} }
func (m *C_AppointSend) String() string            { return proto.CompactTextString(m) }
func (*C_AppointSend) ProtoMessage()               {}
func (*C_AppointSend) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{9} }

type GS_AppointSend_R struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int32   `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Ts        int64   `protobuf:"varint,3,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Heroes    []int64 `protobuf:"varint,4,rep,packed,name=Heroes" json:"Heroes,omitempty"`
}

func (m *GS_AppointSend_R) Reset()                    { *m = GS_AppointSend_R{} }
func (m *GS_AppointSend_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointSend_R) ProtoMessage()               {}
func (*GS_AppointSend_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{10} }

// 加速
type C_AppointAcc struct {
	Seq int32 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_AppointAcc) Reset()                    { *m = C_AppointAcc{} }
func (m *C_AppointAcc) String() string            { return proto.CompactTextString(m) }
func (*C_AppointAcc) ProtoMessage()               {}
func (*C_AppointAcc) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{11} }

type GS_AppointAcc_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int32 `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *GS_AppointAcc_R) Reset()                    { *m = GS_AppointAcc_R{} }
func (m *GS_AppointAcc_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointAcc_R) ProtoMessage()               {}
func (*GS_AppointAcc_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{12} }

// 领取
type C_AppointTake struct {
	Seq int32 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_AppointTake) Reset()                    { *m = C_AppointTake{} }
func (m *C_AppointTake) String() string            { return proto.CompactTextString(m) }
func (*C_AppointTake) ProtoMessage()               {}
func (*C_AppointTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{13} }

type GS_AppointTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int32    `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
	AddTs     int64    `protobuf:"varint,3,opt,name=AddTs,proto3" json:"AddTs,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_AppointTake_R) Reset()                    { *m = GS_AppointTake_R{} }
func (m *GS_AppointTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointTake_R) ProtoMessage()               {}
func (*GS_AppointTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{14} }

// 取消派遣
type C_AppointCancel struct {
	Seq int32 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_AppointCancel) Reset()                    { *m = C_AppointCancel{} }
func (m *C_AppointCancel) String() string            { return proto.CompactTextString(m) }
func (*C_AppointCancel) ProtoMessage()               {}
func (*C_AppointCancel) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{15} }

type GS_AppointCancel_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Seq       int32 `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *GS_AppointCancel_R) Reset()                    { *m = GS_AppointCancel_R{} }
func (m *GS_AppointCancel_R) String() string            { return proto.CompactTextString(m) }
func (*GS_AppointCancel_R) ProtoMessage()               {}
func (*GS_AppointCancel_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_30Appoint, []int{16} }

func init() {
	proto.RegisterType((*AppointData)(nil), "msg.AppointData")
	proto.RegisterType((*AppointTask)(nil), "msg.AppointTask")
	proto.RegisterType((*GS_AppointAddTask)(nil), "msg.GS_AppointAddTask")
	proto.RegisterType((*C_AppointCheckAdd)(nil), "msg.C_AppointCheckAdd")
	proto.RegisterType((*GS_AppointCheckAdd_R)(nil), "msg.GS_AppointCheckAdd_R")
	proto.RegisterType((*C_AppointRefresh)(nil), "msg.C_AppointRefresh")
	proto.RegisterType((*GS_AppointRefresh_R)(nil), "msg.GS_AppointRefresh_R")
	proto.RegisterType((*C_AppointLock)(nil), "msg.C_AppointLock")
	proto.RegisterType((*GS_AppointLock_R)(nil), "msg.GS_AppointLock_R")
	proto.RegisterType((*C_AppointSend)(nil), "msg.C_AppointSend")
	proto.RegisterType((*GS_AppointSend_R)(nil), "msg.GS_AppointSend_R")
	proto.RegisterType((*C_AppointAcc)(nil), "msg.C_AppointAcc")
	proto.RegisterType((*GS_AppointAcc_R)(nil), "msg.GS_AppointAcc_R")
	proto.RegisterType((*C_AppointTake)(nil), "msg.C_AppointTake")
	proto.RegisterType((*GS_AppointTake_R)(nil), "msg.GS_AppointTake_R")
	proto.RegisterType((*C_AppointCancel)(nil), "msg.C_AppointCancel")
	proto.RegisterType((*GS_AppointCancel_R)(nil), "msg.GS_AppointCancel_R")
}
func (m *AppointData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_30Appoint(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AddTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.AddTs))
	}
	return i, nil
}

func (m *AppointTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Id))
	}
	if len(m.Cond) > 0 {
		for k, _ := range m.Cond {
			dAtA[i] = 0x1a
			i++
			v := m.Cond[k]
			mapSize := 1 + sovCGs_30Appoint(uint64(k)) + 1 + sovCGs_30Appoint(uint64(v))
			i = encodeVarintCGs_30Appoint(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_30Appoint(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_30Appoint(dAtA, i, uint64(v))
		}
	}
	if m.IsLock {
		dAtA[i] = 0x20
		i++
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ts != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Ts))
	}
	if len(m.Heroes) > 0 {
		dAtA2 := make([]byte, len(m.Heroes)*10)
		var j1 int
		for _, num1 := range m.Heroes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GS_AppointAddTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointAddTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_30Appoint(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_AppointCheckAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointCheckAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_AppointCheckAdd_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointCheckAdd_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.AddTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.AddTs))
	}
	return i, nil
}

func (m *C_AppointRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointRefresh) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_AppointRefresh_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointRefresh_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_AppointLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointLock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if m.IsLock {
		dAtA[i] = 0x10
		i++
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_AppointLock_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointLock_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if m.IsLock {
		dAtA[i] = 0x18
		i++
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C_AppointSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if len(m.Heroes) > 0 {
		dAtA5 := make([]byte, len(m.Heroes)*10)
		var j4 int
		for _, num1 := range m.Heroes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *GS_AppointSend_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointSend_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Ts))
	}
	if len(m.Heroes) > 0 {
		dAtA7 := make([]byte, len(m.Heroes)*10)
		var j6 int
		for _, num1 := range m.Heroes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *C_AppointAcc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointAcc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_AppointAcc_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointAcc_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *C_AppointTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_AppointTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	if m.AddTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.AddTs))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Rewards.Size()))
		n8, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *C_AppointCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_AppointCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_AppointCancel_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AppointCancel_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_30Appoint(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func encodeVarintCGs_30Appoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppointData) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovCGs_30Appoint(uint64(l))
		}
	}
	if m.AddTs != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.AddTs))
	}
	return n
}

func (m *AppointTask) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Id))
	}
	if len(m.Cond) > 0 {
		for k, v := range m.Cond {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_30Appoint(uint64(k)) + 1 + sovCGs_30Appoint(uint64(v))
			n += mapEntrySize + 1 + sovCGs_30Appoint(uint64(mapEntrySize))
		}
	}
	if m.IsLock {
		n += 2
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Ts))
	}
	if len(m.Heroes) > 0 {
		l = 0
		for _, e := range m.Heroes {
			l += sovCGs_30Appoint(uint64(e))
		}
		n += 1 + sovCGs_30Appoint(uint64(l)) + l
	}
	return n
}

func (m *GS_AppointAddTask) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovCGs_30Appoint(uint64(l))
		}
	}
	return n
}

func (m *C_AppointCheckAdd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_AppointCheckAdd_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.AddTs != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.AddTs))
	}
	return n
}

func (m *C_AppointRefresh) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_AppointRefresh_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCGs_30Appoint(uint64(l))
	}
	return n
}

func (m *C_AppointLock) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if m.IsLock {
		n += 2
	}
	return n
}

func (m *GS_AppointLock_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if m.IsLock {
		n += 2
	}
	return n
}

func (m *C_AppointSend) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if len(m.Heroes) > 0 {
		l = 0
		for _, e := range m.Heroes {
			l += sovCGs_30Appoint(uint64(e))
		}
		n += 1 + sovCGs_30Appoint(uint64(l)) + l
	}
	return n
}

func (m *GS_AppointSend_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Ts))
	}
	if len(m.Heroes) > 0 {
		l = 0
		for _, e := range m.Heroes {
			l += sovCGs_30Appoint(uint64(e))
		}
		n += 1 + sovCGs_30Appoint(uint64(l)) + l
	}
	return n
}

func (m *C_AppointAcc) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	return n
}

func (m *GS_AppointAcc_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	return n
}

func (m *C_AppointTake) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	return n
}

func (m *GS_AppointTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	if m.AddTs != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.AddTs))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_30Appoint(uint64(l))
	}
	return n
}

func (m *C_AppointCancel) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	return n
}

func (m *GS_AppointCancel_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.ErrorCode))
	}
	if m.Seq != 0 {
		n += 1 + sovCGs_30Appoint(uint64(m.Seq))
	}
	return n
}

func sovCGs_30Appoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_30Appoint(x uint64) (n int) {
	return sovCGs_30Appoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppointData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &AppointTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTs", wireType)
			}
			m.AddTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cond == nil {
				m.Cond = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_30Appoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_30Appoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_30Appoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cond[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heroes = append(m.Heroes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_30Appoint
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_30Appoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heroes = append(m.Heroes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointAddTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointAddTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointAddTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &AppointTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointCheckAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointCheckAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointCheckAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointCheckAdd_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointCheckAdd_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointCheckAdd_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTs", wireType)
			}
			m.AddTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointRefresh_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointRefresh_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointRefresh_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppointData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointLock_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointLock_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointLock_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heroes = append(m.Heroes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_30Appoint
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_30Appoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heroes = append(m.Heroes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointSend_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointSend_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointSend_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heroes = append(m.Heroes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_30Appoint
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_30Appoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heroes = append(m.Heroes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointAcc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointAcc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointAcc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointAcc_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointAcc_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointAcc_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTs", wireType)
			}
			m.AddTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_AppointCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_AppointCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_AppointCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AppointCancel_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AppointCancel_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AppointCancel_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_30Appoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_30Appoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_30Appoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_30Appoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_30Appoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_30Appoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_30Appoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_30Appoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_30Appoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_30Appoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.30.appoint.proto", fileDescriptorCGs_30Appoint) }

var fileDescriptorCGs_30Appoint = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe7, 0xb8, 0x2d, 0xec, 0x75, 0xb0, 0xce, 0x2b, 0x28, 0xaa, 0x50, 0x15, 0x0c, 0x9a,
	0x7a, 0x8a, 0xaa, 0xed, 0xc0, 0xaf, 0x53, 0xe9, 0x26, 0x28, 0x70, 0x72, 0x7b, 0x81, 0x4b, 0x15,
	0x62, 0xd3, 0x41, 0xb6, 0xb8, 0xc4, 0x19, 0xa8, 0x37, 0xfe, 0x04, 0xfe, 0xac, 0x1d, 0x39, 0x72,
	0x84, 0xf2, 0x8f, 0x20, 0x3b, 0x6e, 0x92, 0x6d, 0x41, 0x63, 0xbb, 0xc5, 0xef, 0x3d, 0x7f, 0xdf,
	0xe7, 0xd9, 0x5f, 0x07, 0xee, 0x84, 0xd3, 0x99, 0xf2, 0xf7, 0xfa, 0x7e, 0x30, 0x9f, 0xcb, 0x8f,
	0x71, 0xea, 0xcf, 0x13, 0x99, 0x4a, 0x82, 0x8f, 0xd5, 0xac, 0x03, 0x33, 0x39, 0x93, 0x59, 0xa0,
	0x93, 0xd5, 0xf5, 0xfb, 0xbe, 0x4a, 0x93, 0x93, 0x30, 0x55, 0x59, 0x98, 0xbe, 0x86, 0xe6, 0x20,
	0xdb, 0xb8, 0x1f, 0xa4, 0x01, 0xd9, 0x81, 0xfa, 0x24, 0x50, 0x91, 0x72, 0x91, 0x87, 0x7b, 0xcd,
	0xdd, 0x96, 0x7f, 0xac, 0x66, 0xbe, 0x2d, 0xd0, 0x09, 0x96, 0xa5, 0x49, 0x1b, 0xea, 0x03, 0xce,
	0x27, 0xca, 0x75, 0x3c, 0xd4, 0xc3, 0x2c, 0x5b, 0xd0, 0x9f, 0x28, 0x57, 0xd3, 0x65, 0xa4, 0x05,
	0x78, 0x2c, 0x3e, 0xbb, 0xc8, 0x43, 0xbd, 0x3a, 0xd3, 0x9f, 0xe4, 0x36, 0x38, 0x23, 0x6e, 0x36,
	0xd5, 0x99, 0x33, 0xe2, 0xc4, 0x87, 0xda, 0x50, 0xc6, 0xdc, 0xc5, 0xa6, 0x5d, 0xe7, 0x7c, 0x3b,
	0x5f, 0x27, 0x0f, 0xe2, 0x34, 0x59, 0x30, 0x53, 0x47, 0xee, 0x42, 0x63, 0xa4, 0xde, 0xc8, 0x30,
	0x72, 0x6b, 0x1e, 0xea, 0xdd, 0x64, 0x76, 0xa5, 0x75, 0x27, 0xca, 0xad, 0x1b, 0x18, 0x67, 0xa2,
	0x74, 0xdd, 0x4b, 0x91, 0x48, 0xa1, 0xdc, 0x86, 0x87, 0x7b, 0x98, 0xd9, 0x55, 0xe7, 0x11, 0xac,
	0xe7, 0x92, 0x1a, 0x2f, 0x12, 0x8b, 0x15, 0x5e, 0x24, 0x16, 0x7a, 0xac, 0x2f, 0xc1, 0xd1, 0x89,
	0xb0, 0x84, 0xd9, 0xe2, 0xa9, 0xf3, 0x18, 0xd1, 0x67, 0xb0, 0xf5, 0x62, 0x3c, 0xb5, 0x68, 0x7a,
	0x5a, 0x3d, 0xdf, 0x7f, 0x9e, 0x16, 0xdd, 0x86, 0xad, 0xe1, 0x6a, 0xef, 0xf0, 0x50, 0x84, 0xd1,
	0x80, 0x73, 0xfa, 0x0a, 0xda, 0x85, 0xe2, 0x2a, 0x3a, 0x65, 0xe4, 0x1e, 0xac, 0x1f, 0x24, 0x89,
	0x4c, 0x86, 0x92, 0x0b, 0xcb, 0x56, 0x04, 0xfe, 0x71, 0xf0, 0x04, 0x5a, 0x79, 0x03, 0x26, 0x3e,
	0x24, 0x42, 0x1d, 0xd2, 0xb7, 0xb0, 0x5d, 0xe8, 0xdb, 0xe0, 0xa5, 0xf2, 0x0f, 0xa1, 0xa6, 0x7d,
	0x60, 0xd4, 0xcf, 0x0d, 0xa4, 0xe3, 0xcc, 0x64, 0xe9, 0x13, 0xb8, 0x95, 0xb7, 0x33, 0xc7, 0x7f,
	0xf1, 0xa2, 0x8b, 0x8b, 0x72, 0xca, 0x17, 0x45, 0xdf, 0x41, 0xab, 0xa0, 0xd2, 0x91, 0x4b, 0x91,
	0xac, 0xb6, 0x53, 0xa5, 0x8d, 0xcf, 0x68, 0x97, 0xb1, 0xc6, 0x22, 0xe6, 0xd5, 0x58, 0xd6, 0x17,
	0x4e, 0xd9, 0x17, 0xf4, 0x53, 0x19, 0x4b, 0xef, 0xbd, 0x06, 0x56, 0xe6, 0x41, 0x5c, 0xe1, 0xc1,
	0xda, 0x99, 0x5e, 0x1e, 0x6c, 0xe4, 0x98, 0x83, 0x30, 0xbc, 0x48, 0x49, 0x07, 0xb0, 0x59, 0x32,
	0x5b, 0x18, 0x5e, 0x1d, 0x86, 0xde, 0x2f, 0x9d, 0xc5, 0x24, 0x88, 0x44, 0x45, 0x97, 0x6f, 0xa8,
	0x3c, 0xb4, 0x2e, 0xba, 0xc6, 0xd0, 0xb9, 0x1f, 0x71, 0xc9, 0x8f, 0x64, 0x07, 0x6e, 0x30, 0xf1,
	0x35, 0x48, 0xb8, 0x32, 0xef, 0xb4, 0xb9, 0xbb, 0x61, 0x9c, 0x64, 0x63, 0x6c, 0x95, 0xa4, 0x0f,
	0x60, 0xb3, 0x78, 0x18, 0x41, 0x1c, 0x8a, 0xa3, 0x0a, 0xce, 0x7d, 0x20, 0xa5, 0x87, 0x62, 0xaa,
	0xae, 0x0e, 0xfa, 0xbc, 0x7d, 0xfa, 0xbb, 0xbb, 0x76, 0xba, 0xec, 0xa2, 0x1f, 0xcb, 0x2e, 0xfa,
	0xb5, 0xec, 0xa2, 0xef, 0x7f, 0xba, 0x6b, 0xef, 0x1b, 0xe6, 0x2f, 0xb8, 0xf7, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x1c, 0x0f, 0x09, 0x16, 0x46, 0x05, 0x00, 0x00,
}
