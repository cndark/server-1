// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.33.arena.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 竞技场数据
type ArenaData struct {
	Score int32  `protobuf:"varint,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Stage string `protobuf:"bytes,2,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts1   int64  `protobuf:"varint,3,opt,name=Ts1,proto3" json:"Ts1,omitempty"`
	Ts2   int64  `protobuf:"varint,4,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *ArenaData) Reset()                    { *m = ArenaData{} }
func (m *ArenaData) String() string            { return proto.CompactTextString(m) }
func (*ArenaData) ProtoMessage()               {}
func (*ArenaData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{0} }

// 对手信息
type ArenaEnemy struct {
	Score int32             `protobuf:"varint,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Plr   *PlayerSimpleInfo `protobuf:"bytes,2,opt,name=Plr" json:"Plr,omitempty"`
}

func (m *ArenaEnemy) Reset()                    { *m = ArenaEnemy{} }
func (m *ArenaEnemy) String() string            { return proto.CompactTextString(m) }
func (*ArenaEnemy) ProtoMessage()               {}
func (*ArenaEnemy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{1} }

// 对战记录
type ArenaRecord struct {
	ReplayId   string            `protobuf:"bytes,1,opt,name=ReplayId,proto3" json:"ReplayId,omitempty"`
	Revenge    int32             `protobuf:"varint,2,opt,name=Revenge,proto3" json:"Revenge,omitempty"`
	SelfScore  int32             `protobuf:"varint,3,opt,name=SelfScore,proto3" json:"SelfScore,omitempty"`
	EnemyScore int32             `protobuf:"varint,4,opt,name=EnemyScore,proto3" json:"EnemyScore,omitempty"`
	AddScore   int32             `protobuf:"varint,5,opt,name=AddScore,proto3" json:"AddScore,omitempty"`
	Ts         int64             `protobuf:"varint,6,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Enemy      *PlayerSimpleInfo `protobuf:"bytes,7,opt,name=Enemy" json:"Enemy,omitempty"`
}

func (m *ArenaRecord) Reset()                    { *m = ArenaRecord{} }
func (m *ArenaRecord) String() string            { return proto.CompactTextString(m) }
func (*ArenaRecord) ProtoMessage()               {}
func (*ArenaRecord) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{2} }

// 推送: 版本推送
type GS_ArenaStageUpdate struct {
	Stage string `protobuf:"bytes,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts1   int64  `protobuf:"varint,2,opt,name=Ts1,proto3" json:"Ts1,omitempty"`
	Ts2   int64  `protobuf:"varint,3,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *GS_ArenaStageUpdate) Reset()                    { *m = GS_ArenaStageUpdate{} }
func (m *GS_ArenaStageUpdate) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaStageUpdate) ProtoMessage()               {}
func (*GS_ArenaStageUpdate) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{3} }

// 被打通知
type GS_ArenaFighted struct {
	AddScore int32 `protobuf:"varint,1,opt,name=AddScore,proto3" json:"AddScore,omitempty"`
}

func (m *GS_ArenaFighted) Reset()                    { *m = GS_ArenaFighted{} }
func (m *GS_ArenaFighted) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaFighted) ProtoMessage()               {}
func (*GS_ArenaFighted) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{4} }

// 刷新对手
type C_ArenaUpdateEnemy struct {
}

func (m *C_ArenaUpdateEnemy) Reset()                    { *m = C_ArenaUpdateEnemy{} }
func (m *C_ArenaUpdateEnemy) String() string            { return proto.CompactTextString(m) }
func (*C_ArenaUpdateEnemy) ProtoMessage()               {}
func (*C_ArenaUpdateEnemy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{5} }

type GS_ArenaUpdateEnemy_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Enemies   []*ArenaEnemy `protobuf:"bytes,2,rep,name=Enemies" json:"Enemies,omitempty"`
}

func (m *GS_ArenaUpdateEnemy_R) Reset()                    { *m = GS_ArenaUpdateEnemy_R{} }
func (m *GS_ArenaUpdateEnemy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaUpdateEnemy_R) ProtoMessage()               {}
func (*GS_ArenaUpdateEnemy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{6} }

// 打架
type C_ArenaFight struct {
	PlrId      string         `protobuf:"bytes,1,opt,name=PlrId,proto3" json:"PlrId,omitempty"`
	IsOneKey   bool           `protobuf:"varint,2,opt,name=IsOneKey,proto3" json:"IsOneKey,omitempty"`
	RevengeIdx int32          `protobuf:"varint,3,opt,name=RevengeIdx,proto3" json:"RevengeIdx,omitempty"`
	T          *TeamFormation `protobuf:"bytes,4,opt,name=T" json:"T,omitempty"`
}

func (m *C_ArenaFight) Reset()                    { *m = C_ArenaFight{} }
func (m *C_ArenaFight) String() string            { return proto.CompactTextString(m) }
func (*C_ArenaFight) ProtoMessage()               {}
func (*C_ArenaFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{7} }

type GS_ArenaFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	IsOneKey  bool          `protobuf:"varint,2,opt,name=IsOneKey,proto3" json:"IsOneKey,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,3,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
	AddScore1 int32         `protobuf:"varint,5,opt,name=AddScore1,proto3" json:"AddScore1,omitempty"`
	AddScore2 int32         `protobuf:"varint,6,opt,name=AddScore2,proto3" json:"AddScore2,omitempty"`
}

func (m *GS_ArenaFight_R) Reset()                    { *m = GS_ArenaFight_R{} }
func (m *GS_ArenaFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaFight_R) ProtoMessage()               {}
func (*GS_ArenaFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{8} }

// 获取战报
type C_ArenaRecordInfo struct {
}

func (m *C_ArenaRecordInfo) Reset()                    { *m = C_ArenaRecordInfo{} }
func (m *C_ArenaRecordInfo) String() string            { return proto.CompactTextString(m) }
func (*C_ArenaRecordInfo) ProtoMessage()               {}
func (*C_ArenaRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{9} }

type GS_ArenaRecordInfo_R struct {
	Records []*ArenaRecord `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_ArenaRecordInfo_R) Reset()                    { *m = GS_ArenaRecordInfo_R{} }
func (m *GS_ArenaRecordInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaRecordInfo_R) ProtoMessage()               {}
func (*GS_ArenaRecordInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{10} }

// 获取排名
type C_ArenaRank struct {
	Top int32 `protobuf:"varint,1,opt,name=Top,proto3" json:"Top,omitempty"`
}

func (m *C_ArenaRank) Reset()                    { *m = C_ArenaRank{} }
func (m *C_ArenaRank) String() string            { return proto.CompactTextString(m) }
func (*C_ArenaRank) ProtoMessage()               {}
func (*C_ArenaRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{11} }

type GS_ArenaRank_R struct {
	SelfRank int32      `protobuf:"varint,1,opt,name=SelfRank,proto3" json:"SelfRank,omitempty"`
	Rows     []*RankRow `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_ArenaRank_R) Reset()                    { *m = GS_ArenaRank_R{} }
func (m *GS_ArenaRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaRank_R) ProtoMessage()               {}
func (*GS_ArenaRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{12} }

// 获取战报
type C_ArenaReplayGet struct {
	ReplayId string `protobuf:"bytes,1,opt,name=ReplayId,proto3" json:"ReplayId,omitempty"`
}

func (m *C_ArenaReplayGet) Reset()                    { *m = C_ArenaReplayGet{} }
func (m *C_ArenaReplayGet) String() string            { return proto.CompactTextString(m) }
func (*C_ArenaReplayGet) ProtoMessage()               {}
func (*C_ArenaReplayGet) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{13} }

type GS_ArenaReplayGet_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
}

func (m *GS_ArenaReplayGet_R) Reset()                    { *m = GS_ArenaReplayGet_R{} }
func (m *GS_ArenaReplayGet_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArenaReplayGet_R) ProtoMessage()               {}
func (*GS_ArenaReplayGet_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_33Arena, []int{14} }

func init() {
	proto.RegisterType((*ArenaData)(nil), "msg.ArenaData")
	proto.RegisterType((*ArenaEnemy)(nil), "msg.ArenaEnemy")
	proto.RegisterType((*ArenaRecord)(nil), "msg.ArenaRecord")
	proto.RegisterType((*GS_ArenaStageUpdate)(nil), "msg.GS_ArenaStageUpdate")
	proto.RegisterType((*GS_ArenaFighted)(nil), "msg.GS_ArenaFighted")
	proto.RegisterType((*C_ArenaUpdateEnemy)(nil), "msg.C_ArenaUpdateEnemy")
	proto.RegisterType((*GS_ArenaUpdateEnemy_R)(nil), "msg.GS_ArenaUpdateEnemy_R")
	proto.RegisterType((*C_ArenaFight)(nil), "msg.C_ArenaFight")
	proto.RegisterType((*GS_ArenaFight_R)(nil), "msg.GS_ArenaFight_R")
	proto.RegisterType((*C_ArenaRecordInfo)(nil), "msg.C_ArenaRecordInfo")
	proto.RegisterType((*GS_ArenaRecordInfo_R)(nil), "msg.GS_ArenaRecordInfo_R")
	proto.RegisterType((*C_ArenaRank)(nil), "msg.C_ArenaRank")
	proto.RegisterType((*GS_ArenaRank_R)(nil), "msg.GS_ArenaRank_R")
	proto.RegisterType((*C_ArenaReplayGet)(nil), "msg.C_ArenaReplayGet")
	proto.RegisterType((*GS_ArenaReplayGet_R)(nil), "msg.GS_ArenaReplayGet_R")
}
func (m *ArenaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Score))
	}
	if len(m.Stage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if m.Ts1 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *ArenaEnemy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaEnemy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Score))
	}
	if m.Plr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Plr.Size()))
		n1, err := m.Plr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ArenaRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplayId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(len(m.ReplayId)))
		i += copy(dAtA[i:], m.ReplayId)
	}
	if m.Revenge != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Revenge))
	}
	if m.SelfScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.SelfScore))
	}
	if m.EnemyScore != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.EnemyScore))
	}
	if m.AddScore != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.AddScore))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Ts))
	}
	if m.Enemy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Enemy.Size()))
		n2, err := m.Enemy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GS_ArenaStageUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaStageUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if m.Ts1 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *GS_ArenaFighted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaFighted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddScore != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.AddScore))
	}
	return i, nil
}

func (m *C_ArenaUpdateEnemy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArenaUpdateEnemy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_ArenaUpdateEnemy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaUpdateEnemy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Enemies) > 0 {
		for _, msg := range m.Enemies {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_33Arena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_ArenaFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArenaFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlrId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(len(m.PlrId)))
		i += copy(dAtA[i:], m.PlrId)
	}
	if m.IsOneKey {
		dAtA[i] = 0x10
		i++
		if m.IsOneKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RevengeIdx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.RevengeIdx))
	}
	if m.T != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.T.Size()))
		n3, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GS_ArenaFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.ErrorCode))
	}
	if m.IsOneKey {
		dAtA[i] = 0x10
		i++
		if m.IsOneKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Replay != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Replay.Size()))
		n4, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AddScore1 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.AddScore1))
	}
	if m.AddScore2 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.AddScore2))
	}
	return i, nil
}

func (m *C_ArenaRecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArenaRecordInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_ArenaRecordInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaRecordInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_33Arena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_ArenaRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArenaRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Top != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Top))
	}
	return i, nil
}

func (m *GS_ArenaRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfRank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.SelfRank))
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_33Arena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_ArenaReplayGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArenaReplayGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplayId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(len(m.ReplayId)))
		i += copy(dAtA[i:], m.ReplayId)
	}
	return i, nil
}

func (m *GS_ArenaReplayGet_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArenaReplayGet_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_33Arena(dAtA, i, uint64(m.Replay.Size()))
		n6, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintCGs_33Arena(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ArenaData) Size() (n int) {
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Score))
	}
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.Ts1 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Ts2))
	}
	return n
}

func (m *ArenaEnemy) Size() (n int) {
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Score))
	}
	if m.Plr != nil {
		l = m.Plr.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	return n
}

func (m *ArenaRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReplayId)
	if l > 0 {
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.Revenge != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Revenge))
	}
	if m.SelfScore != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.SelfScore))
	}
	if m.EnemyScore != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.EnemyScore))
	}
	if m.AddScore != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.AddScore))
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Ts))
	}
	if m.Enemy != nil {
		l = m.Enemy.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	return n
}

func (m *GS_ArenaStageUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.Ts1 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Ts1))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Ts2))
	}
	return n
}

func (m *GS_ArenaFighted) Size() (n int) {
	var l int
	_ = l
	if m.AddScore != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.AddScore))
	}
	return n
}

func (m *C_ArenaUpdateEnemy) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_ArenaUpdateEnemy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.ErrorCode))
	}
	if len(m.Enemies) > 0 {
		for _, e := range m.Enemies {
			l = e.Size()
			n += 1 + l + sovCGs_33Arena(uint64(l))
		}
	}
	return n
}

func (m *C_ArenaFight) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlrId)
	if l > 0 {
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.IsOneKey {
		n += 2
	}
	if m.RevengeIdx != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.RevengeIdx))
	}
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	return n
}

func (m *GS_ArenaFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.ErrorCode))
	}
	if m.IsOneKey {
		n += 2
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	if m.AddScore1 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.AddScore1))
	}
	if m.AddScore2 != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.AddScore2))
	}
	return n
}

func (m *C_ArenaRecordInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_ArenaRecordInfo_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_33Arena(uint64(l))
		}
	}
	return n
}

func (m *C_ArenaRank) Size() (n int) {
	var l int
	_ = l
	if m.Top != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.Top))
	}
	return n
}

func (m *GS_ArenaRank_R) Size() (n int) {
	var l int
	_ = l
	if m.SelfRank != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.SelfRank))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_33Arena(uint64(l))
		}
	}
	return n
}

func (m *C_ArenaReplayGet) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReplayId)
	if l > 0 {
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	return n
}

func (m *GS_ArenaReplayGet_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_33Arena(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_33Arena(uint64(l))
	}
	return n
}

func sovCGs_33Arena(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_33Arena(x uint64) (n int) {
	return sovCGs_33Arena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArenaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts1", wireType)
			}
			m.Ts1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaEnemy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaEnemy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaEnemy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plr == nil {
				m.Plr = &PlayerSimpleInfo{}
			}
			if err := m.Plr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenge", wireType)
			}
			m.Revenge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revenge |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfScore", wireType)
			}
			m.SelfScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyScore", wireType)
			}
			m.EnemyScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore", wireType)
			}
			m.AddScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enemy == nil {
				m.Enemy = &PlayerSimpleInfo{}
			}
			if err := m.Enemy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaStageUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaStageUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaStageUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts1", wireType)
			}
			m.Ts1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaFighted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaFighted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaFighted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore", wireType)
			}
			m.AddScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArenaUpdateEnemy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArenaUpdateEnemy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArenaUpdateEnemy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaUpdateEnemy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaUpdateEnemy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaUpdateEnemy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enemies = append(m.Enemies, &ArenaEnemy{})
			if err := m.Enemies[len(m.Enemies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArenaFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArenaFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArenaFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOneKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOneKey = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevengeIdx", wireType)
			}
			m.RevengeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevengeIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOneKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOneKey = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore1", wireType)
			}
			m.AddScore1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddScore1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore2", wireType)
			}
			m.AddScore2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddScore2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArenaRecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArenaRecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArenaRecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaRecordInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaRecordInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaRecordInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &ArenaRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArenaRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArenaRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArenaRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			m.Top = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRank", wireType)
			}
			m.SelfRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &RankRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArenaReplayGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArenaReplayGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArenaReplayGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArenaReplayGet_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArenaReplayGet_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArenaReplayGet_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_33Arena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_33Arena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_33Arena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_33Arena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_33Arena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_33Arena
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_33Arena
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_33Arena(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_33Arena = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_33Arena   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.33.arena.proto", fileDescriptorCGs_33Arena) }

var fileDescriptorCGs_33Arena = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0x66, 0x63, 0x02, 0x64, 0x82, 0xf8, 0xb3, 0x04, 0xc9, 0x42, 0x3f, 0xe5, 0x17, 0xf9, 0xd0,
	0x86, 0x56, 0xb5, 0xc0, 0xf4, 0x05, 0x80, 0x02, 0x8a, 0x90, 0x0a, 0xda, 0xa4, 0xa7, 0x4a, 0x4d,
	0xb7, 0xf1, 0xe2, 0x46, 0x71, 0xbc, 0xd1, 0xda, 0x2d, 0xcd, 0xb5, 0x4f, 0xd0, 0xc7, 0xe2, 0xd8,
	0x73, 0x4f, 0x2d, 0x7d, 0x91, 0x6a, 0x67, 0xbd, 0xb6, 0x51, 0x5b, 0xe8, 0xcd, 0xf3, 0x7d, 0xe3,
	0xd9, 0x6f, 0xbe, 0x99, 0x5d, 0xd8, 0x1a, 0x0d, 0xa3, 0xd4, 0x3f, 0x38, 0xf0, 0xb9, 0x12, 0x09,
	0xf7, 0x67, 0x4a, 0x66, 0x92, 0x3a, 0xd3, 0x34, 0xda, 0x81, 0x48, 0x46, 0xd2, 0x00, 0x3b, 0xdb,
	0x98, 0xb5, 0xb7, 0xe7, 0xa7, 0x99, 0xfa, 0x30, 0xca, 0xd2, 0x1c, 0xa6, 0x08, 0x07, 0xcf, 0x7d,
	0xc5, 0x93, 0x89, 0xc1, 0xbc, 0xd7, 0xd0, 0x38, 0xd4, 0xa5, 0x5e, 0xf0, 0x8c, 0xd3, 0x16, 0xd4,
	0xfb, 0x23, 0xa9, 0x84, 0x4b, 0x3a, 0xa4, 0x5b, 0x67, 0x26, 0x40, 0x34, 0xe3, 0x91, 0x70, 0x6b,
	0x1d, 0xd2, 0x6d, 0x30, 0x13, 0xd0, 0x0d, 0x70, 0x06, 0xe9, 0xbe, 0xeb, 0x74, 0x48, 0xd7, 0x61,
	0xfa, 0xd3, 0x20, 0x81, 0xbb, 0x68, 0x91, 0xc0, 0x3b, 0x07, 0xc0, 0xe2, 0x27, 0x89, 0x98, 0xce,
	0xff, 0x52, 0xfd, 0x31, 0x38, 0x97, 0xb1, 0xc2, 0xda, 0xcd, 0x60, 0xdb, 0x9f, 0xa6, 0x91, 0x7f,
	0x19, 0xf3, 0xb9, 0x50, 0xfd, 0xf1, 0x74, 0x16, 0x8b, 0x5e, 0x72, 0x25, 0x99, 0xce, 0xf0, 0xbe,
	0x11, 0x68, 0x62, 0x35, 0x26, 0x46, 0x52, 0x85, 0x74, 0x07, 0x56, 0x98, 0x98, 0xc5, 0x7c, 0xde,
	0x0b, 0xb1, 0x62, 0x83, 0x15, 0x31, 0x75, 0x61, 0x99, 0x89, 0x8f, 0x22, 0xc9, 0x45, 0xd7, 0x99,
	0x0d, 0xe9, 0x7f, 0xd0, 0xe8, 0x8b, 0xf8, 0xca, 0x08, 0x71, 0x90, 0x2b, 0x01, 0xda, 0x06, 0x40,
	0xad, 0x86, 0x5e, 0x44, 0xba, 0x82, 0xe8, 0x33, 0x0f, 0xc3, 0xd0, 0xb0, 0x75, 0x64, 0x8b, 0x98,
	0xae, 0x41, 0x6d, 0x90, 0xba, 0x4b, 0xd8, 0x7d, 0x6d, 0x90, 0xd2, 0xa7, 0x50, 0xc7, 0x3f, 0xdd,
	0xe5, 0xfb, 0x5a, 0x33, 0x39, 0xde, 0x05, 0x6c, 0x9d, 0xf5, 0x87, 0xd8, 0x1e, 0xda, 0xfb, 0x6a,
	0x16, 0xf2, 0xac, 0x62, 0x3d, 0xf9, 0x83, 0xf5, 0xb5, 0xdf, 0xac, 0x77, 0x4a, 0xeb, 0x9f, 0xc1,
	0xba, 0x2d, 0x78, 0x3a, 0x8e, 0xde, 0x67, 0x22, 0xbc, 0x23, 0x9e, 0xdc, 0x15, 0xef, 0xb5, 0x80,
	0x1e, 0x9b, 0x6c, 0x73, 0xb2, 0x51, 0xf5, 0x16, 0xb6, 0x6d, 0x91, 0x0a, 0x3c, 0x64, 0xda, 0xc5,
	0x13, 0xa5, 0xa4, 0x3a, 0x96, 0xa1, 0xad, 0x55, 0x02, 0x74, 0x17, 0x96, 0x75, 0xe2, 0x58, 0xa4,
	0x6e, 0xad, 0xe3, 0x74, 0x9b, 0xc1, 0x3a, 0xf6, 0x5e, 0xae, 0x02, 0xb3, 0xbc, 0xf7, 0x99, 0xc0,
	0xea, 0x71, 0x45, 0xa6, 0xee, 0xf8, 0x32, 0x56, 0xc5, 0x48, 0x4d, 0xa0, 0xa5, 0xf7, 0xd2, 0x8b,
	0x44, 0x9c, 0x8b, 0x39, 0xb6, 0xbd, 0xc2, 0x8a, 0x58, 0xcf, 0x2c, 0x1f, 0x6e, 0x2f, 0xfc, 0x94,
	0x8f, 0xb4, 0x82, 0xd0, 0x0e, 0x90, 0x01, 0x8e, 0xb2, 0x19, 0x50, 0xd4, 0x31, 0x10, 0x7c, 0x7a,
	0x2a, 0xd5, 0x94, 0x67, 0x63, 0x99, 0x30, 0x32, 0xd0, 0x9b, 0x75, 0xd7, 0xac, 0x07, 0x3b, 0xbc,
	0x4f, 0xcf, 0x2e, 0x2c, 0x99, 0x3d, 0x44, 0x2d, 0xcd, 0x60, 0x13, 0x0f, 0x3d, 0xe2, 0x59, 0x16,
	0x0b, 0x43, 0xb0, 0x3c, 0x81, 0x3e, 0xd2, 0x6b, 0x7a, 0xcd, 0x55, 0x98, 0xe6, 0x02, 0x57, 0x31,
	0x37, 0xc7, 0x98, 0x25, 0xb5, 0x18, 0x3b, 0xa9, 0xfd, 0x7c, 0xef, 0x4a, 0xa0, 0xca, 0x06, 0xb8,
	0x7f, 0x15, 0x36, 0xf0, 0xb6, 0x60, 0x33, 0x37, 0xd8, 0xdc, 0x1b, 0xbd, 0x75, 0xde, 0x11, 0xb4,
	0x6c, 0xc3, 0x25, 0x3a, 0x64, 0xf4, 0x89, 0x16, 0xa4, 0xe3, 0xd4, 0x25, 0x38, 0xb9, 0x8d, 0x72,
	0x72, 0x86, 0x60, 0x36, 0xc1, 0xfb, 0x1f, 0x9a, 0xb6, 0x30, 0x4f, 0x26, 0xb8, 0x82, 0x72, 0x96,
	0x5b, 0xa5, 0x3f, 0xbd, 0x97, 0xb0, 0x56, 0x1c, 0xc2, 0x93, 0xc9, 0x90, 0x69, 0xdb, 0xf4, 0x5d,
	0xd3, 0x91, 0xdd, 0x40, 0x1b, 0xd3, 0x0e, 0x2c, 0x32, 0x79, 0x6d, 0x37, 0x26, 0x37, 0x82, 0x27,
	0x13, 0x26, 0xaf, 0x19, 0x32, 0x9e, 0x0f, 0x1b, 0x45, 0x27, 0xda, 0xbe, 0x33, 0x91, 0xdd, 0xf7,
	0x08, 0x78, 0x6f, 0xca, 0x3b, 0x55, 0xfc, 0xf0, 0x0f, 0xbb, 0x6b, 0xa7, 0x57, 0x7b, 0x60, 0x7a,
	0x47, 0xad, 0x9b, 0x1f, 0xed, 0x85, 0x9b, 0xdb, 0x36, 0xf9, 0x7a, 0xdb, 0x26, 0xdf, 0x6f, 0xdb,
	0xe4, 0xcb, 0xcf, 0xf6, 0xc2, 0xbb, 0x25, 0x7c, 0x57, 0x0f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x1a, 0x4e, 0x6e, 0xaa, 0x05, 0x00, 0x00,
}
