// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.29.wlevel.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ============================================================================
// 关卡
type WLevelData struct {
	LvNum     int32           `protobuf:"varint,1,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	GJTs      int64           `protobuf:"varint,2,opt,name=GJTs,proto3" json:"GJTs,omitempty"`
	GJLootRwd map[int32]int64 `protobuf:"bytes,3,rep,name=GJLootRwd" json:"GJLootRwd,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *WLevelData) Reset()                    { *m = WLevelData{} }
func (m *WLevelData) String() string            { return proto.CompactTextString(m) }
func (*WLevelData) ProtoMessage()               {}
func (*WLevelData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{0} }

// ============================================================================
// 推图战斗
type C_WLevelFight struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_WLevelFight) Reset()                    { *m = C_WLevelFight{} }
func (m *C_WLevelFight) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelFight) ProtoMessage()               {}
func (*C_WLevelFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{1} }

type GS_WLevelFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	LvNum     int32         `protobuf:"varint,3,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WLevelFight_R) Reset()                    { *m = GS_WLevelFight_R{} }
func (m *GS_WLevelFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WLevelFight_R) ProtoMessage()               {}
func (*GS_WLevelFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{2} }

// 获取挂机信息(计算挂机奖励)
type C_WLevelGJInfo struct {
}

func (m *C_WLevelGJInfo) Reset()                    { *m = C_WLevelGJInfo{} }
func (m *C_WLevelGJInfo) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelGJInfo) ProtoMessage()               {}
func (*C_WLevelGJInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{3} }

type GS_WLevelGJInfo_R struct {
	GJLootRwd map[int32]int64 `protobuf:"bytes,1,rep,name=GJLootRwd" json:"GJLootRwd,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GS_WLevelGJInfo_R) Reset()                    { *m = GS_WLevelGJInfo_R{} }
func (m *GS_WLevelGJInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WLevelGJInfo_R) ProtoMessage()               {}
func (*GS_WLevelGJInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{4} }

// 领取挂机奖励
type C_WLevelGJTake struct {
}

func (m *C_WLevelGJTake) Reset()                    { *m = C_WLevelGJTake{} }
func (m *C_WLevelGJTake) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelGJTake) ProtoMessage()               {}
func (*C_WLevelGJTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{5} }

type GS_WLevelGJTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	GJTs      int64    `protobuf:"varint,2,opt,name=GJTs,proto3" json:"GJTs,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WLevelGJTake_R) Reset()                    { *m = GS_WLevelGJTake_R{} }
func (m *GS_WLevelGJTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WLevelGJTake_R) ProtoMessage()               {}
func (*GS_WLevelGJTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{6} }

// 快速领取挂机奖励
type C_WLevelOneKeyGJTake struct {
}

func (m *C_WLevelOneKeyGJTake) Reset()                    { *m = C_WLevelOneKeyGJTake{} }
func (m *C_WLevelOneKeyGJTake) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelOneKeyGJTake) ProtoMessage()               {}
func (*C_WLevelOneKeyGJTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{7} }

type GS_WLevelOneKeyGJTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WLevelOneKeyGJTake_R) Reset()         { *m = GS_WLevelOneKeyGJTake_R{} }
func (m *GS_WLevelOneKeyGJTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_WLevelOneKeyGJTake_R) ProtoMessage()    {}
func (*GS_WLevelOneKeyGJTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_29Wlevel, []int{8}
}

// 快速战斗
type C_WLevelFightOneKey struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_WLevelFightOneKey) Reset()                    { *m = C_WLevelFightOneKey{} }
func (m *C_WLevelFightOneKey) String() string            { return proto.CompactTextString(m) }
func (*C_WLevelFightOneKey) ProtoMessage()               {}
func (*C_WLevelFightOneKey) Descriptor() ([]byte, []int) { return fileDescriptorCGs_29Wlevel, []int{9} }

type GS_WLevelFightOneKey_R struct {
	ErrorCode int32           `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    []*BattleReplay `protobuf:"bytes,2,rep,name=Replay" json:"Replay,omitempty"`
	LvNum     int32           `protobuf:"varint,3,opt,name=LvNum,proto3" json:"LvNum,omitempty"`
	Rewards   *Rewards        `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WLevelFightOneKey_R) Reset()         { *m = GS_WLevelFightOneKey_R{} }
func (m *GS_WLevelFightOneKey_R) String() string { return proto.CompactTextString(m) }
func (*GS_WLevelFightOneKey_R) ProtoMessage()    {}
func (*GS_WLevelFightOneKey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_29Wlevel, []int{10}
}

func init() {
	proto.RegisterType((*WLevelData)(nil), "msg.WLevelData")
	proto.RegisterType((*C_WLevelFight)(nil), "msg.C_WLevelFight")
	proto.RegisterType((*GS_WLevelFight_R)(nil), "msg.GS_WLevelFight_R")
	proto.RegisterType((*C_WLevelGJInfo)(nil), "msg.C_WLevelGJInfo")
	proto.RegisterType((*GS_WLevelGJInfo_R)(nil), "msg.GS_WLevelGJInfo_R")
	proto.RegisterType((*C_WLevelGJTake)(nil), "msg.C_WLevelGJTake")
	proto.RegisterType((*GS_WLevelGJTake_R)(nil), "msg.GS_WLevelGJTake_R")
	proto.RegisterType((*C_WLevelOneKeyGJTake)(nil), "msg.C_WLevelOneKeyGJTake")
	proto.RegisterType((*GS_WLevelOneKeyGJTake_R)(nil), "msg.GS_WLevelOneKeyGJTake_R")
	proto.RegisterType((*C_WLevelFightOneKey)(nil), "msg.C_WLevelFightOneKey")
	proto.RegisterType((*GS_WLevelFightOneKey_R)(nil), "msg.GS_WLevelFightOneKey_R")
}
func (m *WLevelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLevelData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LvNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.LvNum))
	}
	if m.GJTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.GJTs))
	}
	if len(m.GJLootRwd) > 0 {
		for k, _ := range m.GJLootRwd {
			dAtA[i] = 0x1a
			i++
			v := m.GJLootRwd[k]
			mapSize := 1 + sovCGs_29Wlevel(uint64(k)) + 1 + sovCGs_29Wlevel(uint64(v))
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *C_WLevelFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.T.Size()))
		n1, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GS_WLevelFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.Replay.Size()))
		n2, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LvNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.LvNum))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_WLevelGJInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelGJInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WLevelGJInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelGJInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GJLootRwd) > 0 {
		for k, _ := range m.GJLootRwd {
			dAtA[i] = 0xa
			i++
			v := m.GJLootRwd[k]
			mapSize := 1 + sovCGs_29Wlevel(uint64(k)) + 1 + sovCGs_29Wlevel(uint64(v))
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *C_WLevelGJTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelGJTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WLevelGJTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelGJTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.ErrorCode))
	}
	if m.GJTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.GJTs))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C_WLevelOneKeyGJTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelOneKeyGJTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WLevelOneKeyGJTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelOneKeyGJTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_WLevelFightOneKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WLevelFightOneKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.T.Size()))
		n6, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GS_WLevelFightOneKey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WLevelFightOneKey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Replay) > 0 {
		for _, msg := range m.Replay {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LvNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.LvNum))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_29Wlevel(dAtA, i, uint64(m.Rewards.Size()))
		n7, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintCGs_29Wlevel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WLevelData) Size() (n int) {
	var l int
	_ = l
	if m.LvNum != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.LvNum))
	}
	if m.GJTs != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.GJTs))
	}
	if len(m.GJLootRwd) > 0 {
		for k, v := range m.GJLootRwd {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_29Wlevel(uint64(k)) + 1 + sovCGs_29Wlevel(uint64(v))
			n += mapEntrySize + 1 + sovCGs_29Wlevel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_WLevelFight) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func (m *GS_WLevelFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	if m.LvNum != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.LvNum))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func (m *C_WLevelGJInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WLevelGJInfo_R) Size() (n int) {
	var l int
	_ = l
	if len(m.GJLootRwd) > 0 {
		for k, v := range m.GJLootRwd {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_29Wlevel(uint64(k)) + 1 + sovCGs_29Wlevel(uint64(v))
			n += mapEntrySize + 1 + sovCGs_29Wlevel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_WLevelGJTake) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WLevelGJTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.ErrorCode))
	}
	if m.GJTs != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.GJTs))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func (m *C_WLevelOneKeyGJTake) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WLevelOneKeyGJTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func (m *C_WLevelFightOneKey) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func (m *GS_WLevelFightOneKey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.ErrorCode))
	}
	if len(m.Replay) > 0 {
		for _, e := range m.Replay {
			l = e.Size()
			n += 1 + l + sovCGs_29Wlevel(uint64(l))
		}
	}
	if m.LvNum != 0 {
		n += 1 + sovCGs_29Wlevel(uint64(m.LvNum))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_29Wlevel(uint64(l))
	}
	return n
}

func sovCGs_29Wlevel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_29Wlevel(x uint64) (n int) {
	return sovCGs_29Wlevel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WLevelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLevelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLevelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJTs", wireType)
			}
			m.GJTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GJTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJLootRwd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GJLootRwd == nil {
				m.GJLootRwd = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_29Wlevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_29Wlevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_29Wlevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_29Wlevel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GJLootRwd[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelGJInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelGJInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelGJInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelGJInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelGJInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelGJInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJLootRwd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GJLootRwd == nil {
				m.GJLootRwd = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_29Wlevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_29Wlevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_29Wlevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_29Wlevel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GJLootRwd[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelGJTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelGJTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelGJTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelGJTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelGJTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelGJTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJTs", wireType)
			}
			m.GJTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GJTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelOneKeyGJTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelOneKeyGJTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelOneKeyGJTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelOneKeyGJTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelOneKeyGJTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelOneKeyGJTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WLevelFightOneKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WLevelFightOneKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WLevelFightOneKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WLevelFightOneKey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WLevelFightOneKey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WLevelFightOneKey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = append(m.Replay, &BattleReplay{})
			if err := m.Replay[len(m.Replay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvNum", wireType)
			}
			m.LvNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_29Wlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_29Wlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_29Wlevel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_29Wlevel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_29Wlevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_29Wlevel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_29Wlevel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_29Wlevel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_29Wlevel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_29Wlevel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.29.wlevel.proto", fileDescriptorCGs_29Wlevel) }

var fileDescriptorCGs_29Wlevel = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6e, 0xd3, 0x40,
	0x18, 0xed, 0x64, 0xda, 0xa2, 0x7e, 0x81, 0x2a, 0x1d, 0x42, 0x89, 0x22, 0x64, 0x59, 0x96, 0x40,
	0x61, 0x63, 0x15, 0xb3, 0xe0, 0x47, 0x5d, 0x35, 0xb4, 0x16, 0x21, 0x02, 0x69, 0xb0, 0xc4, 0xd2,
	0x1a, 0x9a, 0xc1, 0x54, 0xb5, 0x3d, 0xd5, 0x78, 0x92, 0xc8, 0xb7, 0x60, 0x85, 0xc4, 0x8a, 0x3b,
	0x70, 0x8a, 0x2e, 0x39, 0x02, 0x84, 0x8b, 0x20, 0xcf, 0x38, 0xb1, 0x2d, 0x50, 0x0b, 0x8b, 0xec,
	0xe6, 0x7b, 0xdf, 0xcf, 0x7b, 0x7e, 0x7a, 0x32, 0x74, 0x4f, 0xc3, 0x28, 0x73, 0xbd, 0x67, 0xee,
	0x3c, 0xe6, 0x33, 0x1e, 0xbb, 0x17, 0x52, 0x28, 0x41, 0x70, 0x92, 0x45, 0x7d, 0x88, 0x44, 0x24,
	0x0c, 0xd0, 0xbf, 0xa3, 0xc7, 0x0e, 0x0e, 0xdc, 0x4c, 0xc9, 0xe9, 0xa9, 0xca, 0x0c, 0xec, 0x7c,
	0x43, 0x00, 0xef, 0xc6, 0xc5, 0xe2, 0x0b, 0xa6, 0x18, 0xe9, 0xc2, 0xd6, 0x78, 0xf6, 0x7a, 0x9a,
	0xf4, 0x90, 0x8d, 0x06, 0x5b, 0xd4, 0x14, 0x84, 0xc0, 0xa6, 0x3f, 0x0a, 0xb2, 0x5e, 0xcb, 0x46,
	0x03, 0x4c, 0xf5, 0x9b, 0x1c, 0xc2, 0x8e, 0x3f, 0x1a, 0x0b, 0xa1, 0xe8, 0x7c, 0xd2, 0xc3, 0x36,
	0x1e, 0xb4, 0x3d, 0xcb, 0x4d, 0xb2, 0xc8, 0xad, 0xae, 0xb9, 0xab, 0x81, 0xe3, 0x54, 0xc9, 0x9c,
	0x56, 0x0b, 0xfd, 0x43, 0xd8, 0x6d, 0x36, 0x49, 0x07, 0xf0, 0x39, 0xcf, 0x4b, 0xde, 0xe2, 0x59,
	0x68, 0x99, 0xb1, 0x78, 0xca, 0x4b, 0x5a, 0x53, 0x3c, 0x6f, 0x3d, 0x45, 0xce, 0x23, 0xb8, 0x35,
	0x0c, 0x0d, 0xcf, 0xc9, 0x59, 0xf4, 0x51, 0x11, 0x1b, 0x50, 0xa0, 0x57, 0xdb, 0x1e, 0xd1, 0x22,
	0x02, 0xce, 0x92, 0x13, 0x21, 0x13, 0xa6, 0xce, 0x44, 0x4a, 0x51, 0xe0, 0x7c, 0x41, 0xd0, 0xf1,
	0xdf, 0xd6, 0x97, 0x42, 0x4a, 0xee, 0xc1, 0xce, 0xb1, 0x94, 0x42, 0x0e, 0xc5, 0x84, 0x97, 0xcc,
	0x15, 0x40, 0x1e, 0xc2, 0x36, 0xe5, 0x17, 0x31, 0xcb, 0xb5, 0x80, 0xb6, 0xb7, 0xa7, 0x2f, 0x1f,
	0x31, 0xa5, 0x62, 0x6e, 0x1a, 0xb4, 0x1c, 0xa8, 0x6c, 0xc3, 0x75, 0xdb, 0x1e, 0xc0, 0x0d, 0xca,
	0xe7, 0x4c, 0x4e, 0xb2, 0xde, 0xa6, 0xbe, 0x70, 0x53, 0x5f, 0x28, 0x31, 0xba, 0x6c, 0x3a, 0x1d,
	0xd8, 0x5d, 0x7e, 0x8e, 0x3f, 0x7a, 0x99, 0x7e, 0x10, 0xce, 0x67, 0x04, 0x7b, 0x2b, 0xb5, 0x06,
	0x0b, 0x29, 0x19, 0xd6, 0x2d, 0x47, 0xda, 0xf2, 0xfb, 0xfa, 0xe2, 0x1f, 0xa3, 0x6b, 0x73, 0xbe,
	0x21, 0x35, 0x60, 0xe7, 0xdc, 0x49, 0x1a, 0x4a, 0x0b, 0xe8, 0x5a, 0x63, 0xff, 0x16, 0xa7, 0x9a,
	0x57, 0xf8, 0x2a, 0xaf, 0xf6, 0xa1, 0xbb, 0x14, 0xf0, 0x26, 0xe5, 0xaf, 0x78, 0x5e, 0xca, 0x08,
	0xe1, 0xee, 0x4a, 0x46, 0xbd, 0x71, 0xad, 0x98, 0x1a, 0x71, 0xeb, 0x2a, 0xe2, 0x27, 0x70, 0xbb,
	0x91, 0x39, 0x43, 0xf2, 0x0f, 0xc9, 0xfb, 0x8a, 0x60, 0xbf, 0x99, 0x3c, 0xb3, 0xfa, 0x5f, 0xf9,
	0xc3, 0x6b, 0xcc, 0xdf, 0x51, 0xf7, 0xf2, 0xa7, 0xb5, 0x71, 0xb9, 0xb0, 0xd0, 0xf7, 0x85, 0x85,
	0x7e, 0x2c, 0x2c, 0xf4, 0xe9, 0x97, 0xb5, 0xf1, 0x7e, 0x5b, 0xff, 0x20, 0x1e, 0xff, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x39, 0x0f, 0x9d, 0x60, 0x04, 0x00, 0x00,
}
