// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.61.wboss.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WBossData struct {
	Stage   int32                 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2     int64                 `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
	Summary *GS_WBossGetSummary_R `protobuf:"bytes,3,opt,name=Summary" json:"Summary,omitempty"`
}

func (m *WBossData) Reset()                    { *m = WBossData{} }
func (m *WBossData) String() string            { return proto.CompactTextString(m) }
func (*WBossData) ProtoMessage()               {}
func (*WBossData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{0} }

type WBossMaxDmgInfo struct {
	Player *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Player" json:"Player,omitempty"`
	Dmg    float64           `protobuf:"fixed64,2,opt,name=Dmg,proto3" json:"Dmg,omitempty"`
}

func (m *WBossMaxDmgInfo) Reset()                    { *m = WBossMaxDmgInfo{} }
func (m *WBossMaxDmgInfo) String() string            { return proto.CompactTextString(m) }
func (*WBossMaxDmgInfo) ProtoMessage()               {}
func (*WBossMaxDmgInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{1} }

type WBossRankRow struct {
	Player *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Player" json:"Player,omitempty"`
	Jf     int32             `protobuf:"varint,2,opt,name=Jf,proto3" json:"Jf,omitempty"`
}

func (m *WBossRankRow) Reset()                    { *m = WBossRankRow{} }
func (m *WBossRankRow) String() string            { return proto.CompactTextString(m) }
func (*WBossRankRow) ProtoMessage()               {}
func (*WBossRankRow) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{2} }

type GS_WBossStageChange struct {
	Stage int32 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2   int64 `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *GS_WBossStageChange) Reset()                    { *m = GS_WBossStageChange{} }
func (m *GS_WBossStageChange) String() string            { return proto.CompactTextString(m) }
func (*GS_WBossStageChange) ProtoMessage()               {}
func (*GS_WBossStageChange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{3} }

// 拉取概要信息
type C_WBossGetSummary struct {
}

func (m *C_WBossGetSummary) Reset()                    { *m = C_WBossGetSummary{} }
func (m *C_WBossGetSummary) String() string            { return proto.CompactTextString(m) }
func (*C_WBossGetSummary) ProtoMessage()               {}
func (*C_WBossGetSummary) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{4} }

type GS_WBossGetSummary_R struct {
	BossId         int32          `protobuf:"varint,1,opt,name=BossId,proto3" json:"BossId,omitempty"`
	RwdMaxDmgTaken map[int32]bool `protobuf:"bytes,2,rep,name=RwdMaxDmgTaken" json:"RwdMaxDmgTaken,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GS_WBossGetSummary_R) Reset()                    { *m = GS_WBossGetSummary_R{} }
func (m *GS_WBossGetSummary_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WBossGetSummary_R) ProtoMessage()               {}
func (*GS_WBossGetSummary_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{5} }

// 打架
type C_WBossFight struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_WBossFight) Reset()                    { *m = C_WBossFight{} }
func (m *C_WBossFight) String() string            { return proto.CompactTextString(m) }
func (*C_WBossFight) ProtoMessage()               {}
func (*C_WBossFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{6} }

type GS_WBossFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
	JfAdd     int32         `protobuf:"varint,4,opt,name=JfAdd,proto3" json:"JfAdd,omitempty"`
}

func (m *GS_WBossFight_R) Reset()                    { *m = GS_WBossFight_R{} }
func (m *GS_WBossFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WBossFight_R) ProtoMessage()               {}
func (*GS_WBossFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{7} }

// 领取最大伤害奖励
type C_WBossTakeMaxDmgRwd struct {
	N int32 `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_WBossTakeMaxDmgRwd) Reset()                    { *m = C_WBossTakeMaxDmgRwd{} }
func (m *C_WBossTakeMaxDmgRwd) String() string            { return proto.CompactTextString(m) }
func (*C_WBossTakeMaxDmgRwd) ProtoMessage()               {}
func (*C_WBossTakeMaxDmgRwd) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{8} }

type GS_WBossTakeMaxDmgRwd_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_WBossTakeMaxDmgRwd_R) Reset()         { *m = GS_WBossTakeMaxDmgRwd_R{} }
func (m *GS_WBossTakeMaxDmgRwd_R) String() string { return proto.CompactTextString(m) }
func (*GS_WBossTakeMaxDmgRwd_R) ProtoMessage()    {}
func (*GS_WBossTakeMaxDmgRwd_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_61Wboss, []int{9}
}

// 拉取排行榜
type C_WBossGetRank struct {
}

func (m *C_WBossGetRank) Reset()                    { *m = C_WBossGetRank{} }
func (m *C_WBossGetRank) String() string            { return proto.CompactTextString(m) }
func (*C_WBossGetRank) ProtoMessage()               {}
func (*C_WBossGetRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{10} }

type GS_WBossGetRank_R struct {
	Rows []*WBossRankRow `protobuf:"bytes,1,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *GS_WBossGetRank_R) Reset()                    { *m = GS_WBossGetRank_R{} }
func (m *GS_WBossGetRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_WBossGetRank_R) ProtoMessage()               {}
func (*GS_WBossGetRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{11} }

// 拉取最大伤害信息
type C_WBossGetMaxDmgInfo struct {
}

func (m *C_WBossGetMaxDmgInfo) Reset()                    { *m = C_WBossGetMaxDmgInfo{} }
func (m *C_WBossGetMaxDmgInfo) String() string            { return proto.CompactTextString(m) }
func (*C_WBossGetMaxDmgInfo) ProtoMessage()               {}
func (*C_WBossGetMaxDmgInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{12} }

type GS_WBossGetMaxDmgInfo_R struct {
	MaxDmgInfo *WBossMaxDmgInfo `protobuf:"bytes,1,opt,name=MaxDmgInfo" json:"MaxDmgInfo,omitempty"`
}

func (m *GS_WBossGetMaxDmgInfo_R) Reset()         { *m = GS_WBossGetMaxDmgInfo_R{} }
func (m *GS_WBossGetMaxDmgInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_WBossGetMaxDmgInfo_R) ProtoMessage()    {}
func (*GS_WBossGetMaxDmgInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_61Wboss, []int{13}
}

// 拉取自己名次
type C_WBossGetSelfRank struct {
}

func (m *C_WBossGetSelfRank) Reset()                    { *m = C_WBossGetSelfRank{} }
func (m *C_WBossGetSelfRank) String() string            { return proto.CompactTextString(m) }
func (*C_WBossGetSelfRank) ProtoMessage()               {}
func (*C_WBossGetSelfRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_61Wboss, []int{14} }

type GS_WBossGetSelfRank_R struct {
	SelfRank int32 `protobuf:"varint,1,opt,name=SelfRank,proto3" json:"SelfRank,omitempty"`
	Jf       int32 `protobuf:"varint,2,opt,name=Jf,proto3" json:"Jf,omitempty"`
}

func (m *GS_WBossGetSelfRank_R) Reset()         { *m = GS_WBossGetSelfRank_R{} }
func (m *GS_WBossGetSelfRank_R) String() string { return proto.CompactTextString(m) }
func (*GS_WBossGetSelfRank_R) ProtoMessage()    {}
func (*GS_WBossGetSelfRank_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_61Wboss, []int{15}
}

func init() {
	proto.RegisterType((*WBossData)(nil), "msg.WBossData")
	proto.RegisterType((*WBossMaxDmgInfo)(nil), "msg.WBossMaxDmgInfo")
	proto.RegisterType((*WBossRankRow)(nil), "msg.WBossRankRow")
	proto.RegisterType((*GS_WBossStageChange)(nil), "msg.GS_WBossStageChange")
	proto.RegisterType((*C_WBossGetSummary)(nil), "msg.C_WBossGetSummary")
	proto.RegisterType((*GS_WBossGetSummary_R)(nil), "msg.GS_WBossGetSummary_R")
	proto.RegisterType((*C_WBossFight)(nil), "msg.C_WBossFight")
	proto.RegisterType((*GS_WBossFight_R)(nil), "msg.GS_WBossFight_R")
	proto.RegisterType((*C_WBossTakeMaxDmgRwd)(nil), "msg.C_WBossTakeMaxDmgRwd")
	proto.RegisterType((*GS_WBossTakeMaxDmgRwd_R)(nil), "msg.GS_WBossTakeMaxDmgRwd_R")
	proto.RegisterType((*C_WBossGetRank)(nil), "msg.C_WBossGetRank")
	proto.RegisterType((*GS_WBossGetRank_R)(nil), "msg.GS_WBossGetRank_R")
	proto.RegisterType((*C_WBossGetMaxDmgInfo)(nil), "msg.C_WBossGetMaxDmgInfo")
	proto.RegisterType((*GS_WBossGetMaxDmgInfo_R)(nil), "msg.GS_WBossGetMaxDmgInfo_R")
	proto.RegisterType((*C_WBossGetSelfRank)(nil), "msg.C_WBossGetSelfRank")
	proto.RegisterType((*GS_WBossGetSelfRank_R)(nil), "msg.GS_WBossGetSelfRank_R")
}
func (m *WBossData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WBossData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Ts2))
	}
	if m.Summary != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Summary.Size()))
		n1, err := m.Summary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *WBossMaxDmgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WBossMaxDmgInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Player.Size()))
		n2, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Dmg != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dmg))))
		i += 8
	}
	return i, nil
}

func (m *WBossRankRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WBossRankRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Player.Size()))
		n3, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Jf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Jf))
	}
	return i, nil
}

func (m *GS_WBossStageChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossStageChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *C_WBossGetSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossGetSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WBossGetSummary_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossGetSummary_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BossId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.BossId))
	}
	if len(m.RwdMaxDmgTaken) > 0 {
		for k, _ := range m.RwdMaxDmgTaken {
			dAtA[i] = 0x12
			i++
			v := m.RwdMaxDmgTaken[k]
			mapSize := 1 + sovCGs_61Wboss(uint64(k)) + 1 + 1
			i = encodeVarintCGs_61Wboss(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_61Wboss(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *C_WBossFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.T.Size()))
		n4, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GS_WBossFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Replay.Size()))
		n5, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Rewards.Size()))
		n6, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.JfAdd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.JfAdd))
	}
	return i, nil
}

func (m *C_WBossTakeMaxDmgRwd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossTakeMaxDmgRwd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_WBossTakeMaxDmgRwd_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossTakeMaxDmgRwd_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Rewards.Size()))
		n7, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *C_WBossGetRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossGetRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WBossGetRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossGetRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_61Wboss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_WBossGetMaxDmgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossGetMaxDmgInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WBossGetMaxDmgInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossGetMaxDmgInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxDmgInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.MaxDmgInfo.Size()))
		n8, err := m.MaxDmgInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *C_WBossGetSelfRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_WBossGetSelfRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_WBossGetSelfRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_WBossGetSelfRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfRank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.SelfRank))
	}
	if m.Jf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_61Wboss(dAtA, i, uint64(m.Jf))
	}
	return i, nil
}

func encodeVarintCGs_61Wboss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WBossData) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Ts2))
	}
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	return n
}

func (m *WBossMaxDmgInfo) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	if m.Dmg != 0 {
		n += 9
	}
	return n
}

func (m *WBossRankRow) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	if m.Jf != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Jf))
	}
	return n
}

func (m *GS_WBossStageChange) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Ts2))
	}
	return n
}

func (m *C_WBossGetSummary) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WBossGetSummary_R) Size() (n int) {
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.BossId))
	}
	if len(m.RwdMaxDmgTaken) > 0 {
		for k, v := range m.RwdMaxDmgTaken {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_61Wboss(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovCGs_61Wboss(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_WBossFight) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	return n
}

func (m *GS_WBossFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	if m.JfAdd != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.JfAdd))
	}
	return n
}

func (m *C_WBossTakeMaxDmgRwd) Size() (n int) {
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.N))
	}
	return n
}

func (m *GS_WBossTakeMaxDmgRwd_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	return n
}

func (m *C_WBossGetRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WBossGetRank_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovCGs_61Wboss(uint64(l))
		}
	}
	return n
}

func (m *C_WBossGetMaxDmgInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WBossGetMaxDmgInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.MaxDmgInfo != nil {
		l = m.MaxDmgInfo.Size()
		n += 1 + l + sovCGs_61Wboss(uint64(l))
	}
	return n
}

func (m *C_WBossGetSelfRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_WBossGetSelfRank_R) Size() (n int) {
	var l int
	_ = l
	if m.SelfRank != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.SelfRank))
	}
	if m.Jf != 0 {
		n += 1 + sovCGs_61Wboss(uint64(m.Jf))
	}
	return n
}

func sovCGs_61Wboss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_61Wboss(x uint64) (n int) {
	return sovCGs_61Wboss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WBossData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WBossData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WBossData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Summary == nil {
				m.Summary = &GS_WBossGetSummary_R{}
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WBossMaxDmgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WBossMaxDmgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WBossMaxDmgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerSimpleInfo{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dmg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WBossRankRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WBossRankRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WBossRankRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerSimpleInfo{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jf", wireType)
			}
			m.Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossStageChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossStageChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossStageChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossGetSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossGetSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossGetSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossGetSummary_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossGetSummary_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossGetSummary_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RwdMaxDmgTaken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RwdMaxDmgTaken == nil {
				m.RwdMaxDmgTaken = make(map[int32]bool)
			}
			var mapkey int32
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_61Wboss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_61Wboss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_61Wboss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_61Wboss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RwdMaxDmgTaken[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JfAdd", wireType)
			}
			m.JfAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JfAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossTakeMaxDmgRwd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossTakeMaxDmgRwd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossTakeMaxDmgRwd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossTakeMaxDmgRwd_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossTakeMaxDmgRwd_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossTakeMaxDmgRwd_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossGetRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossGetRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossGetRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossGetRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossGetRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossGetRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &WBossRankRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossGetMaxDmgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossGetMaxDmgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossGetMaxDmgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossGetMaxDmgInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossGetMaxDmgInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossGetMaxDmgInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDmgInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDmgInfo == nil {
				m.MaxDmgInfo = &WBossMaxDmgInfo{}
			}
			if err := m.MaxDmgInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_WBossGetSelfRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_WBossGetSelfRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_WBossGetSelfRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_WBossGetSelfRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_WBossGetSelfRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_WBossGetSelfRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRank", wireType)
			}
			m.SelfRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jf", wireType)
			}
			m.Jf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_61Wboss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_61Wboss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_61Wboss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_61Wboss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_61Wboss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_61Wboss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_61Wboss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_61Wboss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_61Wboss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_61Wboss   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.61.wboss.proto", fileDescriptorCGs_61Wboss) }

var fileDescriptorCGs_61Wboss = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x4f, 0xdb, 0x30,
	0x14, 0xc5, 0x2d, 0x14, 0xb8, 0xad, 0xf8, 0x70, 0x0b, 0xeb, 0xaa, 0xa9, 0xaa, 0xac, 0x6d, 0xea,
	0x1e, 0x88, 0x58, 0x99, 0xa6, 0x09, 0x69, 0x0f, 0x50, 0x3e, 0x04, 0x12, 0x6c, 0xba, 0xed, 0xb4,
	0xc7, 0xc8, 0x10, 0x37, 0x20, 0x9a, 0x18, 0x25, 0x66, 0x59, 0xff, 0xc5, 0x1e, 0xf7, 0x93, 0x78,
	0xdc, 0x4f, 0xd8, 0xd8, 0x1f, 0x99, 0xec, 0x38, 0x24, 0x20, 0xf6, 0xf5, 0xe6, 0x7b, 0xef, 0xe9,
	0xc9, 0x39, 0xc7, 0xd7, 0x85, 0xfa, 0xa9, 0xeb, 0xc7, 0xce, 0xeb, 0x97, 0x4e, 0x72, 0x22, 0xe3,
	0xd8, 0xb9, 0x8c, 0xa4, 0x92, 0xb4, 0x1c, 0xc4, 0x7e, 0x0b, 0x7c, 0xe9, 0xcb, 0xb4, 0xd1, 0x5a,
	0x31, 0xa8, 0xf5, 0x75, 0x27, 0x56, 0xd1, 0xd5, 0xa9, 0xb2, 0x38, 0x76, 0x06, 0xf3, 0x1f, 0xb7,
	0x65, 0x1c, 0xef, 0x70, 0xc5, 0x69, 0x03, 0x66, 0x06, 0x8a, 0xfb, 0xa2, 0x49, 0x3a, 0xa4, 0x3b,
	0x83, 0x69, 0x41, 0x97, 0xa0, 0x3c, 0x8c, 0x7b, 0xcd, 0x52, 0x87, 0x74, 0xcb, 0xa8, 0x8f, 0x74,
	0x03, 0x66, 0x07, 0x57, 0x41, 0xc0, 0xa3, 0x49, 0xb3, 0xdc, 0x21, 0xdd, 0x6a, 0xef, 0xb1, 0x13,
	0xc4, 0xbe, 0xb3, 0x3f, 0x70, 0x0d, 0xd7, 0xbe, 0x50, 0x76, 0xec, 0x22, 0x66, 0x48, 0x86, 0xb0,
	0x68, 0xa6, 0x47, 0xfc, 0xf3, 0x4e, 0xe0, 0x1f, 0x84, 0x23, 0x49, 0xd7, 0xa0, 0xf2, 0x7e, 0xcc,
	0x27, 0x22, 0x32, 0x1f, 0xac, 0xf6, 0x56, 0x0c, 0x4d, 0xda, 0x1a, 0x9c, 0x07, 0x97, 0x63, 0xa1,
	0x61, 0x68, 0x41, 0x5a, 0xc8, 0x4e, 0xe0, 0x1b, 0x21, 0x04, 0xf5, 0x91, 0x1d, 0x41, 0xcd, 0x70,
	0x22, 0x0f, 0x2f, 0x50, 0x26, 0xff, 0x4b, 0xb8, 0x00, 0xa5, 0xc3, 0x91, 0xe1, 0x9b, 0xc1, 0xd2,
	0xe1, 0x88, 0xbd, 0x85, 0x7a, 0xe6, 0xc1, 0x58, 0xef, 0x9f, 0xf1, 0xd0, 0x17, 0xff, 0x1a, 0x0b,
	0xab, 0xc3, 0x72, 0xff, 0x7e, 0x02, 0xec, 0x9a, 0x40, 0xe3, 0xa1, 0x60, 0xe8, 0x2a, 0x54, 0x74,
	0xef, 0xc0, 0xb3, 0xb4, 0xb6, 0xa2, 0x1f, 0x60, 0x01, 0x13, 0x2f, 0x4d, 0x69, 0xc8, 0x2f, 0x44,
	0xd8, 0x2c, 0x75, 0xca, 0xdd, 0x6a, 0x6f, 0xed, 0xb7, 0x19, 0x3b, 0x77, 0xf1, 0xbb, 0xa1, 0x8a,
	0x26, 0x78, 0x8f, 0xa4, 0xb5, 0x05, 0xf5, 0x07, 0x60, 0xda, 0xc5, 0x85, 0x98, 0x58, 0x09, 0xfa,
	0xa8, 0xdd, 0x7e, 0xe2, 0xe3, 0x2b, 0x61, 0x9c, 0xcd, 0x61, 0x5a, 0x6c, 0x96, 0xde, 0x10, 0xb6,
	0x0e, 0x35, 0xeb, 0x6f, 0xef, 0xdc, 0x3f, 0x53, 0xb4, 0x03, 0x64, 0x68, 0x83, 0xa6, 0x46, 0xdc,
	0x50, 0xf0, 0x60, 0x4f, 0x46, 0x01, 0x57, 0xe7, 0x32, 0x44, 0x32, 0x64, 0x5f, 0x09, 0x2c, 0x66,
	0x8a, 0xcd, 0x6f, 0x5c, 0xa4, 0x4f, 0x60, 0x7e, 0x37, 0x8a, 0x64, 0xd4, 0x97, 0x5e, 0x96, 0x68,
	0xde, 0xa0, 0x2f, 0xa0, 0x82, 0xe2, 0x72, 0xcc, 0x27, 0xe6, 0xf3, 0xd5, 0xde, 0xb2, 0x21, 0xde,
	0xe6, 0x4a, 0x8d, 0x45, 0x3a, 0x40, 0x0b, 0xa0, 0xcf, 0x61, 0x16, 0x45, 0xc2, 0x23, 0x2f, 0xb6,
	0x5b, 0x58, 0x33, 0x58, 0xdb, 0xc3, 0x6c, 0xa8, 0x0d, 0x1d, 0x8e, 0xb6, 0x3c, 0xaf, 0x39, 0x9d,
	0x5e, 0x9f, 0x29, 0xd8, 0x53, 0x68, 0x58, 0x33, 0x3a, 0x8d, 0x34, 0x17, 0x4c, 0x3c, 0x5a, 0x03,
	0x72, 0x6c, 0x65, 0x91, 0x63, 0xe6, 0xc2, 0xa3, 0x4c, 0xff, 0x1d, 0xd8, 0x5f, 0x7d, 0x14, 0xc4,
	0x95, 0xfe, 0x20, 0x8e, 0x2d, 0xc1, 0x42, 0xbe, 0x33, 0x7a, 0x8d, 0xd9, 0x26, 0x2c, 0x17, 0x2e,
	0x59, 0xb7, 0x5c, 0xa4, 0xcf, 0x60, 0x1a, 0x65, 0x12, 0x37, 0x89, 0x59, 0x85, 0x34, 0x94, 0xe2,
	0xe6, 0xa3, 0x19, 0xb3, 0xd5, 0x5b, 0x53, 0xfb, 0x42, 0xe5, 0x0f, 0x8d, 0xbd, 0xcb, 0x6d, 0xdc,
	0x19, 0xb8, 0x48, 0x5f, 0x01, 0xe4, 0xb5, 0xbd, 0xcd, 0x46, 0xce, 0x9f, 0xcf, 0xb0, 0x80, 0x63,
	0x0d, 0xa0, 0x85, 0x55, 0x17, 0xe3, 0x91, 0x91, 0xde, 0x87, 0x95, 0xe2, 0x7e, 0xda, 0xb6, 0x8b,
	0xb4, 0x05, 0x73, 0x59, 0x65, 0xa3, 0xba, 0xad, 0xef, 0x3f, 0xc2, 0xed, 0xc6, 0xf5, 0x8f, 0xf6,
	0xd4, 0xf5, 0x4d, 0x9b, 0x7c, 0xbb, 0x69, 0x93, 0xef, 0x37, 0x6d, 0xf2, 0xe5, 0x67, 0x7b, 0xea,
	0xa4, 0x62, 0xfe, 0xae, 0x36, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xb5, 0xc0, 0x44, 0xed,
	0x04, 0x00, 0x00,
}
