// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.41.chat.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 历史聊天记录(公共)
type ChatData struct {
	Data []*ChatOne `protobuf:"bytes,1,rep,name=Data" json:"Data,omitempty"`
}

func (m *ChatData) Reset()                    { *m = ChatData{} }
func (m *ChatData) String() string            { return proto.CompactTextString(m) }
func (*ChatData) ProtoMessage()               {}
func (*ChatData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_41Chat, []int{0} }

// 单条记录
type ChatOne struct {
	Tp      int32             `protobuf:"varint,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
	From    *PlayerSimpleInfo `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	Content string            `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Ts      int64             `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`
	ToId    string            `protobuf:"bytes,5,opt,name=ToId,proto3" json:"ToId,omitempty"`
	GId     string            `protobuf:"bytes,6,opt,name=GId,proto3" json:"GId,omitempty"`
	GLv     int32             `protobuf:"varint,7,opt,name=GLv,proto3" json:"GLv,omitempty"`
}

func (m *ChatOne) Reset()                    { *m = ChatOne{} }
func (m *ChatOne) String() string            { return proto.CompactTextString(m) }
func (*ChatOne) ProtoMessage()               {}
func (*ChatOne) Descriptor() ([]byte, []int) { return fileDescriptorCGs_41Chat, []int{1} }

// 聊天推送
type GS_ChatMsg struct {
	One *ChatOne `protobuf:"bytes,1,opt,name=One" json:"One,omitempty"`
}

func (m *GS_ChatMsg) Reset()                    { *m = GS_ChatMsg{} }
func (m *GS_ChatMsg) String() string            { return proto.CompactTextString(m) }
func (*GS_ChatMsg) ProtoMessage()               {}
func (*GS_ChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorCGs_41Chat, []int{2} }

// 聊天发送信息
type C_ChatSend struct {
	Tp      int32  `protobuf:"varint,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
	ToPlrId string `protobuf:"bytes,2,opt,name=ToPlrId,proto3" json:"ToPlrId,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *C_ChatSend) Reset()                    { *m = C_ChatSend{} }
func (m *C_ChatSend) String() string            { return proto.CompactTextString(m) }
func (*C_ChatSend) ProtoMessage()               {}
func (*C_ChatSend) Descriptor() ([]byte, []int) { return fileDescriptorCGs_41Chat, []int{3} }

type GS_ChatSend_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_ChatSend_R) Reset()                    { *m = GS_ChatSend_R{} }
func (m *GS_ChatSend_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ChatSend_R) ProtoMessage()               {}
func (*GS_ChatSend_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_41Chat, []int{4} }

func init() {
	proto.RegisterType((*ChatData)(nil), "msg.ChatData")
	proto.RegisterType((*ChatOne)(nil), "msg.ChatOne")
	proto.RegisterType((*GS_ChatMsg)(nil), "msg.GS_ChatMsg")
	proto.RegisterType((*C_ChatSend)(nil), "msg.C_ChatSend")
	proto.RegisterType((*GS_ChatSend_R)(nil), "msg.GS_ChatSend_R")
}
func (m *ChatData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_41Chat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChatOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatOne) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.Tp))
	}
	if m.From != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.From.Size()))
		n1, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.Ts))
	}
	if len(m.ToId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(len(m.ToId)))
		i += copy(dAtA[i:], m.ToId)
	}
	if len(m.GId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(len(m.GId)))
		i += copy(dAtA[i:], m.GId)
	}
	if m.GLv != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.GLv))
	}
	return i, nil
}

func (m *GS_ChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.One != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.One.Size()))
		n2, err := m.One.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C_ChatSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ChatSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.Tp))
	}
	if len(m.ToPlrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(len(m.ToPlrId)))
		i += copy(dAtA[i:], m.ToPlrId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *GS_ChatSend_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ChatSend_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_41Chat(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintCGs_41Chat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChatData) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCGs_41Chat(uint64(l))
		}
	}
	return n
}

func (m *ChatOne) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovCGs_41Chat(uint64(m.Tp))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_41Chat(uint64(m.Ts))
	}
	l = len(m.ToId)
	if l > 0 {
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	l = len(m.GId)
	if l > 0 {
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	if m.GLv != 0 {
		n += 1 + sovCGs_41Chat(uint64(m.GLv))
	}
	return n
}

func (m *GS_ChatMsg) Size() (n int) {
	var l int
	_ = l
	if m.One != nil {
		l = m.One.Size()
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	return n
}

func (m *C_ChatSend) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovCGs_41Chat(uint64(m.Tp))
	}
	l = len(m.ToPlrId)
	if l > 0 {
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCGs_41Chat(uint64(l))
	}
	return n
}

func (m *GS_ChatSend_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_41Chat(uint64(m.ErrorCode))
	}
	return n
}

func sovCGs_41Chat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_41Chat(x uint64) (n int) {
	return sovCGs_41Chat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ChatOne{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_41Chat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &PlayerSimpleInfo{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLv", wireType)
			}
			m.GLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_41Chat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field One", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.One == nil {
				m.One = &ChatOne{}
			}
			if err := m.One.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_41Chat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ChatSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ChatSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ChatSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPlrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPlrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_41Chat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ChatSend_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ChatSend_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ChatSend_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_41Chat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_41Chat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_41Chat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_41Chat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_41Chat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_41Chat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_41Chat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_41Chat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_41Chat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_41Chat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.41.chat.proto", fileDescriptorCGs_41Chat) }

var fileDescriptorCGs_41Chat = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0x97, 0xb6, 0x5b, 0xff, 0x3b, 0xfb, 0x2b, 0x12, 0x1c, 0x84, 0x21, 0xa5, 0xf4, 0xaa,
	0xc2, 0x2c, 0x73, 0xfa, 0x04, 0x56, 0x1d, 0x05, 0x65, 0xa3, 0xeb, 0xfd, 0xa8, 0x6b, 0xed, 0x84,
	0xb5, 0x29, 0x49, 0x14, 0x7c, 0x0b, 0x9f, 0xc2, 0x67, 0xd9, 0xa5, 0x8f, 0xa0, 0xf3, 0x45, 0x24,
	0x67, 0x1b, 0x82, 0xe2, 0x55, 0xce, 0xf9, 0x9d, 0x2f, 0x27, 0xdf, 0x47, 0x80, 0xce, 0x67, 0x85,
	0x0c, 0xce, 0x4f, 0x83, 0xf9, 0x22, 0x55, 0x41, 0x2d, 0xb8, 0xe2, 0xd4, 0x2c, 0x65, 0xd1, 0x83,
	0x82, 0x17, 0x7c, 0x03, 0x7a, 0x5d, 0x14, 0x0d, 0x06, 0x81, 0x54, 0xe2, 0x71, 0xae, 0xe4, 0x06,
	0x7b, 0x7d, 0xf8, 0x17, 0x2e, 0x52, 0x75, 0x99, 0xaa, 0x94, 0xba, 0x60, 0xe9, 0x93, 0x11, 0xd7,
	0xf4, 0x3b, 0xc3, 0xff, 0x41, 0x29, 0x8b, 0x40, 0x0f, 0xc7, 0x55, 0x1e, 0xe3, 0xc4, 0x7b, 0x25,
	0x60, 0x6f, 0x09, 0xdd, 0x07, 0x23, 0xa9, 0x19, 0x71, 0x89, 0xdf, 0x8c, 0x8d, 0xa4, 0xa6, 0xc7,
	0x60, 0x5d, 0x0b, 0x5e, 0x32, 0xc3, 0x25, 0x7e, 0x67, 0xd8, 0xc5, 0xdb, 0x93, 0x65, 0xfa, 0x9c,
	0x8b, 0xe9, 0x43, 0x59, 0x2f, 0xf3, 0xa8, 0xba, 0xe7, 0x31, 0x4a, 0x28, 0x03, 0x3b, 0xe4, 0x95,
	0xca, 0x2b, 0xc5, 0x4c, 0x97, 0xf8, 0xed, 0x78, 0xd7, 0xe2, 0x52, 0xc9, 0x2c, 0x97, 0xf8, 0x66,
	0x6c, 0x24, 0x92, 0x52, 0xb0, 0x12, 0x1e, 0x65, 0xac, 0x89, 0x32, 0xac, 0xe9, 0x01, 0x98, 0xa3,
	0x28, 0x63, 0x2d, 0x44, 0xba, 0x44, 0x72, 0xf3, 0xc4, 0x6c, 0xf4, 0xa2, 0x4b, 0xaf, 0x0f, 0x30,
	0x9a, 0xce, 0xb4, 0xd5, 0x5b, 0x59, 0x50, 0x07, 0xcc, 0x71, 0x95, 0xa3, 0xd7, 0x9f, 0xb9, 0xf4,
	0xc0, 0x9b, 0x00, 0x84, 0x28, 0x9e, 0xe6, 0x55, 0xf6, 0x2b, 0x18, 0x03, 0x3b, 0xe1, 0x93, 0xa5,
	0x88, 0x32, 0xcc, 0xd6, 0x8e, 0x77, 0xed, 0xdf, 0x39, 0xbc, 0x13, 0xd8, 0xdb, 0xbe, 0xaf, 0x57,
	0xce, 0x62, 0x7a, 0x04, 0xed, 0x2b, 0x21, 0xb8, 0x08, 0x79, 0x96, 0x6f, 0x77, 0x7f, 0x83, 0x8b,
	0xc3, 0xd5, 0x87, 0xd3, 0x58, 0xad, 0x1d, 0xf2, 0xb6, 0x76, 0xc8, 0xfb, 0xda, 0x21, 0x2f, 0x9f,
	0x4e, 0xe3, 0xae, 0x85, 0x5f, 0x74, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x0a, 0x78, 0xb2,
	0xe0, 0x01, 0x00, 0x00,
}
