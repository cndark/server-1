// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.12-2.item.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 装备更新
type GS_ArmorUpdate_HeroSeq struct {
	Seq     int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Id      int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	HeroSeq int64 `protobuf:"varint,3,opt,name=HeroSeq,proto3" json:"HeroSeq,omitempty"`
}

func (m *GS_ArmorUpdate_HeroSeq) Reset()         { *m = GS_ArmorUpdate_HeroSeq{} }
func (m *GS_ArmorUpdate_HeroSeq) String() string { return proto.CompactTextString(m) }
func (*GS_ArmorUpdate_HeroSeq) ProtoMessage()    {}
func (*GS_ArmorUpdate_HeroSeq) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{0}
}

// ============================================================================
// 快捷兑换
type C_ItemExchange struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	N  int32 `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_ItemExchange) Reset()                    { *m = C_ItemExchange{} }
func (m *C_ItemExchange) String() string            { return proto.CompactTextString(m) }
func (*C_ItemExchange) ProtoMessage()               {}
func (*C_ItemExchange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{1} }

type GS_ItemExchange_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_ItemExchange_R) Reset()                    { *m = GS_ItemExchange_R{} }
func (m *GS_ItemExchange_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ItemExchange_R) ProtoMessage()               {}
func (*GS_ItemExchange_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{2} }

// 使用
type C_ItemUse struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	N  int32 `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_ItemUse) Reset()                    { *m = C_ItemUse{} }
func (m *C_ItemUse) String() string            { return proto.CompactTextString(m) }
func (*C_ItemUse) ProtoMessage()               {}
func (*C_ItemUse) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{3} }

type GS_ItemUse_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_ItemUse_R) Reset()                    { *m = GS_ItemUse_R{} }
func (m *GS_ItemUse_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ItemUse_R) ProtoMessage()               {}
func (*GS_ItemUse_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{4} }

// 穿装备
type C_ArmorEquip struct {
	HeroSeq int64 `protobuf:"varint,1,opt,name=HeroSeq,proto3" json:"HeroSeq,omitempty"`
	Id      int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_ArmorEquip) Reset()                    { *m = C_ArmorEquip{} }
func (m *C_ArmorEquip) String() string            { return proto.CompactTextString(m) }
func (*C_ArmorEquip) ProtoMessage()               {}
func (*C_ArmorEquip) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{5} }

type GS_ArmorEquip_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_ArmorEquip_R) Reset()                    { *m = GS_ArmorEquip_R{} }
func (m *GS_ArmorEquip_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArmorEquip_R) ProtoMessage()               {}
func (*GS_ArmorEquip_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{6} }

// 卸装备
type C_ArmorUnequip struct {
	HeroSeq int64 `protobuf:"varint,1,opt,name=HeroSeq,proto3" json:"HeroSeq,omitempty"`
	Slot    int32 `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
}

func (m *C_ArmorUnequip) Reset()                    { *m = C_ArmorUnequip{} }
func (m *C_ArmorUnequip) String() string            { return proto.CompactTextString(m) }
func (*C_ArmorUnequip) ProtoMessage()               {}
func (*C_ArmorUnequip) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{7} }

type GS_ArmorUnequip_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_ArmorUnequip_R) Reset()                    { *m = GS_ArmorUnequip_R{} }
func (m *GS_ArmorUnequip_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArmorUnequip_R) ProtoMessage()               {}
func (*GS_ArmorUnequip_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{8} }

// 一键穿
type C_ArmorEquipOnekey struct {
	HeroSeq int64   `protobuf:"varint,1,opt,name=HeroSeq,proto3" json:"HeroSeq,omitempty"`
	Ids     []int32 `protobuf:"varint,2,rep,packed,name=Ids" json:"Ids,omitempty"`
}

func (m *C_ArmorEquipOnekey) Reset()                    { *m = C_ArmorEquipOnekey{} }
func (m *C_ArmorEquipOnekey) String() string            { return proto.CompactTextString(m) }
func (*C_ArmorEquipOnekey) ProtoMessage()               {}
func (*C_ArmorEquipOnekey) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{9} }

type GS_ArmorEquipOnekey_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_ArmorEquipOnekey_R) Reset()         { *m = GS_ArmorEquipOnekey_R{} }
func (m *GS_ArmorEquipOnekey_R) String() string { return proto.CompactTextString(m) }
func (*GS_ArmorEquipOnekey_R) ProtoMessage()    {}
func (*GS_ArmorEquipOnekey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{10}
}

// 一键卸
type C_ArmorUnequipOnekey struct {
	HeroSeq int64 `protobuf:"varint,1,opt,name=HeroSeq,proto3" json:"HeroSeq,omitempty"`
}

func (m *C_ArmorUnequipOnekey) Reset()         { *m = C_ArmorUnequipOnekey{} }
func (m *C_ArmorUnequipOnekey) String() string { return proto.CompactTextString(m) }
func (*C_ArmorUnequipOnekey) ProtoMessage()    {}
func (*C_ArmorUnequipOnekey) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{11}
}

type GS_ArmorUnequipOnekey_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_ArmorUnequipOnekey_R) Reset()         { *m = GS_ArmorUnequipOnekey_R{} }
func (m *GS_ArmorUnequipOnekey_R) String() string { return proto.CompactTextString(m) }
func (*GS_ArmorUnequipOnekey_R) ProtoMessage()    {}
func (*GS_ArmorUnequipOnekey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{12}
}

// 装备合成 (3 合 1)
type C_ArmorCompose struct {
	SrcId int32 `protobuf:"varint,1,opt,name=SrcId,proto3" json:"SrcId,omitempty"`
	N     int32 `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_ArmorCompose) Reset()                    { *m = C_ArmorCompose{} }
func (m *C_ArmorCompose) String() string            { return proto.CompactTextString(m) }
func (*C_ArmorCompose) ProtoMessage()               {}
func (*C_ArmorCompose) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{13} }

type GS_ArmorCompose_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_ArmorCompose_R) Reset()                    { *m = GS_ArmorCompose_R{} }
func (m *GS_ArmorCompose_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ArmorCompose_R) ProtoMessage()               {}
func (*GS_ArmorCompose_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{14} }

// 一键装备合成 (3 合 1 到顶)
type C_ArmorComposeOnekey struct {
	SrcId int32 `protobuf:"varint,1,opt,name=SrcId,proto3" json:"SrcId,omitempty"`
}

func (m *C_ArmorComposeOnekey) Reset()         { *m = C_ArmorComposeOnekey{} }
func (m *C_ArmorComposeOnekey) String() string { return proto.CompactTextString(m) }
func (*C_ArmorComposeOnekey) ProtoMessage()    {}
func (*C_ArmorComposeOnekey) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{15}
}

type GS_ArmorComposeOnekey_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_ArmorComposeOnekey_R) Reset()         { *m = GS_ArmorComposeOnekey_R{} }
func (m *GS_ArmorComposeOnekey_R) String() string { return proto.CompactTextString(m) }
func (*GS_ArmorComposeOnekey_R) ProtoMessage()    {}
func (*GS_ArmorComposeOnekey_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_2Item, []int{16}
}

// 选择
type C_ItemChoose struct {
	Id  int32           `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Idx map[int32]int32 `protobuf:"bytes,2,rep,name=Idx" json:"Idx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *C_ItemChoose) Reset()                    { *m = C_ItemChoose{} }
func (m *C_ItemChoose) String() string            { return proto.CompactTextString(m) }
func (*C_ItemChoose) ProtoMessage()               {}
func (*C_ItemChoose) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{17} }

type GS_ItemChoose_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_ItemChoose_R) Reset()                    { *m = GS_ItemChoose_R{} }
func (m *GS_ItemChoose_R) String() string            { return proto.CompactTextString(m) }
func (*GS_ItemChoose_R) ProtoMessage()               {}
func (*GS_ItemChoose_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_2Item, []int{18} }

func init() {
	proto.RegisterType((*GS_ArmorUpdate_HeroSeq)(nil), "msg.GS_ArmorUpdate_HeroSeq")
	proto.RegisterType((*C_ItemExchange)(nil), "msg.C_ItemExchange")
	proto.RegisterType((*GS_ItemExchange_R)(nil), "msg.GS_ItemExchange_R")
	proto.RegisterType((*C_ItemUse)(nil), "msg.C_ItemUse")
	proto.RegisterType((*GS_ItemUse_R)(nil), "msg.GS_ItemUse_R")
	proto.RegisterType((*C_ArmorEquip)(nil), "msg.C_ArmorEquip")
	proto.RegisterType((*GS_ArmorEquip_R)(nil), "msg.GS_ArmorEquip_R")
	proto.RegisterType((*C_ArmorUnequip)(nil), "msg.C_ArmorUnequip")
	proto.RegisterType((*GS_ArmorUnequip_R)(nil), "msg.GS_ArmorUnequip_R")
	proto.RegisterType((*C_ArmorEquipOnekey)(nil), "msg.C_ArmorEquipOnekey")
	proto.RegisterType((*GS_ArmorEquipOnekey_R)(nil), "msg.GS_ArmorEquipOnekey_R")
	proto.RegisterType((*C_ArmorUnequipOnekey)(nil), "msg.C_ArmorUnequipOnekey")
	proto.RegisterType((*GS_ArmorUnequipOnekey_R)(nil), "msg.GS_ArmorUnequipOnekey_R")
	proto.RegisterType((*C_ArmorCompose)(nil), "msg.C_ArmorCompose")
	proto.RegisterType((*GS_ArmorCompose_R)(nil), "msg.GS_ArmorCompose_R")
	proto.RegisterType((*C_ArmorComposeOnekey)(nil), "msg.C_ArmorComposeOnekey")
	proto.RegisterType((*GS_ArmorComposeOnekey_R)(nil), "msg.GS_ArmorComposeOnekey_R")
	proto.RegisterType((*C_ItemChoose)(nil), "msg.C_ItemChoose")
	proto.RegisterType((*GS_ItemChoose_R)(nil), "msg.GS_ItemChoose_R")
}
func (m *GS_ArmorUpdate_HeroSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorUpdate_HeroSeq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Seq))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Id))
	}
	if m.HeroSeq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.HeroSeq))
	}
	return i, nil
}

func (m *C_ItemExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ItemExchange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Id))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_ItemExchange_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ItemExchange_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_ItemUse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ItemUse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Id))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_ItemUse_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ItemUse_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Rewards.Size()))
		n2, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C_ArmorEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorEquip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.HeroSeq))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_ArmorEquip_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorEquip_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_ArmorUnequip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorUnequip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.HeroSeq))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *GS_ArmorUnequip_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorUnequip_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_ArmorEquipOnekey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorEquipOnekey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.HeroSeq))
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GS_ArmorEquipOnekey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorEquipOnekey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_ArmorUnequipOnekey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorUnequipOnekey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.HeroSeq))
	}
	return i, nil
}

func (m *GS_ArmorUnequipOnekey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorUnequipOnekey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_ArmorCompose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorCompose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.SrcId))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_ArmorCompose_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorCompose_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_ArmorComposeOnekey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ArmorComposeOnekey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.SrcId))
	}
	return i, nil
}

func (m *GS_ArmorComposeOnekey_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ArmorComposeOnekey_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Rewards.Size()))
		n6, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *C_ItemChoose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_ItemChoose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Id))
	}
	if len(m.Idx) > 0 {
		for k, _ := range m.Idx {
			dAtA[i] = 0x12
			i++
			v := m.Idx[k]
			mapSize := 1 + sovCGs_12_2Item(uint64(k)) + 1 + sovCGs_12_2Item(uint64(v))
			i = encodeVarintCGs_12_2Item(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_12_2Item(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_12_2Item(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *GS_ItemChoose_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_ItemChoose_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_2Item(dAtA, i, uint64(m.Rewards.Size()))
		n7, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintCGs_12_2Item(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GS_ArmorUpdate_HeroSeq) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Seq))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Id))
	}
	if m.HeroSeq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.HeroSeq))
	}
	return n
}

func (m *C_ItemExchange) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Id))
	}
	if m.N != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.N))
	}
	return n
}

func (m *GS_ItemExchange_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_2Item(uint64(l))
	}
	return n
}

func (m *C_ItemUse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Id))
	}
	if m.N != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.N))
	}
	return n
}

func (m *GS_ItemUse_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_2Item(uint64(l))
	}
	return n
}

func (m *C_ArmorEquip) Size() (n int) {
	var l int
	_ = l
	if m.HeroSeq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.HeroSeq))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Id))
	}
	return n
}

func (m *GS_ArmorEquip_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_ArmorUnequip) Size() (n int) {
	var l int
	_ = l
	if m.HeroSeq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.HeroSeq))
	}
	if m.Slot != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Slot))
	}
	return n
}

func (m *GS_ArmorUnequip_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_ArmorEquipOnekey) Size() (n int) {
	var l int
	_ = l
	if m.HeroSeq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.HeroSeq))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCGs_12_2Item(uint64(e))
		}
		n += 1 + sovCGs_12_2Item(uint64(l)) + l
	}
	return n
}

func (m *GS_ArmorEquipOnekey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_ArmorUnequipOnekey) Size() (n int) {
	var l int
	_ = l
	if m.HeroSeq != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.HeroSeq))
	}
	return n
}

func (m *GS_ArmorUnequipOnekey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_ArmorCompose) Size() (n int) {
	var l int
	_ = l
	if m.SrcId != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.SrcId))
	}
	if m.N != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.N))
	}
	return n
}

func (m *GS_ArmorCompose_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_2Item(uint64(l))
	}
	return n
}

func (m *C_ArmorComposeOnekey) Size() (n int) {
	var l int
	_ = l
	if m.SrcId != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.SrcId))
	}
	return n
}

func (m *GS_ArmorComposeOnekey_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_2Item(uint64(l))
	}
	return n
}

func (m *C_ItemChoose) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.Id))
	}
	if len(m.Idx) > 0 {
		for k, v := range m.Idx {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_12_2Item(uint64(k)) + 1 + sovCGs_12_2Item(uint64(v))
			n += mapEntrySize + 1 + sovCGs_12_2Item(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GS_ItemChoose_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_2Item(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_2Item(uint64(l))
	}
	return n
}

func sovCGs_12_2Item(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_12_2Item(x uint64) (n int) {
	return sovCGs_12_2Item(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GS_ArmorUpdate_HeroSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorUpdate_HeroSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorUpdate_HeroSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSeq", wireType)
			}
			m.HeroSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroSeq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ItemExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ItemExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ItemExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ItemExchange_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ItemExchange_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ItemExchange_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ItemUse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ItemUse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ItemUse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ItemUse_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ItemUse_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ItemUse_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSeq", wireType)
			}
			m.HeroSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroSeq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorEquip_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorEquip_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorEquip_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorUnequip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorUnequip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorUnequip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSeq", wireType)
			}
			m.HeroSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroSeq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorUnequip_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorUnequip_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorUnequip_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorEquipOnekey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorEquipOnekey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorEquipOnekey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSeq", wireType)
			}
			m.HeroSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroSeq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_2Item
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_2Item
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_12_2Item
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_2Item
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorEquipOnekey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorEquipOnekey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorEquipOnekey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorUnequipOnekey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorUnequipOnekey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorUnequipOnekey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroSeq", wireType)
			}
			m.HeroSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroSeq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorUnequipOnekey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorUnequipOnekey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorUnequipOnekey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorCompose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorCompose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorCompose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorCompose_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorCompose_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorCompose_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ArmorComposeOnekey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ArmorComposeOnekey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ArmorComposeOnekey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ArmorComposeOnekey_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ArmorComposeOnekey_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ArmorComposeOnekey_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_ItemChoose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_ItemChoose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_ItemChoose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Idx == nil {
				m.Idx = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_2Item
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_2Item
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_2Item
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_12_2Item
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Idx[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_ItemChoose_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_ItemChoose_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_ItemChoose_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_2Item(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_2Item
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_12_2Item(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_12_2Item
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_12_2Item
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_12_2Item
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_12_2Item
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_12_2Item(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_12_2Item = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_12_2Item   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.12-2.item.proto", fileDescriptorCGs_12_2Item) }

var fileDescriptorCGs_12_2Item = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xc6, 0x84, 0xd2, 0x69, 0x54, 0xca, 0x2a, 0x85, 0x28, 0x42, 0x56, 0xb5, 0x07, 0x14,
	0xa4, 0x62, 0xd2, 0xf0, 0x57, 0x71, 0x40, 0x80, 0x15, 0x15, 0x5f, 0x8a, 0x64, 0x37, 0x42, 0x9c,
	0xac, 0x10, 0xaf, 0xdc, 0xaa, 0x75, 0x36, 0xd9, 0x75, 0x20, 0xb9, 0xf3, 0x00, 0x3c, 0x56, 0x8f,
	0x3c, 0x02, 0x84, 0x17, 0x41, 0xfb, 0x93, 0xc4, 0x8e, 0x22, 0xcc, 0xc1, 0xb7, 0xdd, 0xf1, 0xcc,
	0x37, 0xdf, 0xf7, 0xcd, 0xac, 0xa1, 0x3e, 0x08, 0x63, 0xe1, 0x1c, 0x77, 0x9e, 0x74, 0x9c, 0xcb,
	0x94, 0x26, 0xce, 0x88, 0xb3, 0x94, 0x61, 0x2b, 0x11, 0x71, 0x13, 0x62, 0x16, 0x33, 0x1d, 0x68,
	0x1e, 0xa8, 0xb4, 0x76, 0xdb, 0x11, 0x29, 0x9f, 0x0c, 0x52, 0xa1, 0xc3, 0xe4, 0x1c, 0xee, 0x9f,
	0x06, 0xe1, 0x3b, 0x9e, 0x30, 0xde, 0x1b, 0x45, 0xfd, 0x94, 0x86, 0x1f, 0x28, 0x67, 0x01, 0x1d,
	0xe3, 0x7d, 0xb0, 0x02, 0x3a, 0x6e, 0xa0, 0x43, 0xd4, 0xb2, 0x7c, 0x79, 0xc4, 0x7b, 0x50, 0xf1,
	0xa2, 0x46, 0xe5, 0x10, 0xb5, 0xaa, 0x7e, 0xc5, 0x8b, 0x70, 0x03, 0xb6, 0x4d, 0x72, 0xc3, 0x52,
	0x59, 0x8b, 0x2b, 0x71, 0x60, 0xcf, 0x0d, 0xbd, 0x94, 0x26, 0xdd, 0xe9, 0xe0, 0xa2, 0x3f, 0x8c,
	0xa9, 0xa9, 0x45, 0xcb, 0xda, 0x1a, 0xa0, 0x33, 0x03, 0x85, 0xce, 0xc8, 0x67, 0xb8, 0x77, 0x1a,
	0xe4, 0x0a, 0x42, 0x1f, 0x3f, 0x84, 0x9d, 0x2e, 0xe7, 0x8c, 0xbb, 0x2c, 0xa2, 0xa6, 0x72, 0x15,
	0xc0, 0x8f, 0x60, 0xdb, 0xa7, 0xdf, 0xfa, 0x3c, 0x12, 0x0a, 0x66, 0xb7, 0x53, 0x73, 0x12, 0x11,
	0x3b, 0x26, 0xe6, 0x2f, 0x3e, 0x92, 0xc7, 0xb0, 0xa3, 0xa9, 0xf4, 0x44, 0x11, 0x8b, 0x73, 0xa8,
	0x19, 0x16, 0x3d, 0x51, 0x1e, 0x81, 0x13, 0xa8, 0xb9, 0xda, 0xe0, 0xee, 0x78, 0x72, 0x39, 0xca,
	0xba, 0x86, 0x72, 0xae, 0xad, 0xfb, 0x4b, 0x9e, 0xc2, 0xdd, 0xc5, 0x6c, 0x54, 0x69, 0x11, 0x25,
	0xf2, 0x46, 0xda, 0xae, 0x67, 0x39, 0xa4, 0x05, 0xcd, 0x30, 0xdc, 0x0a, 0xae, 0x59, 0x6a, 0xda,
	0xa9, 0x33, 0x39, 0x56, 0x63, 0xc8, 0x02, 0x14, 0xb6, 0x7c, 0x0b, 0x38, 0xab, 0xee, 0xe3, 0x90,
	0x5e, 0xd1, 0xd9, 0x3f, 0xda, 0xee, 0x83, 0xe5, 0x29, 0xc7, 0xac, 0x56, 0xd5, 0x97, 0x47, 0xf2,
	0x02, 0x0e, 0x72, 0x2a, 0x35, 0x44, 0x61, 0xe3, 0x36, 0xd4, 0xf3, 0x5a, 0x8b, 0x5a, 0x93, 0x57,
	0xf0, 0x60, 0x4d, 0xdd, 0x7f, 0xb6, 0x7a, 0xbe, 0xb4, 0xd5, 0x65, 0xc9, 0x88, 0x09, 0x8a, 0xeb,
	0x50, 0x0d, 0xf8, 0x60, 0xb9, 0x4a, 0xfa, 0xb2, 0x71, 0xa7, 0xb3, 0x65, 0xa5, 0xad, 0xd4, 0xd1,
	0x52, 0xbb, 0x41, 0x36, 0xda, 0x37, 0xd2, 0x22, 0xe1, 0x4a, 0x77, 0x2e, 0xbd, 0x34, 0x3a, 0xdf,
	0x91, 0x5c, 0x71, 0xf9, 0x6e, 0xdc, 0x0b, 0xc6, 0x36, 0x3c, 0xb3, 0x23, 0x39, 0xf4, 0xa9, 0x1a,
	0xfa, 0x6e, 0xa7, 0xa9, 0x40, 0xb2, 0xf9, 0x8e, 0x17, 0x4d, 0xbb, 0xc3, 0x94, 0xcf, 0xe4, 0x42,
	0x4c, 0x9b, 0x2f, 0xe1, 0xce, 0x22, 0x20, 0xd7, 0xe5, 0x8a, 0xce, 0x0c, 0x94, 0x65, 0x34, 0x7e,
	0xed, 0x5f, 0x4f, 0xa8, 0x31, 0x5a, 0x5f, 0x5e, 0x57, 0x4e, 0x10, 0xf9, 0xa4, 0x9e, 0xcb, 0x0a,
	0xb6, 0x2c, 0x7d, 0xef, 0xeb, 0x37, 0xbf, 0xed, 0xad, 0x9b, 0xb9, 0x8d, 0x7e, 0xce, 0x6d, 0xf4,
	0x6b, 0x6e, 0xa3, 0x1f, 0x7f, 0xec, 0xad, 0x2f, 0xb7, 0xd5, 0x0f, 0xf4, 0xd9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf3, 0xe0, 0x8c, 0x2e, 0x80, 0x05, 0x00, 0x00,
}
