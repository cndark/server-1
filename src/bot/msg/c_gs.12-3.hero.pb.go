// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.12-3.hero.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroArray struct {
	Seqs []int64 `protobuf:"varint,1,rep,packed,name=Seqs" json:"Seqs,omitempty"`
}

func (m *HeroArray) Reset()                    { *m = HeroArray{} }
func (m *HeroArray) String() string            { return proto.CompactTextString(m) }
func (*HeroArray) ProtoMessage()               {}
func (*HeroArray) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{0} }

// 英雄变化
type GS_HeroUpdate struct {
	Hero *Hero `protobuf:"bytes,1,opt,name=Hero" json:"Hero,omitempty"`
}

func (m *GS_HeroUpdate) Reset()                    { *m = GS_HeroUpdate{} }
func (m *GS_HeroUpdate) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroUpdate) ProtoMessage()               {}
func (*GS_HeroUpdate) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{1} }

// 英雄升级
type C_HeroLevelUp struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	N   int32 `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *C_HeroLevelUp) Reset()                    { *m = C_HeroLevelUp{} }
func (m *C_HeroLevelUp) String() string            { return proto.CompactTextString(m) }
func (*C_HeroLevelUp) ProtoMessage()               {}
func (*C_HeroLevelUp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{2} }

type GS_HeroLevelUp_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroLevelUp_R) Reset()                    { *m = GS_HeroLevelUp_R{} }
func (m *GS_HeroLevelUp_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroLevelUp_R) ProtoMessage()               {}
func (*GS_HeroLevelUp_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{3} }

// 英雄升星
type C_HeroStarUp struct {
	Seq  int64        `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Cost []*HeroArray `protobuf:"bytes,2,rep,name=Cost" json:"Cost,omitempty"`
}

func (m *C_HeroStarUp) Reset()                    { *m = C_HeroStarUp{} }
func (m *C_HeroStarUp) String() string            { return proto.CompactTextString(m) }
func (*C_HeroStarUp) ProtoMessage()               {}
func (*C_HeroStarUp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{4} }

type GS_HeroStarUp_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_HeroStarUp_R) Reset()                    { *m = GS_HeroStarUp_R{} }
func (m *GS_HeroStarUp_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroStarUp_R) ProtoMessage()               {}
func (*GS_HeroStarUp_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{5} }

// 英雄锁
type C_HeroLock struct {
	Seq  int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Lock bool  `protobuf:"varint,2,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (m *C_HeroLock) Reset()                    { *m = C_HeroLock{} }
func (m *C_HeroLock) String() string            { return proto.CompactTextString(m) }
func (*C_HeroLock) ProtoMessage()               {}
func (*C_HeroLock) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{6} }

type GS_HeroLock_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroLock_R) Reset()                    { *m = GS_HeroLock_R{} }
func (m *GS_HeroLock_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroLock_R) ProtoMessage()               {}
func (*GS_HeroLock_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{7} }

// 重置
type C_HeroReset struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroReset) Reset()                    { *m = C_HeroReset{} }
func (m *C_HeroReset) String() string            { return proto.CompactTextString(m) }
func (*C_HeroReset) ProtoMessage()               {}
func (*C_HeroReset) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{8} }

type GS_HeroReset_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_HeroReset_R) Reset()                    { *m = GS_HeroReset_R{} }
func (m *GS_HeroReset_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroReset_R) ProtoMessage()               {}
func (*GS_HeroReset_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{9} }

// 分解
type C_HeroDecompose struct {
	Seqs []int64 `protobuf:"varint,1,rep,packed,name=Seqs" json:"Seqs,omitempty"`
}

func (m *C_HeroDecompose) Reset()                    { *m = C_HeroDecompose{} }
func (m *C_HeroDecompose) String() string            { return proto.CompactTextString(m) }
func (*C_HeroDecompose) ProtoMessage()               {}
func (*C_HeroDecompose) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{10} }

type GS_HeroDecompose_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_HeroDecompose_R) Reset()                    { *m = GS_HeroDecompose_R{} }
func (m *GS_HeroDecompose_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroDecompose_R) ProtoMessage()               {}
func (*GS_HeroDecompose_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{11} }

// 英雄转换生成id
type C_HeroChange struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroChange) Reset()                    { *m = C_HeroChange{} }
func (m *C_HeroChange) String() string            { return proto.CompactTextString(m) }
func (*C_HeroChange) ProtoMessage()               {}
func (*C_HeroChange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{12} }

type GS_HeroChange_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ChangeId  int32 `protobuf:"varint,2,opt,name=ChangeId,proto3" json:"ChangeId,omitempty"`
}

func (m *GS_HeroChange_R) Reset()                    { *m = GS_HeroChange_R{} }
func (m *GS_HeroChange_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroChange_R) ProtoMessage()               {}
func (*GS_HeroChange_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{13} }

// 英雄取消转换
type C_HeroChangeCancel struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroChangeCancel) Reset()                    { *m = C_HeroChangeCancel{} }
func (m *C_HeroChangeCancel) String() string            { return proto.CompactTextString(m) }
func (*C_HeroChangeCancel) ProtoMessage()               {}
func (*C_HeroChangeCancel) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{14} }

type GS_HeroChangeCancel_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroChangeCancel_R) Reset()         { *m = GS_HeroChangeCancel_R{} }
func (m *GS_HeroChangeCancel_R) String() string { return proto.CompactTextString(m) }
func (*GS_HeroChangeCancel_R) ProtoMessage()    {}
func (*GS_HeroChangeCancel_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{15}
}

// 英雄转换确认
type C_HeroChangeApply struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroChangeApply) Reset()                    { *m = C_HeroChangeApply{} }
func (m *C_HeroChangeApply) String() string            { return proto.CompactTextString(m) }
func (*C_HeroChangeApply) ProtoMessage()               {}
func (*C_HeroChangeApply) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{16} }

type GS_HeroChangeApply_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Hero      *Hero `protobuf:"bytes,2,opt,name=Hero" json:"Hero,omitempty"`
}

func (m *GS_HeroChangeApply_R) Reset()         { *m = GS_HeroChangeApply_R{} }
func (m *GS_HeroChangeApply_R) String() string { return proto.CompactTextString(m) }
func (*GS_HeroChangeApply_R) ProtoMessage()    {}
func (*GS_HeroChangeApply_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{17}
}

// 解锁饰品
type C_HeroTrinketUnlock struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroTrinketUnlock) Reset()                    { *m = C_HeroTrinketUnlock{} }
func (m *C_HeroTrinketUnlock) String() string            { return proto.CompactTextString(m) }
func (*C_HeroTrinketUnlock) ProtoMessage()               {}
func (*C_HeroTrinketUnlock) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{18} }

type GS_HeroTrinketUnlock_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroTrinketUnlock_R) Reset()         { *m = GS_HeroTrinketUnlock_R{} }
func (m *GS_HeroTrinketUnlock_R) String() string { return proto.CompactTextString(m) }
func (*GS_HeroTrinketUnlock_R) ProtoMessage()    {}
func (*GS_HeroTrinketUnlock_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{19}
}

// 升级饰品
type C_HeroTrinketUp struct {
	Seq  int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Lock bool  `protobuf:"varint,2,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (m *C_HeroTrinketUp) Reset()                    { *m = C_HeroTrinketUp{} }
func (m *C_HeroTrinketUp) String() string            { return proto.CompactTextString(m) }
func (*C_HeroTrinketUp) ProtoMessage()               {}
func (*C_HeroTrinketUp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{20} }

type GS_HeroTrinketUp_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroTrinketUp_R) Reset()                    { *m = GS_HeroTrinketUp_R{} }
func (m *GS_HeroTrinketUp_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroTrinketUp_R) ProtoMessage()               {}
func (*GS_HeroTrinketUp_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{21} }

// 转换饰品
type C_HeroTrinketTransformGen struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroTrinketTransformGen) Reset()         { *m = C_HeroTrinketTransformGen{} }
func (m *C_HeroTrinketTransformGen) String() string { return proto.CompactTextString(m) }
func (*C_HeroTrinketTransformGen) ProtoMessage()    {}
func (*C_HeroTrinketTransformGen) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{22}
}

type GS_HeroTrinketTransformGen_R struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Props     []int32 `protobuf:"varint,2,rep,packed,name=Props" json:"Props,omitempty"`
}

func (m *GS_HeroTrinketTransformGen_R) Reset()         { *m = GS_HeroTrinketTransformGen_R{} }
func (m *GS_HeroTrinketTransformGen_R) String() string { return proto.CompactTextString(m) }
func (*GS_HeroTrinketTransformGen_R) ProtoMessage()    {}
func (*GS_HeroTrinketTransformGen_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{23}
}

// 保存饰品转换的属性
type C_HeroTrinketTransformCommit struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_HeroTrinketTransformCommit) Reset()         { *m = C_HeroTrinketTransformCommit{} }
func (m *C_HeroTrinketTransformCommit) String() string { return proto.CompactTextString(m) }
func (*C_HeroTrinketTransformCommit) ProtoMessage()    {}
func (*C_HeroTrinketTransformCommit) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{24}
}

type GS_HeroTrinketTransformCommit_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroTrinketTransformCommit_R) Reset()         { *m = GS_HeroTrinketTransformCommit_R{} }
func (m *GS_HeroTrinketTransformCommit_R) String() string { return proto.CompactTextString(m) }
func (*GS_HeroTrinketTransformCommit_R) ProtoMessage()    {}
func (*GS_HeroTrinketTransformCommit_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_12_3Hero, []int{25}
}

// 英雄背包扩容
type C_HeroBagBuy struct {
}

func (m *C_HeroBagBuy) Reset()                    { *m = C_HeroBagBuy{} }
func (m *C_HeroBagBuy) String() string            { return proto.CompactTextString(m) }
func (*C_HeroBagBuy) ProtoMessage()               {}
func (*C_HeroBagBuy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{26} }

type GS_HeroBagBuy_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroBagBuy_R) Reset()                    { *m = GS_HeroBagBuy_R{} }
func (m *GS_HeroBagBuy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroBagBuy_R) ProtoMessage()               {}
func (*GS_HeroBagBuy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{27} }

// 英雄继承
type C_HeroInherit struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Id  int32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_HeroInherit) Reset()                    { *m = C_HeroInherit{} }
func (m *C_HeroInherit) String() string            { return proto.CompactTextString(m) }
func (*C_HeroInherit) ProtoMessage()               {}
func (*C_HeroInherit) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{28} }

type GS_HeroInherit_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_HeroInherit_R) Reset()                    { *m = GS_HeroInherit_R{} }
func (m *GS_HeroInherit_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroInherit_R) ProtoMessage()               {}
func (*GS_HeroInherit_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{29} }

// 英雄设置皮肤
type C_HeroSetSkin struct {
	Seq  int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Skin int32 `protobuf:"varint,2,opt,name=Skin,proto3" json:"Skin,omitempty"`
}

func (m *C_HeroSetSkin) Reset()                    { *m = C_HeroSetSkin{} }
func (m *C_HeroSetSkin) String() string            { return proto.CompactTextString(m) }
func (*C_HeroSetSkin) ProtoMessage()               {}
func (*C_HeroSetSkin) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{30} }

type GS_HeroSetSkin_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_HeroSetSkin_R) Reset()                    { *m = GS_HeroSetSkin_R{} }
func (m *GS_HeroSetSkin_R) String() string            { return proto.CompactTextString(m) }
func (*GS_HeroSetSkin_R) ProtoMessage()               {}
func (*GS_HeroSetSkin_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_12_3Hero, []int{31} }

func init() {
	proto.RegisterType((*HeroArray)(nil), "msg.HeroArray")
	proto.RegisterType((*GS_HeroUpdate)(nil), "msg.GS_HeroUpdate")
	proto.RegisterType((*C_HeroLevelUp)(nil), "msg.C_HeroLevelUp")
	proto.RegisterType((*GS_HeroLevelUp_R)(nil), "msg.GS_HeroLevelUp_R")
	proto.RegisterType((*C_HeroStarUp)(nil), "msg.C_HeroStarUp")
	proto.RegisterType((*GS_HeroStarUp_R)(nil), "msg.GS_HeroStarUp_R")
	proto.RegisterType((*C_HeroLock)(nil), "msg.C_HeroLock")
	proto.RegisterType((*GS_HeroLock_R)(nil), "msg.GS_HeroLock_R")
	proto.RegisterType((*C_HeroReset)(nil), "msg.C_HeroReset")
	proto.RegisterType((*GS_HeroReset_R)(nil), "msg.GS_HeroReset_R")
	proto.RegisterType((*C_HeroDecompose)(nil), "msg.C_HeroDecompose")
	proto.RegisterType((*GS_HeroDecompose_R)(nil), "msg.GS_HeroDecompose_R")
	proto.RegisterType((*C_HeroChange)(nil), "msg.C_HeroChange")
	proto.RegisterType((*GS_HeroChange_R)(nil), "msg.GS_HeroChange_R")
	proto.RegisterType((*C_HeroChangeCancel)(nil), "msg.C_HeroChangeCancel")
	proto.RegisterType((*GS_HeroChangeCancel_R)(nil), "msg.GS_HeroChangeCancel_R")
	proto.RegisterType((*C_HeroChangeApply)(nil), "msg.C_HeroChangeApply")
	proto.RegisterType((*GS_HeroChangeApply_R)(nil), "msg.GS_HeroChangeApply_R")
	proto.RegisterType((*C_HeroTrinketUnlock)(nil), "msg.C_HeroTrinketUnlock")
	proto.RegisterType((*GS_HeroTrinketUnlock_R)(nil), "msg.GS_HeroTrinketUnlock_R")
	proto.RegisterType((*C_HeroTrinketUp)(nil), "msg.C_HeroTrinketUp")
	proto.RegisterType((*GS_HeroTrinketUp_R)(nil), "msg.GS_HeroTrinketUp_R")
	proto.RegisterType((*C_HeroTrinketTransformGen)(nil), "msg.C_HeroTrinketTransformGen")
	proto.RegisterType((*GS_HeroTrinketTransformGen_R)(nil), "msg.GS_HeroTrinketTransformGen_R")
	proto.RegisterType((*C_HeroTrinketTransformCommit)(nil), "msg.C_HeroTrinketTransformCommit")
	proto.RegisterType((*GS_HeroTrinketTransformCommit_R)(nil), "msg.GS_HeroTrinketTransformCommit_R")
	proto.RegisterType((*C_HeroBagBuy)(nil), "msg.C_HeroBagBuy")
	proto.RegisterType((*GS_HeroBagBuy_R)(nil), "msg.GS_HeroBagBuy_R")
	proto.RegisterType((*C_HeroInherit)(nil), "msg.C_HeroInherit")
	proto.RegisterType((*GS_HeroInherit_R)(nil), "msg.GS_HeroInherit_R")
	proto.RegisterType((*C_HeroSetSkin)(nil), "msg.C_HeroSetSkin")
	proto.RegisterType((*GS_HeroSetSkin_R)(nil), "msg.GS_HeroSetSkin_R")
}
func (m *HeroArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		dAtA2 := make([]byte, len(m.Seqs)*10)
		var j1 int
		for _, num1 := range m.Seqs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GS_HeroUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Hero.Size()))
		n3, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_HeroLevelUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroLevelUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.N))
	}
	return i, nil
}

func (m *GS_HeroLevelUp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroLevelUp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroStarUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroStarUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if len(m.Cost) > 0 {
		for _, msg := range m.Cost {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GS_HeroStarUp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroStarUp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C_HeroLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroLock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if m.Lock {
		dAtA[i] = 0x10
		i++
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_HeroLock_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroLock_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroReset_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroReset_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_HeroDecompose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroDecompose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		dAtA7 := make([]byte, len(m.Seqs)*10)
		var j6 int
		for _, num1 := range m.Seqs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *GS_HeroDecompose_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroDecompose_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Rewards.Size()))
		n8, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *C_HeroChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroChange_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroChange_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.ChangeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ChangeId))
	}
	return i, nil
}

func (m *C_HeroChangeCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroChangeCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroChangeCancel_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroChangeCancel_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroChangeApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroChangeApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroChangeApply_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroChangeApply_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Hero != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Hero.Size()))
		n9, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *C_HeroTrinketUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroTrinketUnlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroTrinketUnlock_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroTrinketUnlock_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroTrinketUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroTrinketUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if m.Lock {
		dAtA[i] = 0x10
		i++
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_HeroTrinketUp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroTrinketUp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroTrinketTransformGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroTrinketTransformGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroTrinketTransformGen_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroTrinketTransformGen_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Props) > 0 {
		dAtA11 := make([]byte, len(m.Props)*10)
		var j10 int
		for _, num1 := range m.Props {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	return i, nil
}

func (m *C_HeroTrinketTransformCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroTrinketTransformCommit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_HeroTrinketTransformCommit_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroTrinketTransformCommit_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroBagBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroBagBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_HeroBagBuy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroBagBuy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_HeroInherit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroInherit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_HeroInherit_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroInherit_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Rewards.Size()))
		n12, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *C_HeroSetSkin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_HeroSetSkin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Seq))
	}
	if m.Skin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.Skin))
	}
	return i, nil
}

func (m *GS_HeroSetSkin_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_HeroSetSkin_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_12_3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintCGs_12_3Hero(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		l = 0
		for _, e := range m.Seqs {
			l += sovCGs_12_3Hero(uint64(e))
		}
		n += 1 + sovCGs_12_3Hero(uint64(l)) + l
	}
	return n
}

func (m *GS_HeroUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroLevelUp) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if m.N != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.N))
	}
	return n
}

func (m *GS_HeroLevelUp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroStarUp) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if len(m.Cost) > 0 {
		for _, e := range m.Cost {
			l = e.Size()
			n += 1 + l + sovCGs_12_3Hero(uint64(l))
		}
	}
	return n
}

func (m *GS_HeroStarUp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroLock) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *GS_HeroLock_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroReset) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroReset_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroDecompose) Size() (n int) {
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		l = 0
		for _, e := range m.Seqs {
			l += sovCGs_12_3Hero(uint64(e))
		}
		n += 1 + sovCGs_12_3Hero(uint64(l)) + l
	}
	return n
}

func (m *GS_HeroDecompose_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroChange) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroChange_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.ChangeId != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ChangeId))
	}
	return n
}

func (m *C_HeroChangeCancel) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroChangeCancel_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroChangeApply) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroChangeApply_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroTrinketUnlock) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroTrinketUnlock_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroTrinketUp) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *GS_HeroTrinketUp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroTrinketTransformGen) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroTrinketTransformGen_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if len(m.Props) > 0 {
		l = 0
		for _, e := range m.Props {
			l += sovCGs_12_3Hero(uint64(e))
		}
		n += 1 + sovCGs_12_3Hero(uint64(l)) + l
	}
	return n
}

func (m *C_HeroTrinketTransformCommit) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	return n
}

func (m *GS_HeroTrinketTransformCommit_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroBagBuy) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_HeroBagBuy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_HeroInherit) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Id))
	}
	return n
}

func (m *GS_HeroInherit_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_12_3Hero(uint64(l))
	}
	return n
}

func (m *C_HeroSetSkin) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Seq))
	}
	if m.Skin != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.Skin))
	}
	return n
}

func (m *GS_HeroSetSkin_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_12_3Hero(uint64(m.ErrorCode))
	}
	return n
}

func sovCGs_12_3Hero(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_12_3Hero(x uint64) (n int) {
	return sovCGs_12_3Hero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Seqs = append(m.Seqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_12_3Hero
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_3Hero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Seqs = append(m.Seqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &Hero{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroLevelUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroLevelUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroLevelUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroLevelUp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroLevelUp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroLevelUp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroStarUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroStarUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroStarUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = append(m.Cost, &HeroArray{})
			if err := m.Cost[len(m.Cost)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroStarUp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroStarUp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroStarUp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroLock_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroLock_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroLock_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroReset_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroReset_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroReset_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroDecompose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroDecompose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroDecompose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Seqs = append(m.Seqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_12_3Hero
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_3Hero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Seqs = append(m.Seqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroDecompose_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroDecompose_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroDecompose_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroChange_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroChange_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroChange_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeId", wireType)
			}
			m.ChangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroChangeCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroChangeCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroChangeCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroChangeCancel_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroChangeCancel_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroChangeCancel_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroChangeApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroChangeApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroChangeApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroChangeApply_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroChangeApply_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroChangeApply_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &Hero{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroTrinketUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroTrinketUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroTrinketUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroTrinketUnlock_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroTrinketUnlock_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroTrinketUnlock_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroTrinketUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroTrinketUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroTrinketUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroTrinketUp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroTrinketUp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroTrinketUp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroTrinketTransformGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroTrinketTransformGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroTrinketTransformGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroTrinketTransformGen_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroTrinketTransformGen_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroTrinketTransformGen_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Props = append(m.Props, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_12_3Hero
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_12_3Hero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Props = append(m.Props, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Props", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroTrinketTransformCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroTrinketTransformCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroTrinketTransformCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroTrinketTransformCommit_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroTrinketTransformCommit_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroTrinketTransformCommit_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroBagBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroBagBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroBagBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroBagBuy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroBagBuy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroBagBuy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroInherit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroInherit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroInherit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroInherit_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroInherit_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroInherit_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_HeroSetSkin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_HeroSetSkin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_HeroSetSkin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			m.Skin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_HeroSetSkin_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_HeroSetSkin_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_HeroSetSkin_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_12_3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_12_3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_12_3Hero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_12_3Hero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_12_3Hero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_12_3Hero
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_12_3Hero
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_12_3Hero(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_12_3Hero = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_12_3Hero   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.12-3.hero.proto", fileDescriptorCGs_12_3Hero) }

var fileDescriptorCGs_12_3Hero = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x51, 0x4f, 0x13, 0x41,
	0x10, 0xe6, 0x7a, 0xad, 0xc2, 0x14, 0x0a, 0xae, 0xc5, 0x54, 0x82, 0xa5, 0xd9, 0x04, 0xec, 0x0b,
	0x47, 0x39, 0x82, 0x3e, 0x1a, 0x38, 0x0c, 0x12, 0x0d, 0x31, 0x7b, 0xa0, 0xc6, 0x17, 0x72, 0xb6,
	0xeb, 0x41, 0xe8, 0xdd, 0x1e, 0xbb, 0x87, 0xa6, 0xff, 0xc2, 0x9f, 0xc5, 0xa3, 0x3f, 0x41, 0xeb,
	0x1f, 0x31, 0xb7, 0xbb, 0x77, 0xb6, 0x71, 0xcd, 0xf9, 0xd0, 0xb7, 0xdd, 0xd9, 0x6f, 0xe6, 0xfb,
	0x66, 0x76, 0x66, 0x17, 0x9a, 0xfd, 0x8b, 0x50, 0x38, 0xbb, 0xee, 0xf6, 0x9e, 0x73, 0x49, 0x39,
	0x73, 0x12, 0xce, 0x52, 0x86, 0xec, 0x48, 0x84, 0x6b, 0x10, 0xb2, 0x50, 0x1b, 0xd6, 0x56, 0x25,
	0xac, 0xd7, 0x73, 0x44, 0xca, 0x6f, 0xfb, 0xa9, 0x50, 0x66, 0xbc, 0x01, 0x0b, 0xaf, 0x28, 0x67,
	0x07, 0x9c, 0x07, 0x23, 0x84, 0xa0, 0xea, 0xd3, 0x1b, 0xd1, 0xb2, 0x3a, 0x76, 0xd7, 0x26, 0x72,
	0x8d, 0x1d, 0x58, 0x3a, 0xf6, 0x2f, 0x32, 0xcc, 0x79, 0x32, 0x08, 0x52, 0x8a, 0x9e, 0x40, 0x35,
	0xdb, 0xb5, 0xac, 0x8e, 0xd5, 0xad, 0xbb, 0x0b, 0x4e, 0x24, 0x42, 0x27, 0x33, 0x10, 0x69, 0xc6,
	0x3b, 0xb0, 0xe4, 0x49, 0xf8, 0x1b, 0xfa, 0x85, 0x0e, 0xcf, 0x13, 0xb4, 0x02, 0xb6, 0x4f, 0x6f,
	0x24, 0xdc, 0x26, 0xd9, 0x12, 0x2d, 0x82, 0x75, 0xda, 0xaa, 0x74, 0xac, 0x6e, 0x8d, 0x58, 0xa7,
	0xb8, 0x07, 0x2b, 0x9a, 0x40, 0x7b, 0x5c, 0x10, 0xb4, 0x0e, 0x0b, 0x2f, 0x39, 0x67, 0xdc, 0x63,
	0x03, 0x2a, 0x3d, 0x6b, 0xe4, 0x8f, 0x01, 0x1f, 0xc1, 0xa2, 0xa2, 0xf0, 0xd3, 0x80, 0x1b, 0x19,
	0x30, 0x54, 0x3d, 0x26, 0xd2, 0x56, 0xa5, 0x63, 0x77, 0xeb, 0x6e, 0xa3, 0xd0, 0x28, 0xd3, 0x24,
	0xf2, 0x0c, 0xbf, 0x87, 0x65, 0xcd, 0xab, 0xc2, 0x94, 0xd1, 0xa2, 0x2d, 0xb8, 0x4f, 0xe8, 0xd7,
	0x80, 0x0f, 0x84, 0x14, 0x5f, 0x77, 0x17, 0x65, 0x5c, 0x6d, 0x23, 0xf9, 0x21, 0x76, 0x01, 0x74,
	0x05, 0x58, 0xff, 0xda, 0x20, 0x0e, 0x41, 0x35, 0x3b, 0x91, 0x41, 0xe6, 0x89, 0x5c, 0xe3, 0xed,
	0xa2, 0xca, 0xd9, 0xb6, 0xb4, 0x02, 0x1b, 0x50, 0x57, 0x14, 0x84, 0x0a, 0x9a, 0xfe, 0xcd, 0x81,
	0xdf, 0x41, 0x43, 0xc7, 0x93, 0x88, 0x99, 0xe5, 0xb6, 0x09, 0xcb, 0x8a, 0xf8, 0x88, 0xf6, 0x59,
	0x94, 0x30, 0x41, 0x8d, 0x4d, 0xf3, 0x11, 0x90, 0xa6, 0x2f, 0x70, 0x33, 0x93, 0xd0, 0xc9, 0x6f,
	0xdf, 0xbb, 0x0c, 0xe2, 0x90, 0x1a, 0x92, 0x7f, 0x5d, 0xdc, 0xac, 0x82, 0x94, 0x52, 0xaf, 0xc1,
	0xbc, 0x42, 0x9e, 0x0c, 0x74, 0x5f, 0x16, 0x7b, 0xbc, 0x05, 0x68, 0x92, 0xce, 0x0b, 0xe2, 0x3e,
	0x1d, 0x1a, 0x48, 0xf7, 0x61, 0x75, 0x8a, 0x54, 0x01, 0x4b, 0x6f, 0x72, 0x13, 0x1e, 0x4c, 0x86,
	0x3f, 0x48, 0x92, 0xe1, 0xc8, 0x10, 0xdd, 0x87, 0xe6, 0x54, 0x74, 0x89, 0x2b, 0xcd, 0x2b, 0x1f,
	0xd5, 0x8a, 0x79, 0x54, 0x9f, 0xc2, 0x43, 0xc5, 0x7d, 0xc6, 0xaf, 0xe2, 0x6b, 0x9a, 0x9e, 0xc7,
	0x43, 0x63, 0xc7, 0xe2, 0x67, 0xf0, 0x48, 0xb3, 0x4f, 0x21, 0x4b, 0x93, 0x7b, 0x9e, 0x77, 0x4b,
	0xee, 0x96, 0xfc, 0xe7, 0x38, 0xb8, 0x45, 0xff, 0x14, 0x9e, 0xa5, 0x64, 0xdb, 0xf0, 0x78, 0x8a,
	0xec, 0x8c, 0x07, 0xb1, 0xf8, 0xcc, 0x78, 0x74, 0x4c, 0x63, 0x43, 0x4e, 0x04, 0xd6, 0xa7, 0x29,
	0x26, 0xf1, 0xa5, 0x95, 0x6d, 0x42, 0xed, 0x2d, 0x67, 0x89, 0x90, 0x2f, 0x4c, 0x8d, 0xa8, 0x0d,
	0xee, 0xc1, 0xba, 0x59, 0x82, 0xc7, 0xa2, 0xe8, 0xca, 0x34, 0xa7, 0x2f, 0x60, 0xe3, 0x1f, 0x2a,
	0x94, 0x4b, 0x69, 0xd6, 0x8d, 0x7c, 0x1a, 0x0e, 0x83, 0xf0, 0xf0, 0x76, 0x84, 0x77, 0x8a, 0xde,
	0x57, 0x86, 0xd2, 0x00, 0xbb, 0xf9, 0x7b, 0x7d, 0x12, 0x5f, 0x52, 0x6e, 0x12, 0x89, 0x1a, 0x50,
	0x29, 0x06, 0xa3, 0x72, 0x32, 0xc0, 0x1f, 0x8a, 0x17, 0x5b, 0xfb, 0xcc, 0x6c, 0xb6, 0xf7, 0x73,
	0x31, 0x3e, 0x4d, 0xfd, 0xeb, 0xab, 0xd8, 0xdc, 0x2e, 0xd9, 0x89, 0x96, 0x23, 0xd7, 0x13, 0x5f,
	0x88, 0xf6, 0x2b, 0x13, 0x74, 0xd8, 0xbc, 0xfb, 0xd9, 0x9e, 0xbb, 0x1b, 0xb7, 0xad, 0xef, 0xe3,
	0xb6, 0xf5, 0x63, 0xdc, 0xb6, 0xbe, 0xfd, 0x6a, 0xcf, 0x7d, 0xba, 0x27, 0xff, 0xc4, 0xbd, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x79, 0x4b, 0x31, 0x53, 0x07, 0x00, 0x00,
}
