// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.57.ladder.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LadderData struct {
	Stage int32 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2   int64 `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *LadderData) Reset()                    { *m = LadderData{} }
func (m *LadderData) String() string            { return proto.CompactTextString(m) }
func (*LadderData) ProtoMessage()               {}
func (*LadderData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{0} }

type LadderPlayerInfo struct {
	Info *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=Info" json:"Info,omitempty"`
	Rank int32             `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (m *LadderPlayerInfo) Reset()                    { *m = LadderPlayerInfo{} }
func (m *LadderPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*LadderPlayerInfo) ProtoMessage()               {}
func (*LadderPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{1} }

type LadderReplayRec struct {
	ReplayId string            `protobuf:"bytes,1,opt,name=ReplayId,proto3" json:"ReplayId,omitempty"`
	Attacker *PlayerSimpleInfo `protobuf:"bytes,2,opt,name=Attacker" json:"Attacker,omitempty"`
	Winner   int32             `protobuf:"varint,3,opt,name=Winner,proto3" json:"Winner,omitempty"`
	Ts       int64             `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`
	RkFrom   int32             `protobuf:"varint,5,opt,name=RkFrom,proto3" json:"RkFrom,omitempty"`
	RkTo     int32             `protobuf:"varint,6,opt,name=RkTo,proto3" json:"RkTo,omitempty"`
}

func (m *LadderReplayRec) Reset()                    { *m = LadderReplayRec{} }
func (m *LadderReplayRec) String() string            { return proto.CompactTextString(m) }
func (*LadderReplayRec) ProtoMessage()               {}
func (*LadderReplayRec) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{2} }

type GS_LadderStageChange struct {
	Stage int32 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	Ts2   int64 `protobuf:"varint,2,opt,name=Ts2,proto3" json:"Ts2,omitempty"`
}

func (m *GS_LadderStageChange) Reset()                    { *m = GS_LadderStageChange{} }
func (m *GS_LadderStageChange) String() string            { return proto.CompactTextString(m) }
func (*GS_LadderStageChange) ProtoMessage()               {}
func (*GS_LadderStageChange) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{3} }

// 拉取概要信息
type C_LadderGetSummary struct {
}

func (m *C_LadderGetSummary) Reset()                    { *m = C_LadderGetSummary{} }
func (m *C_LadderGetSummary) String() string            { return proto.CompactTextString(m) }
func (*C_LadderGetSummary) ProtoMessage()               {}
func (*C_LadderGetSummary) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{4} }

type GS_LadderGetSummary_R struct {
	SelfRank int32 `protobuf:"varint,1,opt,name=SelfRank,proto3" json:"SelfRank,omitempty"`
}

func (m *GS_LadderGetSummary_R) Reset()         { *m = GS_LadderGetSummary_R{} }
func (m *GS_LadderGetSummary_R) String() string { return proto.CompactTextString(m) }
func (*GS_LadderGetSummary_R) ProtoMessage()    {}
func (*GS_LadderGetSummary_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_57Ladder, []int{5}
}

// 匹配
type C_LadderMatch struct {
}

func (m *C_LadderMatch) Reset()                    { *m = C_LadderMatch{} }
func (m *C_LadderMatch) String() string            { return proto.CompactTextString(m) }
func (*C_LadderMatch) ProtoMessage()               {}
func (*C_LadderMatch) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{6} }

type GS_LadderMatch_R struct {
	ErrorCode int32               `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Plrs      []*LadderPlayerInfo `protobuf:"bytes,2,rep,name=Plrs" json:"Plrs,omitempty"`
}

func (m *GS_LadderMatch_R) Reset()                    { *m = GS_LadderMatch_R{} }
func (m *GS_LadderMatch_R) String() string            { return proto.CompactTextString(m) }
func (*GS_LadderMatch_R) ProtoMessage()               {}
func (*GS_LadderMatch_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{7} }

// 打架
type C_LadderFight struct {
	Team    *TeamFormation `protobuf:"bytes,1,opt,name=Team" json:"Team,omitempty"`
	TarId   string         `protobuf:"bytes,2,opt,name=TarId,proto3" json:"TarId,omitempty"`
	TarRank int32          `protobuf:"varint,3,opt,name=TarRank,proto3" json:"TarRank,omitempty"`
}

func (m *C_LadderFight) Reset()                    { *m = C_LadderFight{} }
func (m *C_LadderFight) String() string            { return proto.CompactTextString(m) }
func (*C_LadderFight) ProtoMessage()               {}
func (*C_LadderFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{8} }

type GS_LadderFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_LadderFight_R) Reset()                    { *m = GS_LadderFight_R{} }
func (m *GS_LadderFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_LadderFight_R) ProtoMessage()               {}
func (*GS_LadderFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{9} }

// 拉取排行榜
type C_LadderGetRank struct {
}

func (m *C_LadderGetRank) Reset()                    { *m = C_LadderGetRank{} }
func (m *C_LadderGetRank) String() string            { return proto.CompactTextString(m) }
func (*C_LadderGetRank) ProtoMessage()               {}
func (*C_LadderGetRank) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{10} }

type GS_LadderGetRank_R struct {
	Records []*LadderPlayerInfo `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_LadderGetRank_R) Reset()                    { *m = GS_LadderGetRank_R{} }
func (m *GS_LadderGetRank_R) String() string            { return proto.CompactTextString(m) }
func (*GS_LadderGetRank_R) ProtoMessage()               {}
func (*GS_LadderGetRank_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{11} }

// 拉取录像列表
type C_LadderGetReplayList struct {
}

func (m *C_LadderGetReplayList) Reset()         { *m = C_LadderGetReplayList{} }
func (m *C_LadderGetReplayList) String() string { return proto.CompactTextString(m) }
func (*C_LadderGetReplayList) ProtoMessage()    {}
func (*C_LadderGetReplayList) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_57Ladder, []int{12}
}

type GS_LadderGetReplayList_R struct {
	Records []*LadderReplayRec `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *GS_LadderGetReplayList_R) Reset()         { *m = GS_LadderGetReplayList_R{} }
func (m *GS_LadderGetReplayList_R) String() string { return proto.CompactTextString(m) }
func (*GS_LadderGetReplayList_R) ProtoMessage()    {}
func (*GS_LadderGetReplayList_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_57Ladder, []int{13}
}

// 拉取回放数据
type C_LadderGetReplay struct {
	ReplayId string `protobuf:"bytes,1,opt,name=ReplayId,proto3" json:"ReplayId,omitempty"`
}

func (m *C_LadderGetReplay) Reset()                    { *m = C_LadderGetReplay{} }
func (m *C_LadderGetReplay) String() string            { return proto.CompactTextString(m) }
func (*C_LadderGetReplay) ProtoMessage()               {}
func (*C_LadderGetReplay) Descriptor() ([]byte, []int) { return fileDescriptorCGs_57Ladder, []int{14} }

type GS_LadderGetReplay_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
}

func (m *GS_LadderGetReplay_R) Reset()         { *m = GS_LadderGetReplay_R{} }
func (m *GS_LadderGetReplay_R) String() string { return proto.CompactTextString(m) }
func (*GS_LadderGetReplay_R) ProtoMessage()    {}
func (*GS_LadderGetReplay_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_57Ladder, []int{15}
}

func init() {
	proto.RegisterType((*LadderData)(nil), "msg.LadderData")
	proto.RegisterType((*LadderPlayerInfo)(nil), "msg.LadderPlayerInfo")
	proto.RegisterType((*LadderReplayRec)(nil), "msg.LadderReplayRec")
	proto.RegisterType((*GS_LadderStageChange)(nil), "msg.GS_LadderStageChange")
	proto.RegisterType((*C_LadderGetSummary)(nil), "msg.C_LadderGetSummary")
	proto.RegisterType((*GS_LadderGetSummary_R)(nil), "msg.GS_LadderGetSummary_R")
	proto.RegisterType((*C_LadderMatch)(nil), "msg.C_LadderMatch")
	proto.RegisterType((*GS_LadderMatch_R)(nil), "msg.GS_LadderMatch_R")
	proto.RegisterType((*C_LadderFight)(nil), "msg.C_LadderFight")
	proto.RegisterType((*GS_LadderFight_R)(nil), "msg.GS_LadderFight_R")
	proto.RegisterType((*C_LadderGetRank)(nil), "msg.C_LadderGetRank")
	proto.RegisterType((*GS_LadderGetRank_R)(nil), "msg.GS_LadderGetRank_R")
	proto.RegisterType((*C_LadderGetReplayList)(nil), "msg.C_LadderGetReplayList")
	proto.RegisterType((*GS_LadderGetReplayList_R)(nil), "msg.GS_LadderGetReplayList_R")
	proto.RegisterType((*C_LadderGetReplay)(nil), "msg.C_LadderGetReplay")
	proto.RegisterType((*GS_LadderGetReplay_R)(nil), "msg.GS_LadderGetReplay_R")
}
func (m *LadderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LadderData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *LadderPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LadderPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *LadderReplayRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LadderReplayRec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplayId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(len(m.ReplayId)))
		i += copy(dAtA[i:], m.ReplayId)
	}
	if m.Attacker != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Attacker.Size()))
		n2, err := m.Attacker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Winner != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Winner))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Ts))
	}
	if m.RkFrom != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.RkFrom))
	}
	if m.RkTo != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.RkTo))
	}
	return i, nil
}

func (m *GS_LadderStageChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderStageChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Ts2))
	}
	return i, nil
}

func (m *C_LadderGetSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderGetSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_LadderGetSummary_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderGetSummary_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfRank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.SelfRank))
	}
	return i, nil
}

func (m *C_LadderMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_LadderMatch_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderMatch_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Plrs) > 0 {
		for _, msg := range m.Plrs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCGs_57Ladder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_LadderFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Team.Size()))
		n3, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.TarId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(len(m.TarId)))
		i += copy(dAtA[i:], m.TarId)
	}
	if m.TarRank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.TarRank))
	}
	return i, nil
}

func (m *GS_LadderFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Replay.Size()))
		n4, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Rewards.Size()))
		n5, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C_LadderGetRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderGetRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_LadderGetRank_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderGetRank_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_57Ladder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_LadderGetReplayList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderGetReplayList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_LadderGetReplayList_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderGetReplayList_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_57Ladder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_LadderGetReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_LadderGetReplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplayId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(len(m.ReplayId)))
		i += copy(dAtA[i:], m.ReplayId)
	}
	return i, nil
}

func (m *GS_LadderGetReplay_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_LadderGetReplay_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_57Ladder(dAtA, i, uint64(m.Replay.Size()))
		n6, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintCGs_57Ladder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LadderData) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Ts2))
	}
	return n
}

func (m *LadderPlayerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Rank))
	}
	return n
}

func (m *LadderReplayRec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReplayId)
	if l > 0 {
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	if m.Attacker != nil {
		l = m.Attacker.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	if m.Winner != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Winner))
	}
	if m.Ts != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Ts))
	}
	if m.RkFrom != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.RkFrom))
	}
	if m.RkTo != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.RkTo))
	}
	return n
}

func (m *GS_LadderStageChange) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Stage))
	}
	if m.Ts2 != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.Ts2))
	}
	return n
}

func (m *C_LadderGetSummary) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_LadderGetSummary_R) Size() (n int) {
	var l int
	_ = l
	if m.SelfRank != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.SelfRank))
	}
	return n
}

func (m *C_LadderMatch) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_LadderMatch_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.ErrorCode))
	}
	if len(m.Plrs) > 0 {
		for _, e := range m.Plrs {
			l = e.Size()
			n += 1 + l + sovCGs_57Ladder(uint64(l))
		}
	}
	return n
}

func (m *C_LadderFight) Size() (n int) {
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	l = len(m.TarId)
	if l > 0 {
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	if m.TarRank != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.TarRank))
	}
	return n
}

func (m *GS_LadderFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	return n
}

func (m *C_LadderGetRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_LadderGetRank_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_57Ladder(uint64(l))
		}
	}
	return n
}

func (m *C_LadderGetReplayList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_LadderGetReplayList_R) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCGs_57Ladder(uint64(l))
		}
	}
	return n
}

func (m *C_LadderGetReplay) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReplayId)
	if l > 0 {
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	return n
}

func (m *GS_LadderGetReplay_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_57Ladder(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_57Ladder(uint64(l))
	}
	return n
}

func sovCGs_57Ladder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_57Ladder(x uint64) (n int) {
	return sovCGs_57Ladder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LadderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LadderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LadderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LadderPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LadderPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LadderPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PlayerSimpleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LadderReplayRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LadderReplayRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LadderReplayRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacker == nil {
				m.Attacker = &PlayerSimpleInfo{}
			}
			if err := m.Attacker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			m.Winner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Winner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RkFrom", wireType)
			}
			m.RkFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RkFrom |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RkTo", wireType)
			}
			m.RkTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RkTo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderStageChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderStageChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderStageChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts2", wireType)
			}
			m.Ts2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderGetSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderGetSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderGetSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderGetSummary_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderGetSummary_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderGetSummary_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRank", wireType)
			}
			m.SelfRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderMatch_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderMatch_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderMatch_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plrs = append(m.Plrs, &LadderPlayerInfo{})
			if err := m.Plrs[len(m.Plrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &TeamFormation{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRank", wireType)
			}
			m.TarRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TarRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderGetRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderGetRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderGetRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderGetRank_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderGetRank_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderGetRank_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &LadderPlayerInfo{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderGetReplayList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderGetReplayList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderGetReplayList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderGetReplayList_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderGetReplayList_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderGetReplayList_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &LadderReplayRec{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_LadderGetReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_LadderGetReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_LadderGetReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_LadderGetReplay_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_LadderGetReplay_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_LadderGetReplay_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_57Ladder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_57Ladder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_57Ladder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_57Ladder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_57Ladder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_57Ladder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_57Ladder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_57Ladder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_57Ladder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_57Ladder   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.57.ladder.proto", fileDescriptorCGs_57Ladder) }

var fileDescriptorCGs_57Ladder = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xae, 0xf3, 0xaf, 0xed, 0xf4, 0xf7, 0xa3, 0xed, 0xca, 0x01, 0x2b, 0x42, 0x51, 0xb4, 0x87,
	0xaa, 0x5c, 0xdc, 0x92, 0x82, 0xb8, 0x21, 0xd1, 0xd0, 0x54, 0x41, 0x45, 0x2a, 0x1b, 0x4b, 0x1c,
	0x38, 0x58, 0x8b, 0xbd, 0x75, 0xa2, 0xd8, 0xde, 0x68, 0xbd, 0x15, 0xca, 0x99, 0x17, 0xe0, 0x61,
	0x78, 0x88, 0x1e, 0x79, 0x04, 0x08, 0x2f, 0x82, 0x3c, 0xeb, 0x38, 0xa6, 0x88, 0xaa, 0x07, 0x4e,
	0xf1, 0xcc, 0x7c, 0xf3, 0x7d, 0xb3, 0xdf, 0xec, 0x06, 0xec, 0xc0, 0x8f, 0x32, 0xf7, 0xf9, 0x0b,
	0x37, 0xe6, 0x61, 0x28, 0x94, 0x3b, 0x57, 0x52, 0x4b, 0x52, 0x4f, 0xb2, 0xa8, 0x03, 0x91, 0x8c,
	0xa4, 0x49, 0x74, 0xda, 0x08, 0x3b, 0x3e, 0x76, 0x33, 0xad, 0xae, 0x03, 0x9d, 0x99, 0x34, 0x7d,
	0x06, 0x70, 0x81, 0x7d, 0xaf, 0xb9, 0xe6, 0xc4, 0x86, 0xe6, 0x58, 0xf3, 0x48, 0x38, 0x56, 0xcf,
	0x3a, 0x6c, 0x32, 0x13, 0x90, 0x3d, 0xa8, 0x7b, 0x59, 0xdf, 0xa9, 0xf5, 0xac, 0xc3, 0x3a, 0xcb,
	0x3f, 0xe9, 0x3b, 0xd8, 0x33, 0x5d, 0x97, 0x31, 0x5f, 0x08, 0x35, 0x4a, 0xaf, 0x24, 0x79, 0x02,
	0x8d, 0xfc, 0x17, 0x5b, 0x77, 0xfa, 0x6d, 0x37, 0xc9, 0x22, 0xd7, 0x94, 0xc7, 0xd3, 0x64, 0x1e,
	0x8b, 0xbc, 0xc8, 0x10, 0x42, 0x08, 0x34, 0x18, 0x4f, 0x67, 0xc8, 0xd8, 0x64, 0xf8, 0x4d, 0xbf,
	0x5a, 0xb0, 0x6b, 0x38, 0x99, 0x98, 0xc7, 0x7c, 0xc1, 0x44, 0x40, 0x3a, 0xb0, 0x65, 0x82, 0x51,
	0x88, 0xb4, 0xdb, 0xac, 0x8c, 0xc9, 0x53, 0xd8, 0x7a, 0xa5, 0x35, 0x0f, 0x66, 0x42, 0x21, 0xcf,
	0x5f, 0x25, 0x4b, 0x18, 0x79, 0x08, 0xad, 0xf7, 0xd3, 0x34, 0x15, 0xca, 0xa9, 0xa3, 0x70, 0x11,
	0x91, 0x07, 0x50, 0xf3, 0x32, 0xa7, 0x81, 0xc7, 0xab, 0x79, 0x59, 0x8e, 0x63, 0xb3, 0xa1, 0x92,
	0x89, 0xd3, 0x34, 0x38, 0x13, 0xe1, 0xd8, 0x33, 0x4f, 0x3a, 0xad, 0x62, 0xec, 0x99, 0x27, 0xe9,
	0x4b, 0xb0, 0xcf, 0xc7, 0xbe, 0x19, 0x1c, 0xdd, 0x1a, 0x4c, 0x78, 0x1a, 0x89, 0x7b, 0x3b, 0x69,
	0x03, 0x19, 0x14, 0xed, 0xe7, 0x42, 0x8f, 0xaf, 0x93, 0x84, 0xab, 0x05, 0x3d, 0x81, 0x76, 0xc9,
	0xba, 0x4e, 0xfb, 0x2c, 0x77, 0x64, 0x2c, 0xe2, 0x2b, 0x74, 0xcf, 0x30, 0x97, 0x31, 0xdd, 0x85,
	0xff, 0x57, 0x54, 0x6f, 0xb9, 0x0e, 0x26, 0xf4, 0x03, 0xec, 0x95, 0x2c, 0x98, 0xf1, 0x19, 0x79,
	0x0c, 0xdb, 0x67, 0x4a, 0x49, 0x35, 0x90, 0xe1, 0x6a, 0xb6, 0x75, 0x22, 0xdf, 0xe1, 0x65, 0xac,
	0x32, 0xa7, 0xd6, 0xab, 0x97, 0x86, 0xde, 0x5e, 0x34, 0x43, 0x08, 0x8d, 0xd6, 0x6a, 0xc3, 0x69,
	0x34, 0xd1, 0xe4, 0x00, 0x1a, 0x9e, 0xe0, 0x49, 0xb1, 0x7f, 0x82, 0xbd, 0x79, 0x62, 0x28, 0x55,
	0xc2, 0xf5, 0x54, 0xa6, 0x0c, 0xeb, 0xb9, 0x33, 0x1e, 0x57, 0xa3, 0x10, 0x5d, 0xd8, 0x66, 0x26,
	0x20, 0x0e, 0x6c, 0x7a, 0x5c, 0xe1, 0xb9, 0xcc, 0x72, 0x56, 0x21, 0xfd, 0x6c, 0x55, 0x8e, 0x81,
	0x52, 0xf7, 0x38, 0x46, 0xcb, 0xdc, 0x93, 0xe2, 0x66, 0xec, 0xe3, 0x30, 0xa7, 0x5c, 0xeb, 0x58,
	0x14, 0xb7, 0xab, 0x00, 0x90, 0x03, 0xd8, 0x64, 0xe2, 0x13, 0x57, 0x61, 0x86, 0xba, 0x3b, 0xfd,
	0xff, 0x10, 0x5b, 0xe4, 0xd8, 0xaa, 0x48, 0xf7, 0x61, 0xb7, 0xb2, 0x27, 0x1c, 0xec, 0x0c, 0x48,
	0x75, 0x49, 0x79, 0xce, 0x67, 0xe4, 0x28, 0x27, 0x0c, 0x64, 0x4e, 0x68, 0xdd, 0xe5, 0xe2, 0x0a,
	0x45, 0x1f, 0x41, 0xbb, 0xca, 0x8c, 0x63, 0x5d, 0x4c, 0x33, 0x4d, 0xdf, 0x80, 0xf3, 0x1b, 0x7f,
	0x59, 0xf1, 0x19, 0x71, 0x6f, 0xab, 0xd8, 0x15, 0x95, 0xf2, 0x01, 0xad, 0x45, 0x8e, 0x60, 0xff,
	0x0f, 0x91, 0xbb, 0x9e, 0x17, 0xf5, 0x2b, 0xf7, 0xba, 0xec, 0xf8, 0x87, 0xc6, 0x9f, 0xda, 0x37,
	0x3f, 0xba, 0x1b, 0x37, 0xcb, 0xae, 0xf5, 0x6d, 0xd9, 0xb5, 0xbe, 0x2f, 0xbb, 0xd6, 0x97, 0x9f,
	0xdd, 0x8d, 0x8f, 0x2d, 0xfc, 0x57, 0x3a, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x41, 0x2a, 0xfe,
	0x31, 0xd5, 0x04, 0x00, 0x00,
}
