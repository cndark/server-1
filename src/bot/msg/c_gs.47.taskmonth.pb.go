// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.47.taskmonth.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 每月任务
type TaskMonthData struct {
	Items []*TaskMonthItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (m *TaskMonthData) Reset()                    { *m = TaskMonthData{} }
func (m *TaskMonthData) String() string            { return proto.CompactTextString(m) }
func (*TaskMonthData) ProtoMessage()               {}
func (*TaskMonthData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_47Taskmonth, []int{0} }

type TaskMonthItem struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
	Fin bool    `protobuf:"varint,3,opt,name=Fin,proto3" json:"Fin,omitempty"`
	T   bool    `protobuf:"varint,4,opt,name=T,proto3" json:"T,omitempty"`
}

func (m *TaskMonthItem) Reset()                    { *m = TaskMonthItem{} }
func (m *TaskMonthItem) String() string            { return proto.CompactTextString(m) }
func (*TaskMonthItem) ProtoMessage()               {}
func (*TaskMonthItem) Descriptor() ([]byte, []int) { return fileDescriptorCGs_47Taskmonth, []int{1} }

type GS_TaskMonthValueChanged struct {
	Id  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Val float64 `protobuf:"fixed64,3,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *GS_TaskMonthValueChanged) Reset()         { *m = GS_TaskMonthValueChanged{} }
func (m *GS_TaskMonthValueChanged) String() string { return proto.CompactTextString(m) }
func (*GS_TaskMonthValueChanged) ProtoMessage()    {}
func (*GS_TaskMonthValueChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_47Taskmonth, []int{2}
}

type GS_TaskMonthItemCompleted struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GS_TaskMonthItemCompleted) Reset()         { *m = GS_TaskMonthItemCompleted{} }
func (m *GS_TaskMonthItemCompleted) String() string { return proto.CompactTextString(m) }
func (*GS_TaskMonthItemCompleted) ProtoMessage()    {}
func (*GS_TaskMonthItemCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_47Taskmonth, []int{3}
}

type C_TaskMonthInfo struct {
}

func (m *C_TaskMonthInfo) Reset()                    { *m = C_TaskMonthInfo{} }
func (m *C_TaskMonthInfo) String() string            { return proto.CompactTextString(m) }
func (*C_TaskMonthInfo) ProtoMessage()               {}
func (*C_TaskMonthInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_47Taskmonth, []int{4} }

type GS_TaskMonthInfo_R struct {
	Data *TaskMonthData `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *GS_TaskMonthInfo_R) Reset()         { *m = GS_TaskMonthInfo_R{} }
func (m *GS_TaskMonthInfo_R) String() string { return proto.CompactTextString(m) }
func (*GS_TaskMonthInfo_R) ProtoMessage()    {}
func (*GS_TaskMonthInfo_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_47Taskmonth, []int{5}
}

type C_TaskMonthTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_TaskMonthTake) Reset()                    { *m = C_TaskMonthTake{} }
func (m *C_TaskMonthTake) String() string            { return proto.CompactTextString(m) }
func (*C_TaskMonthTake) ProtoMessage()               {}
func (*C_TaskMonthTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_47Taskmonth, []int{6} }

type GS_TaskMonthTask_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Id        int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TaskMonthTask_R) Reset()         { *m = GS_TaskMonthTask_R{} }
func (m *GS_TaskMonthTask_R) String() string { return proto.CompactTextString(m) }
func (*GS_TaskMonthTask_R) ProtoMessage()    {}
func (*GS_TaskMonthTask_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_47Taskmonth, []int{7}
}

func init() {
	proto.RegisterType((*TaskMonthData)(nil), "msg.TaskMonthData")
	proto.RegisterType((*TaskMonthItem)(nil), "msg.TaskMonthItem")
	proto.RegisterType((*GS_TaskMonthValueChanged)(nil), "msg.GS_TaskMonthValueChanged")
	proto.RegisterType((*GS_TaskMonthItemCompleted)(nil), "msg.GS_TaskMonthItemCompleted")
	proto.RegisterType((*C_TaskMonthInfo)(nil), "msg.C_TaskMonthInfo")
	proto.RegisterType((*GS_TaskMonthInfo_R)(nil), "msg.GS_TaskMonthInfo_R")
	proto.RegisterType((*C_TaskMonthTake)(nil), "msg.C_TaskMonthTake")
	proto.RegisterType((*GS_TaskMonthTask_R)(nil), "msg.GS_TaskMonthTask_R")
}
func (m *TaskMonthData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMonthData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TaskMonthItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMonthItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	if m.Fin {
		dAtA[i] = 0x18
		i++
		if m.Fin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.T {
		dAtA[i] = 0x20
		i++
		if m.T {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_TaskMonthValueChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskMonthValueChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Id))
	}
	if m.Val != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	return i, nil
}

func (m *GS_TaskMonthItemCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskMonthItemCompleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C_TaskMonthInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TaskMonthInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_TaskMonthInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskMonthInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_TaskMonthTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TaskMonthTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_TaskMonthTask_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TaskMonthTask_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Id))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_47Taskmonth(dAtA, i, uint64(m.Rewards.Size()))
		n2, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintCGs_47Taskmonth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskMonthData) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_47Taskmonth(uint64(l))
		}
	}
	return n
}

func (m *TaskMonthItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	if m.Fin {
		n += 2
	}
	if m.T {
		n += 2
	}
	return n
}

func (m *GS_TaskMonthValueChanged) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.Id))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func (m *GS_TaskMonthItemCompleted) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.Id))
	}
	return n
}

func (m *C_TaskMonthInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_TaskMonthInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCGs_47Taskmonth(uint64(l))
	}
	return n
}

func (m *C_TaskMonthTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.Id))
	}
	return n
}

func (m *GS_TaskMonthTask_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_47Taskmonth(uint64(m.Id))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_47Taskmonth(uint64(l))
	}
	return n
}

func sovCGs_47Taskmonth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_47Taskmonth(x uint64) (n int) {
	return sovCGs_47Taskmonth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskMonthData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMonthData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMonthData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TaskMonthItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskMonthItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMonthItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMonthItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fin = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskMonthValueChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskMonthValueChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskMonthValueChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskMonthItemCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskMonthItemCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskMonthItemCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TaskMonthInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TaskMonthInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TaskMonthInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskMonthInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskMonthInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskMonthInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TaskMonthData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TaskMonthTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TaskMonthTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TaskMonthTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TaskMonthTask_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TaskMonthTask_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TaskMonthTask_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_47Taskmonth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_47Taskmonth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_47Taskmonth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_47Taskmonth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_47Taskmonth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_47Taskmonth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_47Taskmonth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_47Taskmonth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_47Taskmonth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_47Taskmonth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.47.taskmonth.proto", fileDescriptorCGs_47Taskmonth) }

var fileDescriptorCGs_47Taskmonth = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcb, 0x4e, 0xf2, 0x40,
	0x14, 0x66, 0x5a, 0xf8, 0x7f, 0x3d, 0xe0, 0x6d, 0xa2, 0xb1, 0x12, 0xd3, 0xd4, 0x2e, 0x48, 0x13,
	0x93, 0x86, 0xa0, 0x89, 0x31, 0x61, 0x65, 0xbd, 0x84, 0x85, 0x0b, 0xc7, 0x86, 0x6d, 0x33, 0xd2,
	0xa1, 0x28, 0xb4, 0x43, 0x3a, 0x43, 0x7c, 0x0d, 0x1f, 0x8b, 0xa5, 0x8f, 0xa0, 0xf8, 0x22, 0x66,
	0x06, 0xac, 0x10, 0xe2, 0xee, 0xcc, 0x77, 0x3b, 0x97, 0x81, 0xc3, 0x5e, 0x94, 0x08, 0xff, 0xfc,
	0xc2, 0x97, 0x54, 0x0c, 0x53, 0x9e, 0xc9, 0x81, 0x3f, 0xce, 0xb9, 0xe4, 0xd8, 0x4c, 0x45, 0x52,
	0x87, 0x84, 0x27, 0x7c, 0x0e, 0xd4, 0x0f, 0xb4, 0xb2, 0xd9, 0xf4, 0x85, 0xcc, 0x27, 0x3d, 0x29,
	0xe6, 0xb0, 0x7b, 0x09, 0x5b, 0x21, 0x15, 0xc3, 0x7b, 0x65, 0xbd, 0xa6, 0x92, 0x62, 0x0f, 0x2a,
	0x1d, 0xc9, 0x52, 0x61, 0x21, 0xc7, 0xf4, 0xaa, 0x2d, 0xec, 0xa7, 0x22, 0xf1, 0x0b, 0x89, 0xa2,
	0xc8, 0x5c, 0xe0, 0x3e, 0x2c, 0x59, 0x15, 0x82, 0xb7, 0xc1, 0xe8, 0xc4, 0x16, 0x72, 0x90, 0x57,
	0x21, 0x46, 0x27, 0xc6, 0xbb, 0x60, 0x76, 0xe9, 0xc8, 0x32, 0x1c, 0xe4, 0x21, 0xa2, 0x4a, 0x85,
	0xdc, 0x3e, 0x67, 0x96, 0xe9, 0x20, 0x6f, 0x83, 0xa8, 0x12, 0xd7, 0x00, 0x85, 0x56, 0x59, 0xbf,
	0x51, 0xe8, 0xb6, 0xc1, 0xba, 0x7b, 0x8c, 0x8a, 0xd4, 0x2e, 0x1d, 0x4d, 0x58, 0x30, 0xa0, 0x59,
	0xc2, 0xe2, 0xbf, 0xd2, 0xcd, 0x22, 0xdd, 0x3d, 0x85, 0xa3, 0x65, 0xb7, 0x9a, 0x29, 0xe0, 0xe9,
	0x78, 0xc4, 0xe4, 0xba, 0xdd, 0xdd, 0x83, 0x9d, 0x60, 0x49, 0x9b, 0xf5, 0xb9, 0xdb, 0x06, 0xbc,
	0xe2, 0xcf, 0xfa, 0x3c, 0x22, 0xb8, 0x01, 0x65, 0x75, 0x18, 0x6d, 0x5d, 0xbb, 0x87, 0x62, 0x88,
	0xe6, 0xdd, 0x93, 0x95, 0xc0, 0x90, 0x0e, 0xd9, 0x5a, 0xcf, 0x97, 0xd5, 0x06, 0xaa, 0x88, 0x08,
	0x3e, 0x86, 0xcd, 0x9b, 0x3c, 0xe7, 0x79, 0xc0, 0x63, 0xb6, 0x10, 0xff, 0x02, 0x8b, 0x0c, 0xa3,
	0x58, 0xbb, 0x01, 0xff, 0x09, 0x7b, 0xa5, 0x79, 0x2c, 0xf4, 0xea, 0xd5, 0x56, 0x4d, 0x4f, 0xb4,
	0xc0, 0xc8, 0x0f, 0x79, 0xb5, 0x3f, 0xfd, 0xb4, 0x4b, 0xd3, 0x99, 0x8d, 0xde, 0x67, 0x36, 0xfa,
	0x98, 0xd9, 0xe8, 0xed, 0xcb, 0x2e, 0x3d, 0xfd, 0xd3, 0xbf, 0x7e, 0xf6, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x69, 0x58, 0x07, 0xc2, 0x38, 0x02, 0x00, 0x00,
}
