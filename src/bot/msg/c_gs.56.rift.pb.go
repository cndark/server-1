// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.56.rift.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RiftData struct {
	Monster *RiftMonster `protobuf:"bytes,1,opt,name=Monster" json:"Monster,omitempty"`
	PlrMine *RiftPlrMine `protobuf:"bytes,2,opt,name=PlrMine" json:"PlrMine,omitempty"`
	BoxNum  int32        `protobuf:"varint,3,opt,name=BoxNum,proto3" json:"BoxNum,omitempty"`
	CurBox  *RiftBox     `protobuf:"bytes,4,opt,name=CurBox" json:"CurBox,omitempty"`
}

func (m *RiftData) Reset()                    { *m = RiftData{} }
func (m *RiftData) String() string            { return proto.CompactTextString(m) }
func (*RiftData) ProtoMessage()               {}
func (*RiftData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{0} }

type RiftMonster struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv int32 `protobuf:"varint,2,opt,name=Lv,proto3" json:"Lv,omitempty"`
}

func (m *RiftMonster) Reset()                    { *m = RiftMonster{} }
func (m *RiftMonster) String() string            { return proto.CompactTextString(m) }
func (*RiftMonster) ProtoMessage()               {}
func (*RiftMonster) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{1} }

type RiftPlrMine struct {
	Id     int32               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv     int32               `protobuf:"varint,2,opt,name=Lv,proto3" json:"Lv,omitempty"`
	RMines map[int32]*RiftMine `protobuf:"bytes,3,rep,name=RMines" json:"RMines,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RiftPlrMine) Reset()                    { *m = RiftPlrMine{} }
func (m *RiftPlrMine) String() string            { return proto.CompactTextString(m) }
func (*RiftPlrMine) ProtoMessage()               {}
func (*RiftPlrMine) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{2} }

type RiftMine struct {
	Seq      int64             `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Id       int32             `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv       int32             `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`
	FinTs    int64             `protobuf:"varint,4,opt,name=FinTs,proto3" json:"FinTs,omitempty"`
	CurPlr   *PlayerSimpleInfo `protobuf:"bytes,5,opt,name=CurPlr" json:"CurPlr,omitempty"`
	Fighters []*BattleFighter  `protobuf:"bytes,6,rep,name=Fighters" json:"Fighters,omitempty"`
}

func (m *RiftMine) Reset()                    { *m = RiftMine{} }
func (m *RiftMine) String() string            { return proto.CompactTextString(m) }
func (*RiftMine) ProtoMessage()               {}
func (*RiftMine) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{3} }

type RiftBox struct {
	Id       int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FinTs    int64             `protobuf:"varint,2,opt,name=FinTs,proto3" json:"FinTs,omitempty"`
	CurPlr   *PlayerSimpleInfo `protobuf:"bytes,3,opt,name=CurPlr" json:"CurPlr,omitempty"`
	Fighters []*BattleFighter  `protobuf:"bytes,4,rep,name=Fighters" json:"Fighters,omitempty"`
}

func (m *RiftBox) Reset()                    { *m = RiftBox{} }
func (m *RiftBox) String() string            { return proto.CompactTextString(m) }
func (*RiftBox) ProtoMessage()               {}
func (*RiftBox) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{4} }

// 探索到新怪物
type GS_RiftMonsterNew struct {
	Monster *RiftMonster `protobuf:"bytes,1,opt,name=Monster" json:"Monster,omitempty"`
}

func (m *GS_RiftMonsterNew) Reset()                    { *m = GS_RiftMonsterNew{} }
func (m *GS_RiftMonsterNew) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMonsterNew) ProtoMessage()               {}
func (*GS_RiftMonsterNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{5} }

// 探索到新矿
type GS_RiftMineNew struct {
	Mine *RiftMine `protobuf:"bytes,1,opt,name=Mine" json:"Mine,omitempty"`
}

func (m *GS_RiftMineNew) Reset()                    { *m = GS_RiftMineNew{} }
func (m *GS_RiftMineNew) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMineNew) ProtoMessage()               {}
func (*GS_RiftMineNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{6} }

// 矿被抢占
type GS_RiftMineOccupied struct {
	Mine *RiftMine `protobuf:"bytes,1,opt,name=Mine" json:"Mine,omitempty"`
}

func (m *GS_RiftMineOccupied) Reset()                    { *m = GS_RiftMineOccupied{} }
func (m *GS_RiftMineOccupied) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMineOccupied) ProtoMessage()               {}
func (*GS_RiftMineOccupied) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{7} }

// 探索到宝箱
type GS_RiftBoxNew struct {
	Box *RiftBox `protobuf:"bytes,1,opt,name=Box" json:"Box,omitempty"`
}

func (m *GS_RiftBoxNew) Reset()                    { *m = GS_RiftBoxNew{} }
func (m *GS_RiftBoxNew) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftBoxNew) ProtoMessage()               {}
func (*GS_RiftBoxNew) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{8} }

// 宝箱奖励
type GS_RiftBoxRewards struct {
	Id      int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Rewards *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_RiftBoxRewards) Reset()                    { *m = GS_RiftBoxRewards{} }
func (m *GS_RiftBoxRewards) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftBoxRewards) ProtoMessage()               {}
func (*GS_RiftBoxRewards) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{9} }

// 宝箱被抢占
type GS_RiftBoxOccupied struct {
	Box *RiftBox `protobuf:"bytes,1,opt,name=Box" json:"Box,omitempty"`
}

func (m *GS_RiftBoxOccupied) Reset()                    { *m = GS_RiftBoxOccupied{} }
func (m *GS_RiftBoxOccupied) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftBoxOccupied) ProtoMessage()               {}
func (*GS_RiftBoxOccupied) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{10} }

// 探索
type C_RiftExplore struct {
}

func (m *C_RiftExplore) Reset()                    { *m = C_RiftExplore{} }
func (m *C_RiftExplore) String() string            { return proto.CompactTextString(m) }
func (*C_RiftExplore) ProtoMessage()               {}
func (*C_RiftExplore) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{11} }

type GS_RiftExplore_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_RiftExplore_R) Reset()                    { *m = GS_RiftExplore_R{} }
func (m *GS_RiftExplore_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftExplore_R) ProtoMessage()               {}
func (*GS_RiftExplore_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{12} }

// 怪物战斗
type C_RiftMonsterFight struct {
	T *TeamFormation `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
}

func (m *C_RiftMonsterFight) Reset()                    { *m = C_RiftMonsterFight{} }
func (m *C_RiftMonsterFight) String() string            { return proto.CompactTextString(m) }
func (*C_RiftMonsterFight) ProtoMessage()               {}
func (*C_RiftMonsterFight) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{13} }

type GS_RiftMonsterFight_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,2,opt,name=Replay" json:"Replay,omitempty"`
	Rewards   *Rewards      `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_RiftMonsterFight_R) Reset()                    { *m = GS_RiftMonsterFight_R{} }
func (m *GS_RiftMonsterFight_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMonsterFight_R) ProtoMessage()               {}
func (*GS_RiftMonsterFight_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{14} }

// 获取矿信息
type C_RiftMineInfo struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_RiftMineInfo) Reset()                    { *m = C_RiftMineInfo{} }
func (m *C_RiftMineInfo) String() string            { return proto.CompactTextString(m) }
func (*C_RiftMineInfo) ProtoMessage()               {}
func (*C_RiftMineInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{15} }

type GS_RiftMineInfo_R struct {
	ErrorCode int32     `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Mine      *RiftMine `protobuf:"bytes,2,opt,name=Mine" json:"Mine,omitempty"`
}

func (m *GS_RiftMineInfo_R) Reset()                    { *m = GS_RiftMineInfo_R{} }
func (m *GS_RiftMineInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMineInfo_R) ProtoMessage()               {}
func (*GS_RiftMineInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{16} }

// 占领矿
type C_RiftMineOccupy struct {
	Seq int64          `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
	T   *TeamFormation `protobuf:"bytes,2,opt,name=T" json:"T,omitempty"`
}

func (m *C_RiftMineOccupy) Reset()                    { *m = C_RiftMineOccupy{} }
func (m *C_RiftMineOccupy) String() string            { return proto.CompactTextString(m) }
func (*C_RiftMineOccupy) ProtoMessage()               {}
func (*C_RiftMineOccupy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{17} }

type GS_RiftMineOccupy_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Mine      *RiftMine     `protobuf:"bytes,2,opt,name=Mine" json:"Mine,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,3,opt,name=Replay" json:"Replay,omitempty"`
}

func (m *GS_RiftMineOccupy_R) Reset()                    { *m = GS_RiftMineOccupy_R{} }
func (m *GS_RiftMineOccupy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMineOccupy_R) ProtoMessage()               {}
func (*GS_RiftMineOccupy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{18} }

// 放弃矿
type C_RiftMineCancel struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_RiftMineCancel) Reset()                    { *m = C_RiftMineCancel{} }
func (m *C_RiftMineCancel) String() string            { return proto.CompactTextString(m) }
func (*C_RiftMineCancel) ProtoMessage()               {}
func (*C_RiftMineCancel) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{19} }

type GS_RiftMineCancel_R struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *GS_RiftMineCancel_R) Reset()                    { *m = GS_RiftMineCancel_R{} }
func (m *GS_RiftMineCancel_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftMineCancel_R) ProtoMessage()               {}
func (*GS_RiftMineCancel_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{20} }

// 领取奖励
type C_RiftMineTakeRewards struct {
	Seq int64 `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (m *C_RiftMineTakeRewards) Reset()                    { *m = C_RiftMineTakeRewards{} }
func (m *C_RiftMineTakeRewards) String() string            { return proto.CompactTextString(m) }
func (*C_RiftMineTakeRewards) ProtoMessage()               {}
func (*C_RiftMineTakeRewards) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{21} }

type GS_RiftMineTakeRewards_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_RiftMineTakeRewards_R) Reset()         { *m = GS_RiftMineTakeRewards_R{} }
func (m *GS_RiftMineTakeRewards_R) String() string { return proto.CompactTextString(m) }
func (*GS_RiftMineTakeRewards_R) ProtoMessage()    {}
func (*GS_RiftMineTakeRewards_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_56Rift, []int{22}
}

// 占领宝箱
type C_RiftBoxOccupy struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_RiftBoxOccupy) Reset()                    { *m = C_RiftBoxOccupy{} }
func (m *C_RiftBoxOccupy) String() string            { return proto.CompactTextString(m) }
func (*C_RiftBoxOccupy) ProtoMessage()               {}
func (*C_RiftBoxOccupy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{23} }

type GS_RiftBoxOccupy_R struct {
	ErrorCode int32         `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	FinTs     int64         `protobuf:"varint,2,opt,name=FinTs,proto3" json:"FinTs,omitempty"`
	Replay    *BattleReplay `protobuf:"bytes,3,opt,name=Replay" json:"Replay,omitempty"`
}

func (m *GS_RiftBoxOccupy_R) Reset()                    { *m = GS_RiftBoxOccupy_R{} }
func (m *GS_RiftBoxOccupy_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftBoxOccupy_R) ProtoMessage()               {}
func (*GS_RiftBoxOccupy_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{24} }

// 宝箱数量
type C_RiftBoxInfo struct {
}

func (m *C_RiftBoxInfo) Reset()                    { *m = C_RiftBoxInfo{} }
func (m *C_RiftBoxInfo) String() string            { return proto.CompactTextString(m) }
func (*C_RiftBoxInfo) ProtoMessage()               {}
func (*C_RiftBoxInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{25} }

type GS_RiftBoxInfo_R struct {
	BoxNum int32 `protobuf:"varint,1,opt,name=BoxNum,proto3" json:"BoxNum,omitempty"`
}

func (m *GS_RiftBoxInfo_R) Reset()                    { *m = GS_RiftBoxInfo_R{} }
func (m *GS_RiftBoxInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RiftBoxInfo_R) ProtoMessage()               {}
func (*GS_RiftBoxInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_56Rift, []int{26} }

func init() {
	proto.RegisterType((*RiftData)(nil), "msg.RiftData")
	proto.RegisterType((*RiftMonster)(nil), "msg.RiftMonster")
	proto.RegisterType((*RiftPlrMine)(nil), "msg.RiftPlrMine")
	proto.RegisterType((*RiftMine)(nil), "msg.RiftMine")
	proto.RegisterType((*RiftBox)(nil), "msg.RiftBox")
	proto.RegisterType((*GS_RiftMonsterNew)(nil), "msg.GS_RiftMonsterNew")
	proto.RegisterType((*GS_RiftMineNew)(nil), "msg.GS_RiftMineNew")
	proto.RegisterType((*GS_RiftMineOccupied)(nil), "msg.GS_RiftMineOccupied")
	proto.RegisterType((*GS_RiftBoxNew)(nil), "msg.GS_RiftBoxNew")
	proto.RegisterType((*GS_RiftBoxRewards)(nil), "msg.GS_RiftBoxRewards")
	proto.RegisterType((*GS_RiftBoxOccupied)(nil), "msg.GS_RiftBoxOccupied")
	proto.RegisterType((*C_RiftExplore)(nil), "msg.C_RiftExplore")
	proto.RegisterType((*GS_RiftExplore_R)(nil), "msg.GS_RiftExplore_R")
	proto.RegisterType((*C_RiftMonsterFight)(nil), "msg.C_RiftMonsterFight")
	proto.RegisterType((*GS_RiftMonsterFight_R)(nil), "msg.GS_RiftMonsterFight_R")
	proto.RegisterType((*C_RiftMineInfo)(nil), "msg.C_RiftMineInfo")
	proto.RegisterType((*GS_RiftMineInfo_R)(nil), "msg.GS_RiftMineInfo_R")
	proto.RegisterType((*C_RiftMineOccupy)(nil), "msg.C_RiftMineOccupy")
	proto.RegisterType((*GS_RiftMineOccupy_R)(nil), "msg.GS_RiftMineOccupy_R")
	proto.RegisterType((*C_RiftMineCancel)(nil), "msg.C_RiftMineCancel")
	proto.RegisterType((*GS_RiftMineCancel_R)(nil), "msg.GS_RiftMineCancel_R")
	proto.RegisterType((*C_RiftMineTakeRewards)(nil), "msg.C_RiftMineTakeRewards")
	proto.RegisterType((*GS_RiftMineTakeRewards_R)(nil), "msg.GS_RiftMineTakeRewards_R")
	proto.RegisterType((*C_RiftBoxOccupy)(nil), "msg.C_RiftBoxOccupy")
	proto.RegisterType((*GS_RiftBoxOccupy_R)(nil), "msg.GS_RiftBoxOccupy_R")
	proto.RegisterType((*C_RiftBoxInfo)(nil), "msg.C_RiftBoxInfo")
	proto.RegisterType((*GS_RiftBoxInfo_R)(nil), "msg.GS_RiftBoxInfo_R")
}
func (m *RiftData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiftData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Monster != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Monster.Size()))
		n1, err := m.Monster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PlrMine != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.PlrMine.Size()))
		n2, err := m.PlrMine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.BoxNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.BoxNum))
	}
	if m.CurBox != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.CurBox.Size()))
		n3, err := m.CurBox.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RiftMonster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiftMonster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *RiftPlrMine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiftPlrMine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Lv))
	}
	if len(m.RMines) > 0 {
		for k, _ := range m.RMines {
			dAtA[i] = 0x1a
			i++
			v := m.RMines[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCGs_56Rift(uint64(msgSize))
			}
			mapSize := 1 + sovCGs_56Rift(uint64(k)) + msgSize
			i = encodeVarintCGs_56Rift(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_56Rift(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCGs_56Rift(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *RiftMine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiftMine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Seq))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Lv))
	}
	if m.FinTs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.FinTs))
	}
	if m.CurPlr != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.CurPlr.Size()))
		n5, err := m.CurPlr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Fighters) > 0 {
		for _, msg := range m.Fighters {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCGs_56Rift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RiftBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiftBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	if m.FinTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.FinTs))
	}
	if m.CurPlr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.CurPlr.Size()))
		n6, err := m.CurPlr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Fighters) > 0 {
		for _, msg := range m.Fighters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCGs_56Rift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GS_RiftMonsterNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMonsterNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Monster != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Monster.Size()))
		n7, err := m.Monster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *GS_RiftMineNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mine != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Mine.Size()))
		n8, err := m.Mine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GS_RiftMineOccupied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineOccupied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mine != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Mine.Size()))
		n9, err := m.Mine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GS_RiftBoxNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftBoxNew) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Box != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Box.Size()))
		n10, err := m.Box.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *GS_RiftBoxRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftBoxRewards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Rewards.Size()))
		n11, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *GS_RiftBoxOccupied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftBoxOccupied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Box != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Box.Size()))
		n12, err := m.Box.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *C_RiftExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftExplore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_RiftExplore_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftExplore_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_RiftMonsterFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftMonsterFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.T.Size()))
		n13, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *GS_RiftMonsterFight_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMonsterFight_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Replay.Size()))
		n14, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Rewards.Size()))
		n15, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *C_RiftMineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftMineInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_RiftMineInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Mine != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Mine.Size()))
		n16, err := m.Mine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *C_RiftMineOccupy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftMineOccupy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Seq))
	}
	if m.T != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.T.Size()))
		n17, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *GS_RiftMineOccupy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineOccupy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Mine != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Mine.Size()))
		n18, err := m.Mine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Replay != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Replay.Size()))
		n19, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *C_RiftMineCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftMineCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_RiftMineCancel_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineCancel_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *C_RiftMineTakeRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftMineTakeRewards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *GS_RiftMineTakeRewards_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftMineTakeRewards_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Rewards.Size()))
		n20, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *C_RiftBoxOccupy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftBoxOccupy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_RiftBoxOccupy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftBoxOccupy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.ErrorCode))
	}
	if m.FinTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.FinTs))
	}
	if m.Replay != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.Replay.Size()))
		n21, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *C_RiftBoxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RiftBoxInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_RiftBoxInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RiftBoxInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_56Rift(dAtA, i, uint64(m.BoxNum))
	}
	return i, nil
}

func encodeVarintCGs_56Rift(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RiftData) Size() (n int) {
	var l int
	_ = l
	if m.Monster != nil {
		l = m.Monster.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if m.PlrMine != nil {
		l = m.PlrMine.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if m.BoxNum != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.BoxNum))
	}
	if m.CurBox != nil {
		l = m.CurBox.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *RiftMonster) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Lv))
	}
	return n
}

func (m *RiftPlrMine) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Lv))
	}
	if len(m.RMines) > 0 {
		for k, v := range m.RMines {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCGs_56Rift(uint64(l))
			}
			mapEntrySize := 1 + sovCGs_56Rift(uint64(k)) + l
			n += mapEntrySize + 1 + sovCGs_56Rift(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RiftMine) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Seq))
	}
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Lv))
	}
	if m.FinTs != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.FinTs))
	}
	if m.CurPlr != nil {
		l = m.CurPlr.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovCGs_56Rift(uint64(l))
		}
	}
	return n
}

func (m *RiftBox) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	if m.FinTs != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.FinTs))
	}
	if m.CurPlr != nil {
		l = m.CurPlr.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovCGs_56Rift(uint64(l))
		}
	}
	return n
}

func (m *GS_RiftMonsterNew) Size() (n int) {
	var l int
	_ = l
	if m.Monster != nil {
		l = m.Monster.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftMineNew) Size() (n int) {
	var l int
	_ = l
	if m.Mine != nil {
		l = m.Mine.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftMineOccupied) Size() (n int) {
	var l int
	_ = l
	if m.Mine != nil {
		l = m.Mine.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftBoxNew) Size() (n int) {
	var l int
	_ = l
	if m.Box != nil {
		l = m.Box.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftBoxRewards) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftBoxOccupied) Size() (n int) {
	var l int
	_ = l
	if m.Box != nil {
		l = m.Box.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftExplore) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_RiftExplore_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_RiftMonsterFight) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftMonsterFight_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftMineInfo) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Seq))
	}
	return n
}

func (m *GS_RiftMineInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	if m.Mine != nil {
		l = m.Mine.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftMineOccupy) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Seq))
	}
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *GS_RiftMineOccupy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	if m.Mine != nil {
		l = m.Mine.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftMineCancel) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Seq))
	}
	return n
}

func (m *GS_RiftMineCancel_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	return n
}

func (m *C_RiftMineTakeRewards) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Seq))
	}
	return n
}

func (m *GS_RiftMineTakeRewards_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftBoxOccupy) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.Id))
	}
	return n
}

func (m *GS_RiftBoxOccupy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.ErrorCode))
	}
	if m.FinTs != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.FinTs))
	}
	if m.Replay != nil {
		l = m.Replay.Size()
		n += 1 + l + sovCGs_56Rift(uint64(l))
	}
	return n
}

func (m *C_RiftBoxInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_RiftBoxInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.BoxNum != 0 {
		n += 1 + sovCGs_56Rift(uint64(m.BoxNum))
	}
	return n
}

func sovCGs_56Rift(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_56Rift(x uint64) (n int) {
	return sovCGs_56Rift(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RiftData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiftData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiftData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monster == nil {
				m.Monster = &RiftMonster{}
			}
			if err := m.Monster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlrMine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlrMine == nil {
				m.PlrMine = &RiftPlrMine{}
			}
			if err := m.PlrMine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxNum", wireType)
			}
			m.BoxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurBox == nil {
				m.CurBox = &RiftBox{}
			}
			if err := m.CurBox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiftMonster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiftMonster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiftMonster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiftPlrMine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiftPlrMine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiftPlrMine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RMines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RMines == nil {
				m.RMines = make(map[int32]*RiftMine)
			}
			var mapkey int32
			var mapvalue *RiftMine
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_56Rift
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_56Rift
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_56Rift
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_56Rift
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCGs_56Rift
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RiftMine{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_56Rift
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RMines[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiftMine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiftMine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiftMine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinTs", wireType)
			}
			m.FinTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPlr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurPlr == nil {
				m.CurPlr = &PlayerSimpleInfo{}
			}
			if err := m.CurPlr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &BattleFighter{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiftBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiftBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiftBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinTs", wireType)
			}
			m.FinTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPlr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurPlr == nil {
				m.CurPlr = &PlayerSimpleInfo{}
			}
			if err := m.CurPlr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &BattleFighter{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMonsterNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMonsterNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMonsterNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monster == nil {
				m.Monster = &RiftMonster{}
			}
			if err := m.Monster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mine == nil {
				m.Mine = &RiftMine{}
			}
			if err := m.Mine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineOccupied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineOccupied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineOccupied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mine == nil {
				m.Mine = &RiftMine{}
			}
			if err := m.Mine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftBoxNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftBoxNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftBoxNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Box == nil {
				m.Box = &RiftBox{}
			}
			if err := m.Box.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftBoxRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftBoxRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftBoxRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftBoxOccupied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftBoxOccupied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftBoxOccupied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Box == nil {
				m.Box = &RiftBox{}
			}
			if err := m.Box.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftExplore_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftExplore_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftExplore_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftMonsterFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftMonsterFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftMonsterFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMonsterFight_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMonsterFight_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMonsterFight_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftMineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftMineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftMineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mine == nil {
				m.Mine = &RiftMine{}
			}
			if err := m.Mine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftMineOccupy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftMineOccupy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftMineOccupy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &TeamFormation{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineOccupy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineOccupy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineOccupy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mine == nil {
				m.Mine = &RiftMine{}
			}
			if err := m.Mine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftMineCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftMineCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftMineCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineCancel_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineCancel_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineCancel_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftMineTakeRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftMineTakeRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftMineTakeRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftMineTakeRewards_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftMineTakeRewards_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftMineTakeRewards_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftBoxOccupy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftBoxOccupy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftBoxOccupy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftBoxOccupy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftBoxOccupy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftBoxOccupy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinTs", wireType)
			}
			m.FinTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replay == nil {
				m.Replay = &BattleReplay{}
			}
			if err := m.Replay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RiftBoxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RiftBoxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RiftBoxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RiftBoxInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RiftBoxInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RiftBoxInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxNum", wireType)
			}
			m.BoxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_56Rift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_56Rift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_56Rift(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_56Rift
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_56Rift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_56Rift
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_56Rift
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_56Rift(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_56Rift = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_56Rift   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.56.rift.proto", fileDescriptorCGs_56Rift) }

var fileDescriptorCGs_56Rift = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0x66, 0x6c, 0x12, 0xd8, 0x93, 0x05, 0xc2, 0x2c, 0x59, 0x59, 0x08, 0x45, 0x61, 0x16, 0xad,
	0x00, 0x09, 0x2f, 0x02, 0x16, 0xa1, 0xbd, 0x59, 0x29, 0x5e, 0xb2, 0x8b, 0x16, 0x28, 0x1a, 0x72,
	0x9f, 0xba, 0xc9, 0x90, 0x5a, 0x38, 0x9e, 0x74, 0xec, 0x40, 0x72, 0xd9, 0xbb, 0x5e, 0x55, 0x7d,
	0x84, 0xbe, 0x40, 0x2f, 0xfa, 0x16, 0x5c, 0xf6, 0x11, 0x5a, 0xfa, 0x22, 0x95, 0xc7, 0x63, 0xc7,
	0xf9, 0x29, 0x06, 0xa9, 0x77, 0xf1, 0x39, 0xdf, 0x39, 0xf3, 0xcd, 0x77, 0xbe, 0x63, 0x07, 0x70,
	0xb3, 0xd1, 0xf6, 0xcd, 0x3f, 0x0f, 0x4d, 0xe1, 0x5c, 0x05, 0x66, 0x57, 0xf0, 0x80, 0x63, 0xbd,
	0xe3, 0xb7, 0x57, 0xa1, 0xcd, 0xdb, 0x3c, 0x0a, 0xac, 0x96, 0x24, 0x68, 0x77, 0xd7, 0xf4, 0x03,
	0xd1, 0x6b, 0x06, 0x7e, 0x14, 0x26, 0xef, 0x11, 0xcc, 0x53, 0xe7, 0x2a, 0xf8, 0xc7, 0x0e, 0x6c,
	0xbc, 0x0d, 0x73, 0x67, 0xdc, 0xf3, 0x03, 0x26, 0x0c, 0x54, 0x41, 0x9b, 0x85, 0xbd, 0xa2, 0xd9,
	0xf1, 0xdb, 0x66, 0x98, 0x57, 0x71, 0x1a, 0x03, 0x42, 0xec, 0x85, 0x2b, 0xce, 0x1c, 0x8f, 0x19,
	0xda, 0x18, 0x56, 0xc5, 0x69, 0x0c, 0xc0, 0xbf, 0x42, 0xbe, 0xca, 0xfb, 0xe7, 0xbd, 0x8e, 0xa1,
	0x57, 0xd0, 0x66, 0x8e, 0xaa, 0x27, 0xbc, 0x01, 0x79, 0xab, 0x27, 0xaa, 0xbc, 0x6f, 0xcc, 0xca,
	0x16, 0x3f, 0x27, 0x2d, 0xaa, 0xbc, 0x4f, 0x55, 0x8e, 0xec, 0x40, 0x21, 0xc5, 0x00, 0x2f, 0x82,
	0x76, 0xd2, 0x92, 0xfc, 0x72, 0x54, 0x3b, 0x69, 0x85, 0xcf, 0xa7, 0x37, 0x92, 0x43, 0x8e, 0x6a,
	0xa7, 0x37, 0xe4, 0x03, 0x8a, 0xf0, 0xf1, 0xe1, 0x19, 0x78, 0x7c, 0x00, 0x79, 0x1a, 0x02, 0x7d,
	0x43, 0xaf, 0xe8, 0x9b, 0x85, 0xbd, 0xb5, 0xf1, 0x7b, 0x98, 0x51, 0xfa, 0xd8, 0x0b, 0xc4, 0x80,
	0x2a, 0xec, 0xea, 0x7f, 0x50, 0x48, 0x85, 0x71, 0x11, 0xf4, 0x6b, 0x36, 0x50, 0xa7, 0x84, 0x3f,
	0xf1, 0x6f, 0x90, 0xbb, 0xb1, 0xdd, 0x5e, 0xac, 0xce, 0xc2, 0x50, 0xc9, 0x50, 0x9a, 0x28, 0xf7,
	0x97, 0x76, 0x84, 0xc8, 0x47, 0x35, 0x01, 0x49, 0xb6, 0x08, 0xfa, 0x25, 0x7b, 0x25, 0xfb, 0xe8,
	0x34, 0xfc, 0xa9, 0xe8, 0x6b, 0x63, 0xf4, 0xf5, 0x84, 0xfe, 0x0a, 0xe4, 0x6a, 0x8e, 0x57, 0xf7,
	0xa5, 0x84, 0x3a, 0x8d, 0x1e, 0xf0, 0x8e, 0x54, 0xf6, 0xc2, 0x15, 0x46, 0x4e, 0x1e, 0x5f, 0x92,
	0xc7, 0x5f, 0xb8, 0xf6, 0x80, 0x89, 0x4b, 0xa7, 0xd3, 0x75, 0xd9, 0x89, 0x77, 0xc5, 0xa9, 0x02,
	0x61, 0x13, 0xe6, 0x6b, 0x4e, 0xfb, 0x65, 0xc0, 0x84, 0x6f, 0xe4, 0xa5, 0x0a, 0x58, 0x16, 0x54,
	0xed, 0x20, 0x70, 0x99, 0x4a, 0xd1, 0x04, 0x43, 0xde, 0x22, 0x98, 0x53, 0x63, 0x9a, 0xd0, 0x37,
	0x21, 0xa4, 0x4d, 0x27, 0xa4, 0x3f, 0x95, 0xd0, 0xec, 0x23, 0x08, 0xfd, 0x0d, 0xcb, 0xff, 0x5e,
	0x36, 0x52, 0x36, 0x39, 0x67, 0xb7, 0x4f, 0xb1, 0x33, 0xd9, 0x87, 0xc5, 0xb8, 0x81, 0xe3, 0xb1,
	0xb0, 0x7a, 0x1d, 0x66, 0xa5, 0xbb, 0xd1, 0xb4, 0xf9, 0xc9, 0x14, 0x39, 0x82, 0x5f, 0x52, 0x45,
	0xcf, 0x9a, 0xcd, 0x5e, 0xd7, 0x61, 0xad, 0xc7, 0x54, 0xfe, 0x01, 0x0b, 0xaa, 0x32, 0x5c, 0x05,
	0x76, 0x8b, 0xcb, 0xa0, 0x87, 0x7b, 0x80, 0xa6, 0xec, 0x41, 0x98, 0x20, 0xff, 0x27, 0x17, 0x0c,
	0x43, 0xec, 0xd6, 0x16, 0x2d, 0x7f, 0x42, 0xfa, 0xdf, 0x61, 0x4e, 0xa5, 0x94, 0xeb, 0x54, 0xa3,
	0x28, 0x46, 0xe3, 0x24, 0x39, 0x00, 0x3c, 0x6c, 0x96, 0xd0, 0xce, 0xa2, 0xb0, 0x04, 0x0b, 0x96,
	0x2c, 0x3a, 0xee, 0x77, 0x5d, 0x2e, 0x18, 0xd9, 0x85, 0xa2, 0x6a, 0xa3, 0x22, 0x0d, 0x8a, 0xd7,
	0xe0, 0xa7, 0x63, 0x21, 0xb8, 0xb0, 0x78, 0x8b, 0x29, 0x66, 0xc3, 0x00, 0x39, 0x04, 0x6c, 0xa5,
	0xa7, 0x24, 0xe7, 0x87, 0x2b, 0x80, 0xea, 0xea, 0xd8, 0x68, 0xca, 0x75, 0x66, 0x77, 0x6a, 0x5c,
	0x74, 0xec, 0xc0, 0xe1, 0x1e, 0x45, 0x75, 0xf2, 0x06, 0x41, 0x69, 0x74, 0xbe, 0xb2, 0x32, 0xeb,
	0x3c, 0xbc, 0x05, 0x79, 0xca, 0xba, 0xae, 0x3d, 0x50, 0x7a, 0x2c, 0xa7, 0x4c, 0x14, 0x25, 0xa8,
	0x02, 0xa4, 0xb5, 0xd3, 0x1f, 0xd2, 0x8e, 0xc0, 0xa2, 0x95, 0x8c, 0x3c, 0xf4, 0xec, 0xe4, 0xce,
	0x92, 0xfa, 0xd0, 0x8d, 0x0a, 0x94, 0xc9, 0x34, 0xf6, 0x8c, 0xf6, 0x7d, 0xcf, 0xd4, 0xa0, 0x68,
	0x8d, 0x9a, 0x6d, 0x30, 0xe5, 0x7d, 0x21, 0xc5, 0xd4, 0x1e, 0x12, 0xf3, 0x35, 0x9a, 0xb4, 0xed,
	0xe0, 0x07, 0x10, 0x4c, 0xa9, 0xad, 0x67, 0xa8, 0x4d, 0x36, 0xd2, 0x77, 0xb1, 0x6c, 0xaf, 0xc9,
	0xdc, 0x29, 0x3a, 0xee, 0x8f, 0x10, 0x8d, 0x60, 0x99, 0x1e, 0xdb, 0x82, 0xd2, 0xb0, 0x75, 0xdd,
	0xbe, 0x66, 0xf1, 0xb6, 0x4c, 0xf6, 0x7f, 0x0e, 0x46, 0xaa, 0x7f, 0x0a, 0x9b, 0xa9, 0xc6, 0x63,
	0x37, 0x6d, 0x1d, 0x96, 0xac, 0x91, 0x45, 0x1b, 0x8c, 0x2f, 0x2d, 0xf1, 0x27, 0x96, 0x31, 0x7b,
	0x18, 0xd3, 0xdf, 0xb1, 0x4f, 0xd0, 0x3f, 0xd9, 0xe5, 0x2a, 0xef, 0x87, 0xfe, 0x24, 0xdb, 0xc9,
	0x2e, 0xab, 0x48, 0x83, 0xa6, 0x3e, 0xdb, 0x28, 0xfd, 0xd9, 0xae, 0xae, 0xdc, 0x7d, 0x29, 0xcf,
	0xdc, 0xdd, 0x97, 0xd1, 0xa7, 0xfb, 0x32, 0xfa, 0x7c, 0x5f, 0x46, 0xef, 0xbe, 0x96, 0x67, 0x5e,
	0xe4, 0xe5, 0x1f, 0x8a, 0xfd, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0x85, 0x06, 0x36, 0x8e,
	0x08, 0x00, 0x00,
}
