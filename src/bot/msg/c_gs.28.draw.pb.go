// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.28.draw.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 抽卡
type DrawData struct {
	Tps   []*DrawTpData `protobuf:"bytes,1,rep,name=Tps" json:"Tps,omitempty"`
	Score int32         `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (m *DrawData) Reset()                    { *m = DrawData{} }
func (m *DrawData) String() string            { return proto.CompactTextString(m) }
func (*DrawData) ProtoMessage()               {}
func (*DrawData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{0} }

type DrawTpData struct {
	Tp          string `protobuf:"bytes,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
	Cnt         int32  `protobuf:"varint,2,opt,name=Cnt,proto3" json:"Cnt,omitempty"`
	TotalCnt    int32  `protobuf:"varint,3,opt,name=TotalCnt,proto3" json:"TotalCnt,omitempty"`
	LastTs      int64  `protobuf:"varint,4,opt,name=LastTs,proto3" json:"LastTs,omitempty"`
	InitialTake int32  `protobuf:"varint,5,opt,name=InitialTake,proto3" json:"InitialTake,omitempty"`
}

func (m *DrawTpData) Reset()                    { *m = DrawTpData{} }
func (m *DrawTpData) String() string            { return proto.CompactTextString(m) }
func (*DrawTpData) ProtoMessage()               {}
func (*DrawTpData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{1} }

type C_DrawGetInfo struct {
}

func (m *C_DrawGetInfo) Reset()                    { *m = C_DrawGetInfo{} }
func (m *C_DrawGetInfo) String() string            { return proto.CompactTextString(m) }
func (*C_DrawGetInfo) ProtoMessage()               {}
func (*C_DrawGetInfo) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{2} }

type GS_DrawGetInfo_R struct {
	ErrorCode int32     `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Draw      *DrawData `protobuf:"bytes,2,opt,name=Draw" json:"Draw,omitempty"`
}

func (m *GS_DrawGetInfo_R) Reset()                    { *m = GS_DrawGetInfo_R{} }
func (m *GS_DrawGetInfo_R) String() string            { return proto.CompactTextString(m) }
func (*GS_DrawGetInfo_R) ProtoMessage()               {}
func (*GS_DrawGetInfo_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{3} }

type C_DrawTp struct {
	Tp      string `protobuf:"bytes,1,opt,name=Tp,proto3" json:"Tp,omitempty"`
	N       int32  `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
	AutoDec bool   `protobuf:"varint,3,opt,name=AutoDec,proto3" json:"AutoDec,omitempty"`
}

func (m *C_DrawTp) Reset()                    { *m = C_DrawTp{} }
func (m *C_DrawTp) String() string            { return proto.CompactTextString(m) }
func (*C_DrawTp) ProtoMessage()               {}
func (*C_DrawTp) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{4} }

type GS_DrawTp_R struct {
	ErrorCode    int32       `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Score        int32       `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	DrawTp       *DrawTpData `protobuf:"bytes,3,opt,name=DrawTp" json:"DrawTp,omitempty"`
	Rewards      *Rewards    `protobuf:"bytes,4,opt,name=Rewards" json:"Rewards,omitempty"`
	Items        []*Item     `protobuf:"bytes,5,rep,name=Items" json:"Items,omitempty"`
	AutoDecItems []*Item     `protobuf:"bytes,6,rep,name=AutoDecItems" json:"AutoDecItems,omitempty"`
}

func (m *GS_DrawTp_R) Reset()                    { *m = GS_DrawTp_R{} }
func (m *GS_DrawTp_R) String() string            { return proto.CompactTextString(m) }
func (*GS_DrawTp_R) ProtoMessage()               {}
func (*GS_DrawTp_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{5} }

type C_DrawScoreBoxTake struct {
}

func (m *C_DrawScoreBoxTake) Reset()                    { *m = C_DrawScoreBoxTake{} }
func (m *C_DrawScoreBoxTake) String() string            { return proto.CompactTextString(m) }
func (*C_DrawScoreBoxTake) ProtoMessage()               {}
func (*C_DrawScoreBoxTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{6} }

type GS_DrawScoreBoxTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Score     int32    `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_DrawScoreBoxTake_R) Reset()                    { *m = GS_DrawScoreBoxTake_R{} }
func (m *GS_DrawScoreBoxTake_R) String() string            { return proto.CompactTextString(m) }
func (*GS_DrawScoreBoxTake_R) ProtoMessage()               {}
func (*GS_DrawScoreBoxTake_R) Descriptor() ([]byte, []int) { return fileDescriptorCGs_28Draw, []int{7} }

func init() {
	proto.RegisterType((*DrawData)(nil), "msg.DrawData")
	proto.RegisterType((*DrawTpData)(nil), "msg.DrawTpData")
	proto.RegisterType((*C_DrawGetInfo)(nil), "msg.C_DrawGetInfo")
	proto.RegisterType((*GS_DrawGetInfo_R)(nil), "msg.GS_DrawGetInfo_R")
	proto.RegisterType((*C_DrawTp)(nil), "msg.C_DrawTp")
	proto.RegisterType((*GS_DrawTp_R)(nil), "msg.GS_DrawTp_R")
	proto.RegisterType((*C_DrawScoreBoxTake)(nil), "msg.C_DrawScoreBoxTake")
	proto.RegisterType((*GS_DrawScoreBoxTake_R)(nil), "msg.GS_DrawScoreBoxTake_R")
}
func (m *DrawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tps) > 0 {
		for _, msg := range m.Tps {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_28Draw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *DrawTpData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawTpData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(len(m.Tp)))
		i += copy(dAtA[i:], m.Tp)
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Cnt))
	}
	if m.TotalCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.TotalCnt))
	}
	if m.LastTs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.LastTs))
	}
	if m.InitialTake != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.InitialTake))
	}
	return i, nil
}

func (m *C_DrawGetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_DrawGetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_DrawGetInfo_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_DrawGetInfo_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Draw != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Draw.Size()))
		n1, err := m.Draw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C_DrawTp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_DrawTp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(len(m.Tp)))
		i += copy(dAtA[i:], m.Tp)
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.N))
	}
	if m.AutoDec {
		dAtA[i] = 0x18
		i++
		if m.AutoDec {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GS_DrawTp_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_DrawTp_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Score))
	}
	if m.DrawTp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.DrawTp.Size()))
		n2, err := m.DrawTp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Rewards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCGs_28Draw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AutoDecItems) > 0 {
		for _, msg := range m.AutoDecItems {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCGs_28Draw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C_DrawScoreBoxTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_DrawScoreBoxTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GS_DrawScoreBoxTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_DrawScoreBoxTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Score))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCGs_28Draw(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintCGs_28Draw(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DrawData) Size() (n int) {
	var l int
	_ = l
	if len(m.Tps) > 0 {
		for _, e := range m.Tps {
			l = e.Size()
			n += 1 + l + sovCGs_28Draw(uint64(l))
		}
	}
	if m.Score != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.Score))
	}
	return n
}

func (m *DrawTpData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tp)
	if l > 0 {
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.Cnt))
	}
	if m.TotalCnt != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.TotalCnt))
	}
	if m.LastTs != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.LastTs))
	}
	if m.InitialTake != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.InitialTake))
	}
	return n
}

func (m *C_DrawGetInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_DrawGetInfo_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.ErrorCode))
	}
	if m.Draw != nil {
		l = m.Draw.Size()
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	return n
}

func (m *C_DrawTp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tp)
	if l > 0 {
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.N))
	}
	if m.AutoDec {
		n += 2
	}
	return n
}

func (m *GS_DrawTp_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.ErrorCode))
	}
	if m.Score != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.Score))
	}
	if m.DrawTp != nil {
		l = m.DrawTp.Size()
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCGs_28Draw(uint64(l))
		}
	}
	if len(m.AutoDecItems) > 0 {
		for _, e := range m.AutoDecItems {
			l = e.Size()
			n += 1 + l + sovCGs_28Draw(uint64(l))
		}
	}
	return n
}

func (m *C_DrawScoreBoxTake) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GS_DrawScoreBoxTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.ErrorCode))
	}
	if m.Score != 0 {
		n += 1 + sovCGs_28Draw(uint64(m.Score))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_28Draw(uint64(l))
	}
	return n
}

func sovCGs_28Draw(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_28Draw(x uint64) (n int) {
	return sovCGs_28Draw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DrawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tps = append(m.Tps, &DrawTpData{})
			if err := m.Tps[len(m.Tps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawTpData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawTpData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawTpData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCnt", wireType)
			}
			m.TotalCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTs", wireType)
			}
			m.LastTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTake", wireType)
			}
			m.InitialTake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialTake |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_DrawGetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_DrawGetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_DrawGetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_DrawGetInfo_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_DrawGetInfo_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_DrawGetInfo_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draw == nil {
				m.Draw = &DrawData{}
			}
			if err := m.Draw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_DrawTp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_DrawTp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_DrawTp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoDec", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoDec = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_DrawTp_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_DrawTp_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_DrawTp_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawTp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrawTp == nil {
				m.DrawTp = &DrawTpData{}
			}
			if err := m.DrawTp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoDecItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoDecItems = append(m.AutoDecItems, &Item{})
			if err := m.AutoDecItems[len(m.AutoDecItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_DrawScoreBoxTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_DrawScoreBoxTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_DrawScoreBoxTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_DrawScoreBoxTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_DrawScoreBoxTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_DrawScoreBoxTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_28Draw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_28Draw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_28Draw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_28Draw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_28Draw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_28Draw
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_28Draw
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_28Draw(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_28Draw = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_28Draw   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.28.draw.proto", fileDescriptorCGs_28Draw) }

var fileDescriptorCGs_28Draw = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xec, 0xc6, 0x75, 0x9a, 0x7c, 0x4e, 0x69, 0xf5, 0x29, 0x45, 0x56, 0x84, 0x8c, 0xeb, 0x03,
	0xe4, 0x82, 0x55, 0x85, 0x0b, 0x57, 0x92, 0xa0, 0x2a, 0x12, 0xea, 0x61, 0xb3, 0xf7, 0x68, 0x71,
	0x8c, 0x55, 0xd1, 0x64, 0xad, 0xdd, 0xad, 0xc2, 0x03, 0xf0, 0x00, 0x3c, 0x56, 0x8f, 0x3c, 0x02,
	0x98, 0x17, 0x41, 0xfb, 0xd3, 0xd6, 0x40, 0x05, 0x52, 0x6f, 0xfe, 0x66, 0xe6, 0xb3, 0x67, 0x66,
	0xbd, 0x80, 0xc5, 0xaa, 0x52, 0xf9, 0xe4, 0x4d, 0xbe, 0x96, 0x7c, 0x97, 0xd7, 0x52, 0x68, 0x81,
	0xc1, 0x46, 0x55, 0x23, 0xa8, 0x44, 0x25, 0x1c, 0x30, 0x3a, 0xb1, 0xa2, 0xb3, 0xb3, 0x5c, 0x69,
	0x79, 0x5d, 0x68, 0xe5, 0xe0, 0x6c, 0x06, 0xbd, 0xb9, 0xe4, 0xbb, 0x39, 0xd7, 0x1c, 0x4f, 0x21,
	0x60, 0xb5, 0x8a, 0x49, 0x1a, 0x8c, 0xa3, 0xc9, 0x51, 0xbe, 0x51, 0x55, 0x6e, 0x38, 0x56, 0x1b,
	0x96, 0x1a, 0x0e, 0x87, 0x10, 0x2e, 0x0b, 0x21, 0xcb, 0xb8, 0x93, 0x92, 0x71, 0x48, 0xdd, 0x90,
	0x7d, 0x21, 0x00, 0xf7, 0x4a, 0x7c, 0x02, 0x1d, 0x56, 0xc7, 0x24, 0x25, 0xe3, 0x3e, 0xed, 0xb0,
	0x1a, 0x8f, 0x21, 0x98, 0x6d, 0xb5, 0x5f, 0x31, 0x8f, 0x38, 0x82, 0x1e, 0x13, 0x9a, 0x5f, 0x19,
	0x38, 0xb0, 0xf0, 0xdd, 0x8c, 0x4f, 0xa1, 0xfb, 0x9e, 0x2b, 0xcd, 0x54, 0xbc, 0x9f, 0x92, 0x71,
	0x40, 0xfd, 0x84, 0x29, 0x44, 0x8b, 0xed, 0xa5, 0xbe, 0xe4, 0x57, 0x8c, 0x7f, 0x2a, 0xe3, 0xd0,
	0xae, 0xb5, 0xa1, 0xec, 0x08, 0x0e, 0x67, 0x2b, 0xe3, 0xe3, 0xbc, 0xd4, 0x8b, 0xed, 0x47, 0x91,
	0x2d, 0xe1, 0xf8, 0x7c, 0xd9, 0x46, 0x56, 0x14, 0x9f, 0x41, 0xff, 0x9d, 0x94, 0x42, 0xce, 0xc4,
	0xba, 0xb4, 0x1e, 0x43, 0x7a, 0x0f, 0xe0, 0x29, 0xec, 0x1b, 0xb9, 0xf5, 0x1a, 0x4d, 0x0e, 0xef,
	0x3a, 0xb0, 0x0d, 0x58, 0x2a, 0x9b, 0x42, 0xcf, 0x7d, 0x85, 0xd5, 0x7f, 0x25, 0x1d, 0x00, 0xb9,
	0xf0, 0x39, 0xc9, 0x05, 0xc6, 0x70, 0xf0, 0xf6, 0x5a, 0x8b, 0x79, 0x59, 0xd8, 0x90, 0x3d, 0x7a,
	0x3b, 0x66, 0x0d, 0x81, 0xc8, 0x3b, 0x63, 0xf5, 0x7f, 0x4d, 0x3d, 0x58, 0x3a, 0xbe, 0x84, 0xae,
	0xdb, 0xb7, 0x2f, 0x7f, 0xe0, 0xc0, 0x3c, 0x8d, 0x2f, 0xe0, 0x80, 0x96, 0x3b, 0x2e, 0xd7, 0xae,
	0xd1, 0x68, 0x32, 0xb0, 0x4a, 0x8f, 0xd1, 0x5b, 0x12, 0x9f, 0x43, 0xb8, 0xd0, 0xe5, 0x46, 0xc5,
	0xa1, 0xfd, 0x01, 0xfa, 0x56, 0x65, 0x10, 0xea, 0x70, 0x7c, 0x05, 0x03, 0x1f, 0xc0, 0xe9, 0xba,
	0x7f, 0xea, 0x7e, 0xa3, 0xb3, 0x21, 0xa0, 0x2b, 0xca, 0xfa, 0x9d, 0x8a, 0xcf, 0xf6, 0x90, 0x14,
	0x9c, 0xf8, 0xe4, 0x6d, 0xf8, 0x91, 0x1d, 0xb4, 0xa2, 0x05, 0xff, 0x88, 0x36, 0x1d, 0xde, 0xfc,
	0x48, 0xf6, 0x6e, 0x9a, 0x84, 0x7c, 0x6b, 0x12, 0xf2, 0xbd, 0x49, 0xc8, 0xd7, 0x9f, 0xc9, 0xde,
	0x87, 0xae, 0xbd, 0x02, 0xaf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x54, 0xc6, 0x3f, 0x40,
	0x03, 0x00, 0x00,
}
