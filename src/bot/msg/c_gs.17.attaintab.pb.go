// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.17.attaintab.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 条件统计表数据
type AttainTabData struct {
	Objs []*AttainObj `protobuf:"bytes,1,rep,name=Objs" json:"Objs,omitempty"`
}

func (m *AttainTabData) Reset()                    { *m = AttainTabData{} }
func (m *AttainTabData) String() string            { return proto.CompactTextString(m) }
func (*AttainTabData) ProtoMessage()               {}
func (*AttainTabData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_17Attaintab, []int{0} }

type AttainObj struct {
	OId int32   `protobuf:"varint,1,opt,name=OId,proto3" json:"OId,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *AttainObj) Reset()                    { *m = AttainObj{} }
func (m *AttainObj) String() string            { return proto.CompactTextString(m) }
func (*AttainObj) ProtoMessage()               {}
func (*AttainObj) Descriptor() ([]byte, []int) { return fileDescriptorCGs_17Attaintab, []int{1} }

// 通知: 进度变化
type GS_AttainTabObjValueChanged struct {
	OId int32   `protobuf:"varint,1,opt,name=OId,proto3" json:"OId,omitempty"`
	Val float64 `protobuf:"fixed64,2,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (m *GS_AttainTabObjValueChanged) Reset()         { *m = GS_AttainTabObjValueChanged{} }
func (m *GS_AttainTabObjValueChanged) String() string { return proto.CompactTextString(m) }
func (*GS_AttainTabObjValueChanged) ProtoMessage()    {}
func (*GS_AttainTabObjValueChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_17Attaintab, []int{2}
}

func init() {
	proto.RegisterType((*AttainTabData)(nil), "msg.AttainTabData")
	proto.RegisterType((*AttainObj)(nil), "msg.AttainObj")
	proto.RegisterType((*GS_AttainTabObjValueChanged)(nil), "msg.GS_AttainTabObjValueChanged")
}
func (m *AttainTabData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttainTabData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Objs) > 0 {
		for _, msg := range m.Objs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCGs_17Attaintab(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AttainObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttainObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_17Attaintab(dAtA, i, uint64(m.OId))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	return i, nil
}

func (m *GS_AttainTabObjValueChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_AttainTabObjValueChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_17Attaintab(dAtA, i, uint64(m.OId))
	}
	if m.Val != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i += 8
	}
	return i, nil
}

func encodeVarintCGs_17Attaintab(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AttainTabData) Size() (n int) {
	var l int
	_ = l
	if len(m.Objs) > 0 {
		for _, e := range m.Objs {
			l = e.Size()
			n += 1 + l + sovCGs_17Attaintab(uint64(l))
		}
	}
	return n
}

func (m *AttainObj) Size() (n int) {
	var l int
	_ = l
	if m.OId != 0 {
		n += 1 + sovCGs_17Attaintab(uint64(m.OId))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func (m *GS_AttainTabObjValueChanged) Size() (n int) {
	var l int
	_ = l
	if m.OId != 0 {
		n += 1 + sovCGs_17Attaintab(uint64(m.OId))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func sovCGs_17Attaintab(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_17Attaintab(x uint64) (n int) {
	return sovCGs_17Attaintab(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttainTabData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_17Attaintab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttainTabData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttainTabData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_17Attaintab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_17Attaintab
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objs = append(m.Objs, &AttainObj{})
			if err := m.Objs[len(m.Objs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_17Attaintab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_17Attaintab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttainObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_17Attaintab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttainObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttainObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OId", wireType)
			}
			m.OId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_17Attaintab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_17Attaintab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_17Attaintab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_AttainTabObjValueChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_17Attaintab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_AttainTabObjValueChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_AttainTabObjValueChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OId", wireType)
			}
			m.OId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_17Attaintab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_17Attaintab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_17Attaintab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_17Attaintab(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_17Attaintab
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_17Attaintab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_17Attaintab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_17Attaintab
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_17Attaintab
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_17Attaintab(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_17Attaintab = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_17Attaintab   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.17.attaintab.proto", fileDescriptorCGs_17Attaintab) }

var fileDescriptorCGs_17Attaintab = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x8e, 0x4f, 0x2f,
	0xd6, 0x33, 0x34, 0xd7, 0x4b, 0x2c, 0x29, 0x49, 0xcc, 0xcc, 0x2b, 0x49, 0x4c, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08,
	0x28, 0x19, 0x73, 0xf1, 0x3a, 0x82, 0xd5, 0x84, 0x24, 0x26, 0xb9, 0x24, 0x96, 0x24, 0x0a, 0x29,
	0x71, 0xb1, 0xf8, 0x27, 0x65, 0x15, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0xe9, 0xe5,
	0x16, 0xa7, 0xeb, 0x41, 0x54, 0xf8, 0x27, 0x65, 0x05, 0x81, 0xe5, 0x94, 0xf4, 0xb9, 0x38, 0xe1,
	0x42, 0x42, 0x02, 0x5c, 0xcc, 0xfe, 0x9e, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x20,
	0x26, 0x48, 0x24, 0x2c, 0x31, 0x47, 0x82, 0x49, 0x81, 0x51, 0x83, 0x31, 0x08, 0xc4, 0x54, 0x72,
	0xe4, 0x92, 0x76, 0x0f, 0x8e, 0x87, 0x5b, 0xe4, 0x9f, 0x94, 0x15, 0x96, 0x98, 0x53, 0x9a, 0xea,
	0x9c, 0x91, 0x98, 0x97, 0x9e, 0x9a, 0x42, 0x8c, 0x11, 0x4e, 0x22, 0x27, 0x1e, 0xca, 0x31, 0x9c,
	0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31,
	0x24, 0xb1, 0x81, 0x7d, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x15, 0xc6, 0x40, 0xf1,
	0x00, 0x00, 0x00,
}
