// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c_gs.49.targetdays.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 开服庆典(七日目标)
type TargetDaysData struct {
	Taken  []int32         `protobuf:"varint,1,rep,packed,name=Taken" json:"Taken,omitempty"`
	BuyCnt map[int32]int32 `protobuf:"bytes,2,rep,name=BuyCnt" json:"BuyCnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TargetDaysData) Reset()                    { *m = TargetDaysData{} }
func (m *TargetDaysData) String() string            { return proto.CompactTextString(m) }
func (*TargetDaysData) ProtoMessage()               {}
func (*TargetDaysData) Descriptor() ([]byte, []int) { return fileDescriptorCGs_49Targetdays, []int{0} }

type C_TargetDaysTake struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_TargetDaysTake) Reset()                    { *m = C_TargetDaysTake{} }
func (m *C_TargetDaysTake) String() string            { return proto.CompactTextString(m) }
func (*C_TargetDaysTake) ProtoMessage()               {}
func (*C_TargetDaysTake) Descriptor() ([]byte, []int) { return fileDescriptorCGs_49Targetdays, []int{1} }

type GS_TargetDaysTake_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TargetDaysTake_R) Reset()         { *m = GS_TargetDaysTake_R{} }
func (m *GS_TargetDaysTake_R) String() string { return proto.CompactTextString(m) }
func (*GS_TargetDaysTake_R) ProtoMessage()    {}
func (*GS_TargetDaysTake_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_49Targetdays, []int{2}
}

type C_TargetDaysBuy struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *C_TargetDaysBuy) Reset()                    { *m = C_TargetDaysBuy{} }
func (m *C_TargetDaysBuy) String() string            { return proto.CompactTextString(m) }
func (*C_TargetDaysBuy) ProtoMessage()               {}
func (*C_TargetDaysBuy) Descriptor() ([]byte, []int) { return fileDescriptorCGs_49Targetdays, []int{3} }

type GS_TargetDaysBuy_R struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Rewards   *Rewards `protobuf:"bytes,2,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *GS_TargetDaysBuy_R) Reset()         { *m = GS_TargetDaysBuy_R{} }
func (m *GS_TargetDaysBuy_R) String() string { return proto.CompactTextString(m) }
func (*GS_TargetDaysBuy_R) ProtoMessage()    {}
func (*GS_TargetDaysBuy_R) Descriptor() ([]byte, []int) {
	return fileDescriptorCGs_49Targetdays, []int{4}
}

func init() {
	proto.RegisterType((*TargetDaysData)(nil), "msg.TargetDaysData")
	proto.RegisterType((*C_TargetDaysTake)(nil), "msg.C_TargetDaysTake")
	proto.RegisterType((*GS_TargetDaysTake_R)(nil), "msg.GS_TargetDaysTake_R")
	proto.RegisterType((*C_TargetDaysBuy)(nil), "msg.C_TargetDaysBuy")
	proto.RegisterType((*GS_TargetDaysBuy_R)(nil), "msg.GS_TargetDaysBuy_R")
}
func (m *TargetDaysData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetDaysData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Taken) > 0 {
		dAtA2 := make([]byte, len(m.Taken)*10)
		var j1 int
		for _, num1 := range m.Taken {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.BuyCnt) > 0 {
		for k, _ := range m.BuyCnt {
			dAtA[i] = 0x12
			i++
			v := m.BuyCnt[k]
			mapSize := 1 + sovCGs_49Targetdays(uint64(k)) + 1 + sovCGs_49Targetdays(uint64(v))
			i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *C_TargetDaysTake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TargetDaysTake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_TargetDaysTake_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TargetDaysTake_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.Rewards.Size()))
		n3, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C_TargetDaysBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_TargetDaysBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_TargetDaysBuy_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_TargetDaysBuy_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCGs_49Targetdays(dAtA, i, uint64(m.Rewards.Size()))
		n4, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintCGs_49Targetdays(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TargetDaysData) Size() (n int) {
	var l int
	_ = l
	if len(m.Taken) > 0 {
		l = 0
		for _, e := range m.Taken {
			l += sovCGs_49Targetdays(uint64(e))
		}
		n += 1 + sovCGs_49Targetdays(uint64(l)) + l
	}
	if len(m.BuyCnt) > 0 {
		for k, v := range m.BuyCnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCGs_49Targetdays(uint64(k)) + 1 + sovCGs_49Targetdays(uint64(v))
			n += mapEntrySize + 1 + sovCGs_49Targetdays(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *C_TargetDaysTake) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_49Targetdays(uint64(m.Id))
	}
	return n
}

func (m *GS_TargetDaysTake_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_49Targetdays(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_49Targetdays(uint64(l))
	}
	return n
}

func (m *C_TargetDaysBuy) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCGs_49Targetdays(uint64(m.Id))
	}
	return n
}

func (m *GS_TargetDaysBuy_R) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovCGs_49Targetdays(uint64(m.ErrorCode))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCGs_49Targetdays(uint64(l))
	}
	return n
}

func sovCGs_49Targetdays(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCGs_49Targetdays(x uint64) (n int) {
	return sovCGs_49Targetdays(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TargetDaysData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetDaysData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetDaysData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_49Targetdays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Taken = append(m.Taken, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_49Targetdays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCGs_49Targetdays
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_49Targetdays
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Taken = append(m.Taken, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Taken", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyCnt == nil {
				m.BuyCnt = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCGs_49Targetdays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_49Targetdays
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCGs_49Targetdays
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCGs_49Targetdays
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyCnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TargetDaysTake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TargetDaysTake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TargetDaysTake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TargetDaysTake_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TargetDaysTake_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TargetDaysTake_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_TargetDaysBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_TargetDaysBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_TargetDaysBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_TargetDaysBuy_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_TargetDaysBuy_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_TargetDaysBuy_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &Rewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCGs_49Targetdays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCGs_49Targetdays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCGs_49Targetdays(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCGs_49Targetdays
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCGs_49Targetdays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCGs_49Targetdays
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCGs_49Targetdays
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCGs_49Targetdays(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCGs_49Targetdays = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCGs_49Targetdays   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("c_gs.49.targetdays.proto", fileDescriptorCGs_49Targetdays) }

var fileDescriptorCGs_49Targetdays = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xc1, 0x4e, 0x2a, 0x31,
	0x14, 0x86, 0xe9, 0x4c, 0xe0, 0xe6, 0x1e, 0x0c, 0x92, 0x8a, 0xc9, 0x84, 0x98, 0x11, 0x67, 0x61,
	0x58, 0x35, 0x04, 0x4d, 0x14, 0x97, 0x03, 0xc4, 0xb0, 0xad, 0xac, 0x74, 0x41, 0x2a, 0xd3, 0x74,
	0x81, 0x50, 0xd3, 0x76, 0x34, 0x7d, 0x0b, 0xd7, 0x3e, 0x11, 0x4b, 0x1f, 0x41, 0xc7, 0x17, 0x31,
	0xd3, 0x19, 0x03, 0xe8, 0xd6, 0x5d, 0xcf, 0xdf, 0xef, 0xcf, 0x77, 0x9a, 0x42, 0x30, 0x9f, 0x09,
	0x4d, 0xce, 0x07, 0xc4, 0x30, 0x25, 0xb8, 0x49, 0x98, 0xd5, 0xe4, 0x51, 0x49, 0x23, 0xb1, 0xbf,
	0xd4, 0xa2, 0x0d, 0x42, 0x0a, 0x59, 0x04, 0xed, 0x43, 0x87, 0xf6, 0x7a, 0x44, 0x1b, 0x95, 0xce,
	0x4d, 0xc9, 0x45, 0xaf, 0x08, 0x1a, 0x53, 0x57, 0x1e, 0x31, 0xab, 0x47, 0xcc, 0x30, 0xdc, 0x82,
	0xea, 0x94, 0x2d, 0xf8, 0x2a, 0x40, 0x1d, 0xbf, 0x5b, 0xa5, 0xc5, 0x80, 0x2f, 0xa0, 0x16, 0xa7,
	0x76, 0xb8, 0x32, 0x81, 0xd7, 0xf1, 0xbb, 0xf5, 0xfe, 0x31, 0x59, 0x6a, 0x41, 0x76, 0xab, 0xa4,
	0x20, 0xc6, 0x2b, 0xa3, 0x2c, 0x2d, 0xf1, 0xf6, 0x00, 0xea, 0x5b, 0x31, 0x6e, 0x82, 0xbf, 0xe0,
	0x36, 0x40, 0x1d, 0xd4, 0xad, 0xd2, 0xfc, 0x98, 0xfb, 0x9e, 0xd8, 0x43, 0xca, 0x03, 0xcf, 0x65,
	0xc5, 0x70, 0xe5, 0x5d, 0xa2, 0x28, 0x82, 0xe6, 0x70, 0xb6, 0x51, 0xe4, 0x8b, 0xe0, 0x06, 0x78,
	0x93, 0xa4, 0xac, 0x7b, 0x93, 0x24, 0xba, 0x83, 0x83, 0xeb, 0x9b, 0x1f, 0xd0, 0x8c, 0xe2, 0x23,
	0xf8, 0x3f, 0x56, 0x4a, 0xaa, 0xa1, 0x4c, 0x78, 0x49, 0x6f, 0x02, 0x7c, 0x0a, 0xff, 0x28, 0x7f,
	0x66, 0x2a, 0xd1, 0x4e, 0x5a, 0xef, 0xef, 0xb9, 0xd7, 0x94, 0x19, 0xfd, 0xbe, 0x8c, 0x4e, 0x60,
	0x7f, 0x7b, 0x81, 0x38, 0xb5, 0xbf, 0xfc, 0xb7, 0x80, 0x77, 0xfc, 0x71, 0x6a, 0xff, 0x4a, 0x1f,
	0xb7, 0xd6, 0x1f, 0x61, 0x65, 0x9d, 0x85, 0xe8, 0x2d, 0x0b, 0xd1, 0x7b, 0x16, 0xa2, 0x97, 0xcf,
	0xb0, 0x72, 0x5f, 0x73, 0x3f, 0x77, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x02, 0x42, 0x12,
	0xfd, 0x01, 0x00, 0x00,
}
