// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gw_gs.02.all.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 注册网关
type GW_RegisterGate struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GW_RegisterGate) Reset()                    { *m = GW_RegisterGate{} }
func (m *GW_RegisterGate) String() string            { return proto.CompactTextString(m) }
func (*GW_RegisterGate) ProtoMessage()               {}
func (*GW_RegisterGate) Descriptor() ([]byte, []int) { return fileDescriptorGwGs_02All, []int{0} }

type GS_RegisterGate_R struct {
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *GS_RegisterGate_R) Reset()                    { *m = GS_RegisterGate_R{} }
func (m *GS_RegisterGate_R) String() string            { return proto.CompactTextString(m) }
func (*GS_RegisterGate_R) ProtoMessage()               {}
func (*GS_RegisterGate_R) Descriptor() ([]byte, []int) { return fileDescriptorGwGs_02All, []int{1} }

// 玩家上线
type GW_UserOnline struct {
	Sid      uint64            `protobuf:"varint,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	UserId   string            `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AuthId   string            `protobuf:"bytes,3,opt,name=AuthId,proto3" json:"AuthId,omitempty"`
	Svr0     string            `protobuf:"bytes,4,opt,name=Svr0,proto3" json:"Svr0,omitempty"`
	Sdk      string            `protobuf:"bytes,5,opt,name=Sdk,proto3" json:"Sdk,omitempty"`
	Model    string            `protobuf:"bytes,6,opt,name=Model,proto3" json:"Model,omitempty"`
	DevId    string            `protobuf:"bytes,7,opt,name=DevId,proto3" json:"DevId,omitempty"`
	Os       string            `protobuf:"bytes,8,opt,name=Os,proto3" json:"Os,omitempty"`
	OsVer    string            `protobuf:"bytes,9,opt,name=OsVer,proto3" json:"OsVer,omitempty"`
	LoginIP  string            `protobuf:"bytes,10,opt,name=LoginIP,proto3" json:"LoginIP,omitempty"`
	Language string            `protobuf:"bytes,11,opt,name=Language,proto3" json:"Language,omitempty"`
	AuthRet  map[string]string `protobuf:"bytes,12,rep,name=AuthRet" json:"AuthRet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GW_UserOnline) Reset()                    { *m = GW_UserOnline{} }
func (m *GW_UserOnline) String() string            { return proto.CompactTextString(m) }
func (*GW_UserOnline) ProtoMessage()               {}
func (*GW_UserOnline) Descriptor() ([]byte, []int) { return fileDescriptorGwGs_02All, []int{2} }

// 通知 game 玩家登出
type GW_LogoutPlayer struct {
	Sid uint64 `protobuf:"varint,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
}

func (m *GW_LogoutPlayer) Reset()                    { *m = GW_LogoutPlayer{} }
func (m *GW_LogoutPlayer) String() string            { return proto.CompactTextString(m) }
func (*GW_LogoutPlayer) ProtoMessage()               {}
func (*GW_LogoutPlayer) Descriptor() ([]byte, []int) { return fileDescriptorGwGs_02All, []int{3} }

// game 踢人
type GS_Kick struct {
	Sid uint64 `protobuf:"varint,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
}

func (m *GS_Kick) Reset()                    { *m = GS_Kick{} }
func (m *GS_Kick) String() string            { return proto.CompactTextString(m) }
func (*GS_Kick) ProtoMessage()               {}
func (*GS_Kick) Descriptor() ([]byte, []int) { return fileDescriptorGwGs_02All, []int{4} }

func init() {
	proto.RegisterType((*GW_RegisterGate)(nil), "msg.GW_RegisterGate")
	proto.RegisterType((*GS_RegisterGate_R)(nil), "msg.GS_RegisterGate_R")
	proto.RegisterType((*GW_UserOnline)(nil), "msg.GW_UserOnline")
	proto.RegisterType((*GW_LogoutPlayer)(nil), "msg.GW_LogoutPlayer")
	proto.RegisterType((*GS_Kick)(nil), "msg.GS_Kick")
}
func (m *GW_RegisterGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GW_RegisterGate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GS_RegisterGate_R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_RegisterGate_R) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GW_UserOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GW_UserOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(m.Sid))
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.AuthId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.AuthId)))
		i += copy(dAtA[i:], m.AuthId)
	}
	if len(m.Svr0) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.Svr0)))
		i += copy(dAtA[i:], m.Svr0)
	}
	if len(m.Sdk) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.Sdk)))
		i += copy(dAtA[i:], m.Sdk)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if len(m.DevId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.DevId)))
		i += copy(dAtA[i:], m.DevId)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.OsVer) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.OsVer)))
		i += copy(dAtA[i:], m.OsVer)
	}
	if len(m.LoginIP) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.LoginIP)))
		i += copy(dAtA[i:], m.LoginIP)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if len(m.AuthRet) > 0 {
		for k, _ := range m.AuthRet {
			dAtA[i] = 0x62
			i++
			v := m.AuthRet[k]
			mapSize := 1 + len(k) + sovGwGs_02All(uint64(len(k))) + 1 + len(v) + sovGwGs_02All(uint64(len(v)))
			i = encodeVarintGwGs_02All(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGwGs_02All(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGwGs_02All(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GW_LogoutPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GW_LogoutPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(m.Sid))
	}
	return i, nil
}

func (m *GS_Kick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GS_Kick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGwGs_02All(dAtA, i, uint64(m.Sid))
	}
	return i, nil
}

func encodeVarintGwGs_02All(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GW_RegisterGate) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGwGs_02All(uint64(m.Id))
	}
	return n
}

func (m *GS_RegisterGate_R) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *GW_UserOnline) Size() (n int) {
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovGwGs_02All(uint64(m.Sid))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.AuthId)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.Svr0)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.Sdk)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.OsVer)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.LoginIP)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovGwGs_02All(uint64(l))
	}
	if len(m.AuthRet) > 0 {
		for k, v := range m.AuthRet {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGwGs_02All(uint64(len(k))) + 1 + len(v) + sovGwGs_02All(uint64(len(v)))
			n += mapEntrySize + 1 + sovGwGs_02All(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GW_LogoutPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovGwGs_02All(uint64(m.Sid))
	}
	return n
}

func (m *GS_Kick) Size() (n int) {
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovGwGs_02All(uint64(m.Sid))
	}
	return n
}

func sovGwGs_02All(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGwGs_02All(x uint64) (n int) {
	return sovGwGs_02All(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GW_RegisterGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GW_RegisterGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GW_RegisterGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGwGs_02All(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_RegisterGate_R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_RegisterGate_R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_RegisterGate_R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGwGs_02All(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GW_UserOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GW_UserOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GW_UserOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svr0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svr0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRet == nil {
				m.AuthRet = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGwGs_02All
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGwGs_02All
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGwGs_02All
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGwGs_02All
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGwGs_02All
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGwGs_02All(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGwGs_02All
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuthRet[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGwGs_02All(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GW_LogoutPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GW_LogoutPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GW_LogoutPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGwGs_02All(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GS_Kick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GS_Kick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GS_Kick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGwGs_02All(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGwGs_02All
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGwGs_02All(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGwGs_02All
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGwGs_02All
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGwGs_02All
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGwGs_02All
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGwGs_02All(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGwGs_02All = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGwGs_02All   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gw_gs.02.all.proto", fileDescriptorGwGs_02All) }

var fileDescriptorGwGs_02All = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x8a, 0xda, 0x40,
	0x14, 0x87, 0x4d, 0xa2, 0x46, 0x8f, 0xf6, 0xdf, 0x20, 0x65, 0xb0, 0x90, 0xda, 0xf4, 0xc6, 0x9b,
	0x06, 0xb1, 0x37, 0xad, 0x77, 0x2d, 0x2d, 0x21, 0xd4, 0x12, 0x99, 0xd0, 0x7a, 0x19, 0x52, 0x33,
	0x4c, 0x83, 0x31, 0x53, 0x32, 0x89, 0xc5, 0xb7, 0xd8, 0xc7, 0xf2, 0x72, 0x1f, 0x61, 0xd7, 0x7d,
	0x87, 0xbd, 0x5e, 0x66, 0x46, 0x97, 0x15, 0xef, 0xce, 0xf7, 0x9d, 0x1f, 0xc3, 0x39, 0x27, 0x01,
	0xc4, 0xfe, 0xc7, 0x4c, 0x78, 0x93, 0xa9, 0x97, 0xe4, 0xb9, 0xf7, 0xaf, 0xe4, 0x15, 0x47, 0xd6,
	0x46, 0xb0, 0x21, 0x30, 0xce, 0xb8, 0x16, 0xee, 0x3b, 0x78, 0xe1, 0x2f, 0x63, 0x42, 0x59, 0x26,
	0x2a, 0x5a, 0xfa, 0x49, 0x45, 0xd1, 0x73, 0x30, 0x83, 0x14, 0x1b, 0x23, 0x63, 0xdc, 0x22, 0x66,
	0x90, 0xba, 0x1f, 0xe0, 0x95, 0x1f, 0x9d, 0x45, 0x62, 0x82, 0x30, 0xd8, 0x51, 0xbd, 0x5a, 0x51,
	0x21, 0x54, 0xb2, 0x43, 0x4e, 0xe8, 0xde, 0x9b, 0xf0, 0xcc, 0x5f, 0xc6, 0xbf, 0x04, 0x2d, 0xc3,
	0x22, 0xcf, 0x0a, 0x8a, 0x5e, 0x82, 0x15, 0x65, 0xfa, 0xc5, 0x26, 0x91, 0x25, 0x7a, 0x0d, 0x6d,
	0xd9, 0x0f, 0x52, 0x6c, 0x8e, 0x8c, 0x71, 0x97, 0x1c, 0x49, 0xfa, 0x2f, 0x75, 0xf5, 0x37, 0x48,
	0xb1, 0xa5, 0xbd, 0x26, 0x84, 0xa0, 0x19, 0x6d, 0xcb, 0x09, 0x6e, 0x2a, 0xab, 0x6a, 0xf5, 0x6a,
	0xba, 0xc6, 0x2d, 0xa5, 0x64, 0x89, 0x06, 0xd0, 0xfa, 0xc9, 0x53, 0x9a, 0xe3, 0xb6, 0x72, 0x1a,
	0xa4, 0xfd, 0x46, 0xb7, 0x41, 0x8a, 0x6d, 0x6d, 0x15, 0xc8, 0x25, 0x43, 0x81, 0x3b, 0x4a, 0x99,
	0xa1, 0x90, 0xa9, 0x50, 0xfc, 0xa6, 0x25, 0xee, 0xea, 0x94, 0x02, 0xb9, 0xe5, 0x9c, 0xb3, 0xac,
	0x08, 0x16, 0x18, 0x94, 0x3f, 0x21, 0x1a, 0x42, 0x67, 0x9e, 0x14, 0xac, 0x4e, 0x18, 0xc5, 0x3d,
	0xd5, 0x7a, 0x64, 0xf4, 0x19, 0x6c, 0x39, 0x37, 0xa1, 0x15, 0xee, 0x8f, 0xac, 0x71, 0x6f, 0xfa,
	0xd6, 0xdb, 0x08, 0xe6, 0x9d, 0x1d, 0xc5, 0x3b, 0x26, 0xbe, 0x17, 0x55, 0xb9, 0x23, 0xa7, 0xfc,
	0x70, 0x06, 0xfd, 0xa7, 0x0d, 0xb9, 0xe4, 0x9a, 0xee, 0xd4, 0xe9, 0xba, 0x44, 0x96, 0x72, 0xd0,
	0x6d, 0x92, 0xd7, 0xf4, 0x78, 0x39, 0x0d, 0x33, 0xf3, 0x93, 0xe1, 0xbe, 0x57, 0x9f, 0x72, 0xce,
	0x19, 0xaf, 0xab, 0x45, 0x9e, 0xec, 0x68, 0x79, 0x79, 0x79, 0xf7, 0x0d, 0xd8, 0x7e, 0x14, 0xff,
	0xc8, 0x56, 0xeb, 0xcb, 0xe6, 0xd7, 0xc1, 0xfe, 0xd6, 0x69, 0xec, 0x0f, 0x8e, 0x71, 0x7d, 0x70,
	0x8c, 0x9b, 0x83, 0x63, 0x5c, 0xdd, 0x39, 0x8d, 0x3f, 0x6d, 0xf5, 0xa7, 0x7c, 0x7c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0xd7, 0x78, 0x80, 0x50, 0x02, 0x00, 0x00,
}
